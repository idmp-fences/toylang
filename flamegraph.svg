<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="438" onload="init(evt)" viewBox="0 0 1200 438" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="438" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="421.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="421.00"> </text><svg id="frames" x="10" width="1180" total_samples="11100"><g><title>ntdll`LdrGetDllHandleEx (2 samples, 0.02%)</title><rect x="0.0180%" y="309" width="0.0180%" height="15" fill="rgb(227,0,7)" fg:x="2" fg:w="2"/><text x="0.2680%" y="319.50"></text></g><g><title>ntdll`RtlQueryPerformanceCounter (2 samples, 0.02%)</title><rect x="0.0180%" y="293" width="0.0180%" height="15" fill="rgb(217,0,24)" fg:x="2" fg:w="2"/><text x="0.2680%" y="303.50"></text></g><g><title>ntdll`RtlQueryPerformanceCounter (2 samples, 0.02%)</title><rect x="0.0180%" y="277" width="0.0180%" height="15" fill="rgb(221,193,54)" fg:x="2" fg:w="2"/><text x="0.2680%" y="287.50"></text></g><g><title>ntdll`LdrpResGetMappingSize (3 samples, 0.03%)</title><rect x="0.0450%" y="197" width="0.0270%" height="15" fill="rgb(248,212,6)" fg:x="5" fg:w="3"/><text x="0.2950%" y="207.50"></text></g><g><title>ntdll`LdrGetDllHandleByMapping (5 samples, 0.05%)</title><rect x="0.0450%" y="261" width="0.0450%" height="15" fill="rgb(208,68,35)" fg:x="5" fg:w="5"/><text x="0.2950%" y="271.50"></text></g><g><title>ntdll`LdrAddRefDll (5 samples, 0.05%)</title><rect x="0.0450%" y="245" width="0.0450%" height="15" fill="rgb(232,128,0)" fg:x="5" fg:w="5"/><text x="0.2950%" y="255.50"></text></g><g><title>ntdll`LdrControlFlowGuardEnforced (5 samples, 0.05%)</title><rect x="0.0450%" y="229" width="0.0450%" height="15" fill="rgb(207,160,47)" fg:x="5" fg:w="5"/><text x="0.2950%" y="239.50"></text></g><g><title>ntdll`RtlImageNtHeaderEx (5 samples, 0.05%)</title><rect x="0.0450%" y="213" width="0.0450%" height="15" fill="rgb(228,23,34)" fg:x="5" fg:w="5"/><text x="0.2950%" y="223.50"></text></g><g><title>ntdll`RtlImageNtHeaderEx (2 samples, 0.02%)</title><rect x="0.0721%" y="197" width="0.0180%" height="15" fill="rgb(218,30,26)" fg:x="8" fg:w="2"/><text x="0.3221%" y="207.50"></text></g><g><title>ntdll`RtlAnsiStringToUnicodeString (2 samples, 0.02%)</title><rect x="0.0721%" y="181" width="0.0180%" height="15" fill="rgb(220,122,19)" fg:x="8" fg:w="2"/><text x="0.3221%" y="191.50"></text></g><g><title>ntdll`LdrLoadDll (11 samples, 0.10%)</title><rect x="0.0360%" y="309" width="0.0991%" height="15" fill="rgb(250,228,42)" fg:x="4" fg:w="11"/><text x="0.2860%" y="319.50"></text></g><g><title>ntdll`RtlUnicodeToCustomCPN (11 samples, 0.10%)</title><rect x="0.0360%" y="293" width="0.0991%" height="15" fill="rgb(240,193,28)" fg:x="4" fg:w="11"/><text x="0.2860%" y="303.50"></text></g><g><title>ntdll`RtlImageRvaToSection (10 samples, 0.09%)</title><rect x="0.0450%" y="277" width="0.0901%" height="15" fill="rgb(216,20,37)" fg:x="5" fg:w="10"/><text x="0.2950%" y="287.50"></text></g><g><title>ntdll`RtlCopyUnicodeString (5 samples, 0.05%)</title><rect x="0.0901%" y="261" width="0.0450%" height="15" fill="rgb(206,188,39)" fg:x="10" fg:w="5"/><text x="0.3401%" y="271.50"></text></g><g><title>ntdll`RtlEnumerateEntryHashTable (5 samples, 0.05%)</title><rect x="0.0901%" y="245" width="0.0450%" height="15" fill="rgb(217,207,13)" fg:x="10" fg:w="5"/><text x="0.3401%" y="255.50"></text></g><g><title>ntdll`RtlEnumerateEntryHashTable (5 samples, 0.05%)</title><rect x="0.0901%" y="229" width="0.0450%" height="15" fill="rgb(231,73,38)" fg:x="10" fg:w="5"/><text x="0.3401%" y="239.50"></text></g><g><title>ntdll`RtlEnumerateEntryHashTable (5 samples, 0.05%)</title><rect x="0.0901%" y="213" width="0.0450%" height="15" fill="rgb(225,20,46)" fg:x="10" fg:w="5"/><text x="0.3401%" y="223.50"></text></g><g><title>ntdll`RtlActivateActivationContextUnsafeFast (5 samples, 0.05%)</title><rect x="0.0901%" y="197" width="0.0450%" height="15" fill="rgb(210,31,41)" fg:x="10" fg:w="5"/><text x="0.3401%" y="207.50"></text></g><g><title>KERNELBASE`TestCreate (5 samples, 0.05%)</title><rect x="0.0901%" y="181" width="0.0450%" height="15" fill="rgb(221,200,47)" fg:x="10" fg:w="5"/><text x="0.3401%" y="191.50"></text></g><g><title>KERNELBASE`TestCreate (5 samples, 0.05%)</title><rect x="0.0901%" y="165" width="0.0450%" height="15" fill="rgb(226,26,5)" fg:x="10" fg:w="5"/><text x="0.3401%" y="175.50"></text></g><g><title>ntdll`RtlActivateActivationContextUnsafeFast (2 samples, 0.02%)</title><rect x="0.1532%" y="261" width="0.0180%" height="15" fill="rgb(249,33,26)" fg:x="17" fg:w="2"/><text x="0.4032%" y="271.50"></text></g><g><title>ntdll`RtlEnumerateEntryHashTable (5 samples, 0.05%)</title><rect x="0.1532%" y="309" width="0.0450%" height="15" fill="rgb(235,183,28)" fg:x="17" fg:w="5"/><text x="0.4032%" y="319.50"></text></g><g><title>ntdll`RtlEnumerateEntryHashTable (5 samples, 0.05%)</title><rect x="0.1532%" y="293" width="0.0450%" height="15" fill="rgb(221,5,38)" fg:x="17" fg:w="5"/><text x="0.4032%" y="303.50"></text></g><g><title>ntdll`RtlEnumerateEntryHashTable (5 samples, 0.05%)</title><rect x="0.1532%" y="277" width="0.0450%" height="15" fill="rgb(247,18,42)" fg:x="17" fg:w="5"/><text x="0.4032%" y="287.50"></text></g><g><title>ntdll`RtlEnumerateEntryHashTable (3 samples, 0.03%)</title><rect x="0.1712%" y="261" width="0.0270%" height="15" fill="rgb(241,131,45)" fg:x="19" fg:w="3"/><text x="0.4212%" y="271.50"></text></g><g><title>ntdll`RtlActivateActivationContextUnsafeFast (3 samples, 0.03%)</title><rect x="0.1712%" y="245" width="0.0270%" height="15" fill="rgb(249,31,29)" fg:x="19" fg:w="3"/><text x="0.4212%" y="255.50"></text></g><g><title>ntdll`LdrAddRefDll (2 samples, 0.02%)</title><rect x="0.2252%" y="181" width="0.0180%" height="15" fill="rgb(225,111,53)" fg:x="25" fg:w="2"/><text x="0.4752%" y="191.50"></text></g><g><title>ntdll`LdrControlFlowGuardEnforced (2 samples, 0.02%)</title><rect x="0.2252%" y="165" width="0.0180%" height="15" fill="rgb(238,160,17)" fg:x="25" fg:w="2"/><text x="0.4752%" y="175.50"></text></g><g><title>ntdll`RtlImageNtHeaderEx (2 samples, 0.02%)</title><rect x="0.2252%" y="149" width="0.0180%" height="15" fill="rgb(214,148,48)" fg:x="25" fg:w="2"/><text x="0.4752%" y="159.50"></text></g><g><title>ntdll`RtlImageNtHeaderEx (6 samples, 0.05%)</title><rect x="0.1982%" y="309" width="0.0541%" height="15" fill="rgb(232,36,49)" fg:x="22" fg:w="6"/><text x="0.4482%" y="319.50"></text></g><g><title>ntdll`RtlImageNtHeaderEx (6 samples, 0.05%)</title><rect x="0.1982%" y="293" width="0.0541%" height="15" fill="rgb(209,103,24)" fg:x="22" fg:w="6"/><text x="0.4482%" y="303.50"></text></g><g><title>ntdll`RtlAnsiStringToUnicodeString (6 samples, 0.05%)</title><rect x="0.1982%" y="277" width="0.0541%" height="15" fill="rgb(229,88,8)" fg:x="22" fg:w="6"/><text x="0.4482%" y="287.50"></text></g><g><title>ntdll`LdrAddRefDll (6 samples, 0.05%)</title><rect x="0.1982%" y="261" width="0.0541%" height="15" fill="rgb(213,181,19)" fg:x="22" fg:w="6"/><text x="0.4482%" y="271.50"></text></g><g><title>ntdll`LdrControlFlowGuardEnforced (6 samples, 0.05%)</title><rect x="0.1982%" y="245" width="0.0541%" height="15" fill="rgb(254,191,54)" fg:x="22" fg:w="6"/><text x="0.4482%" y="255.50"></text></g><g><title>ntdll`RtlImageNtHeaderEx (5 samples, 0.05%)</title><rect x="0.2072%" y="229" width="0.0450%" height="15" fill="rgb(241,83,37)" fg:x="23" fg:w="5"/><text x="0.4572%" y="239.50"></text></g><g><title>ntdll`RtlImageNtHeaderEx (3 samples, 0.03%)</title><rect x="0.2252%" y="213" width="0.0270%" height="15" fill="rgb(233,36,39)" fg:x="25" fg:w="3"/><text x="0.4752%" y="223.50"></text></g><g><title>ntdll`RtlAnsiStringToUnicodeString (3 samples, 0.03%)</title><rect x="0.2252%" y="197" width="0.0270%" height="15" fill="rgb(226,3,54)" fg:x="25" fg:w="3"/><text x="0.4752%" y="207.50"></text></g><g><title>ntdll`LdrInitializeThunk (30 samples, 0.27%)</title><rect x="0.0000%" y="357" width="0.2703%" height="15" fill="rgb(245,192,40)" fg:x="0" fg:w="30"/><text x="0.2500%" y="367.50"></text></g><g><title>ntdll`EtwLogTraceEvent (30 samples, 0.27%)</title><rect x="0.0000%" y="341" width="0.2703%" height="15" fill="rgb(238,167,29)" fg:x="0" fg:w="30"/><text x="0.2500%" y="351.50"></text></g><g><title>ntdll`LdrInitShimEngineDynamic (30 samples, 0.27%)</title><rect x="0.0000%" y="325" width="0.2703%" height="15" fill="rgb(232,182,51)" fg:x="0" fg:w="30"/><text x="0.2500%" y="335.50"></text></g><g><title>ntdll`LdrInitializeThunk (31 samples, 0.28%)</title><rect x="0.0000%" y="373" width="0.2793%" height="15" fill="rgb(231,60,39)" fg:x="0" fg:w="31"/><text x="0.2500%" y="383.50"></text></g><g><title>ntdll`LdrpResGetMappingSize (6 samples, 0.05%)</title><rect x="0.2973%" y="277" width="0.0541%" height="15" fill="rgb(208,69,12)" fg:x="33" fg:w="6"/><text x="0.5473%" y="287.50"></text></g><g><title>ntdll`RtlpIsQualifiedLanguage (2 samples, 0.02%)</title><rect x="0.3333%" y="261" width="0.0180%" height="15" fill="rgb(235,93,37)" fg:x="37" fg:w="2"/><text x="0.5833%" y="271.50"></text></g><g><title>ntdll`RtlClearThreadWorkOnBehalfTicket (9 samples, 0.08%)</title><rect x="0.2883%" y="341" width="0.0811%" height="15" fill="rgb(213,116,39)" fg:x="32" fg:w="9"/><text x="0.5383%" y="351.50"></text></g><g><title>ntdll`RtlHashUnicodeString (8 samples, 0.07%)</title><rect x="0.2973%" y="325" width="0.0721%" height="15" fill="rgb(222,207,29)" fg:x="33" fg:w="8"/><text x="0.5473%" y="335.50"></text></g><g><title>ntdll`RtlQueryPerformanceCounter (8 samples, 0.07%)</title><rect x="0.2973%" y="309" width="0.0721%" height="15" fill="rgb(206,96,30)" fg:x="33" fg:w="8"/><text x="0.5473%" y="319.50"></text></g><g><title>ntdll`RtlQueryPerformanceCounter (8 samples, 0.07%)</title><rect x="0.2973%" y="293" width="0.0721%" height="15" fill="rgb(218,138,4)" fg:x="33" fg:w="8"/><text x="0.5473%" y="303.50"></text></g><g><title>ntdll`RtlQueryPerformanceCounter (2 samples, 0.02%)</title><rect x="0.3514%" y="277" width="0.0180%" height="15" fill="rgb(250,191,14)" fg:x="39" fg:w="2"/><text x="0.6014%" y="287.50"></text></g><g><title>ntdll`RtlCopyMemory (9 samples, 0.08%)</title><rect x="0.3874%" y="229" width="0.0811%" height="15" fill="rgb(239,60,40)" fg:x="43" fg:w="9"/><text x="0.6374%" y="239.50"></text></g><g><title>ntdll`RtlTryAcquirePebLock (9 samples, 0.08%)</title><rect x="0.3874%" y="213" width="0.0811%" height="15" fill="rgb(206,27,48)" fg:x="43" fg:w="9"/><text x="0.6374%" y="223.50"></text></g><g><title>ntdll`RtlTryAcquirePebLock (9 samples, 0.08%)</title><rect x="0.3874%" y="197" width="0.0811%" height="15" fill="rgb(225,35,8)" fg:x="43" fg:w="9"/><text x="0.6374%" y="207.50"></text></g><g><title>ntdll`RtlFreeHeap (8 samples, 0.07%)</title><rect x="0.3964%" y="181" width="0.0721%" height="15" fill="rgb(250,213,24)" fg:x="44" fg:w="8"/><text x="0.6464%" y="191.50"></text></g><g><title>ntdll`RtlGetCurrentServiceSessionId (8 samples, 0.07%)</title><rect x="0.3964%" y="165" width="0.0721%" height="15" fill="rgb(247,123,22)" fg:x="44" fg:w="8"/><text x="0.6464%" y="175.50"></text></g><g><title>ntdll`RtlDeleteBoundaryDescriptor (8 samples, 0.07%)</title><rect x="0.3964%" y="149" width="0.0721%" height="15" fill="rgb(231,138,38)" fg:x="44" fg:w="8"/><text x="0.6464%" y="159.50"></text></g><g><title>ntdll`RtlTryEnterCriticalSection (8 samples, 0.07%)</title><rect x="0.3964%" y="133" width="0.0721%" height="15" fill="rgb(231,145,46)" fg:x="44" fg:w="8"/><text x="0.6464%" y="143.50"></text></g><g><title>ntdll`RtlTryEnterCriticalSection (8 samples, 0.07%)</title><rect x="0.3964%" y="117" width="0.0721%" height="15" fill="rgb(251,118,11)" fg:x="44" fg:w="8"/><text x="0.6464%" y="127.50"></text></g><g><title>ntdll`RtlTryEnterCriticalSection (7 samples, 0.06%)</title><rect x="0.4054%" y="101" width="0.0631%" height="15" fill="rgb(217,147,25)" fg:x="45" fg:w="7"/><text x="0.6554%" y="111.50"></text></g><g><title>ntdll`RtlTryEnterCriticalSection (7 samples, 0.06%)</title><rect x="0.4054%" y="85" width="0.0631%" height="15" fill="rgb(247,81,37)" fg:x="45" fg:w="7"/><text x="0.6554%" y="95.50"></text></g><g><title>ntdll`NtFreeVirtualMemory (7 samples, 0.06%)</title><rect x="0.4054%" y="69" width="0.0631%" height="15" fill="rgb(209,12,38)" fg:x="45" fg:w="7"/><text x="0.6554%" y="79.50"></text></g><g><title>ntdll`RtlFreeHeap (16 samples, 0.14%)</title><rect x="0.3784%" y="245" width="0.1441%" height="15" fill="rgb(227,1,9)" fg:x="42" fg:w="16"/><text x="0.6284%" y="255.50"></text></g><g><title>ntdll`RtlGetCurrentServiceSessionId (6 samples, 0.05%)</title><rect x="0.4685%" y="229" width="0.0541%" height="15" fill="rgb(248,47,43)" fg:x="52" fg:w="6"/><text x="0.7185%" y="239.50"></text></g><g><title>KERNEL32`HeapFree (12 samples, 0.11%)</title><rect x="10.5135%" y="213" width="0.1081%" height="15" fill="rgb(221,10,30)" fg:x="1167" fg:w="12"/><text x="10.7635%" y="223.50"></text></g><g><title>VCRUNTIME140`memcmp (2 samples, 0.02%)</title><rect x="10.6216%" y="213" width="0.0180%" height="15" fill="rgb(210,229,1)" fg:x="1179" fg:w="2"/><text x="10.8716%" y="223.50"></text></g><g><title>VCRUNTIME140`memcpy (3 samples, 0.03%)</title><rect x="10.6396%" y="213" width="0.0270%" height="15" fill="rgb(222,148,37)" fg:x="1181" fg:w="3"/><text x="10.8896%" y="223.50"></text></g><g><title>VCRUNTIME140`memmove (19 samples, 0.17%)</title><rect x="10.6667%" y="213" width="0.1712%" height="15" fill="rgb(234,67,33)" fg:x="1184" fg:w="19"/><text x="10.9167%" y="223.50"></text></g><g><title>ntdll`RtlAllocateHeap (46 samples, 0.41%)</title><rect x="13.7477%" y="181" width="0.4144%" height="15" fill="rgb(247,98,35)" fg:x="1526" fg:w="46"/><text x="13.9977%" y="191.50"></text></g><g><title>ntdll`RtlAllocateHeap (427 samples, 3.85%)</title><rect x="10.8378%" y="213" width="3.8468%" height="15" fill="rgb(247,138,52)" fg:x="1203" fg:w="427"/><text x="11.0878%" y="223.50">ntdl..</text></g><g><title>ntdll`RtlAllocateHeap (326 samples, 2.94%)</title><rect x="11.7477%" y="197" width="2.9369%" height="15" fill="rgb(213,79,30)" fg:x="1304" fg:w="326"/><text x="11.9977%" y="207.50">nt..</text></g><g><title>ntdll`RtlUnhandledExceptionFilter (58 samples, 0.52%)</title><rect x="14.1622%" y="181" width="0.5225%" height="15" fill="rgb(246,177,23)" fg:x="1572" fg:w="58"/><text x="14.4122%" y="191.50"></text></g><g><title>ntdll`RtlGetCurrentServiceSessionId (2 samples, 0.02%)</title><rect x="30.9279%" y="181" width="0.0180%" height="15" fill="rgb(230,62,27)" fg:x="3433" fg:w="2"/><text x="31.1779%" y="191.50"></text></g><g><title>ntdll`RtlLookupElementGenericTableAvl (2 samples, 0.02%)</title><rect x="30.9459%" y="181" width="0.0180%" height="15" fill="rgb(216,154,8)" fg:x="3435" fg:w="2"/><text x="31.1959%" y="191.50"></text></g><g><title>ntdll`NtAllocateVirtualMemory (2 samples, 0.02%)</title><rect x="30.9910%" y="85" width="0.0180%" height="15" fill="rgb(244,35,45)" fg:x="3440" fg:w="2"/><text x="31.2410%" y="95.50"></text></g><g><title>ntdll`RtlCopyMemory (1,606 samples, 14.47%)</title><rect x="16.6577%" y="197" width="14.4685%" height="15" fill="rgb(251,115,12)" fg:x="1849" fg:w="1606"/><text x="16.9077%" y="207.50">ntdll`RtlCopyMemory</text></g><g><title>ntdll`RtlTryAcquirePebLock (18 samples, 0.16%)</title><rect x="30.9640%" y="181" width="0.1622%" height="15" fill="rgb(240,54,50)" fg:x="3437" fg:w="18"/><text x="31.2140%" y="191.50"></text></g><g><title>ntdll`RtlTryAcquirePebLock (17 samples, 0.15%)</title><rect x="30.9730%" y="165" width="0.1532%" height="15" fill="rgb(233,84,52)" fg:x="3438" fg:w="17"/><text x="31.2230%" y="175.50"></text></g><g><title>ntdll`RtlFreeHeap (16 samples, 0.14%)</title><rect x="30.9820%" y="149" width="0.1441%" height="15" fill="rgb(207,117,47)" fg:x="3439" fg:w="16"/><text x="31.2320%" y="159.50"></text></g><g><title>ntdll`RtlGetCurrentServiceSessionId (16 samples, 0.14%)</title><rect x="30.9820%" y="133" width="0.1441%" height="15" fill="rgb(249,43,39)" fg:x="3439" fg:w="16"/><text x="31.2320%" y="143.50"></text></g><g><title>ntdll`RtlDeleteBoundaryDescriptor (16 samples, 0.14%)</title><rect x="30.9820%" y="117" width="0.1441%" height="15" fill="rgb(209,38,44)" fg:x="3439" fg:w="16"/><text x="31.2320%" y="127.50"></text></g><g><title>ntdll`RtlTryEnterCriticalSection (15 samples, 0.14%)</title><rect x="30.9910%" y="101" width="0.1351%" height="15" fill="rgb(236,212,23)" fg:x="3440" fg:w="15"/><text x="31.2410%" y="111.50"></text></g><g><title>ntdll`RtlTryEnterCriticalSection (13 samples, 0.12%)</title><rect x="31.0090%" y="85" width="0.1171%" height="15" fill="rgb(242,79,21)" fg:x="3442" fg:w="13"/><text x="31.2590%" y="95.50"></text></g><g><title>ntdll`RtlTryEnterCriticalSection (11 samples, 0.10%)</title><rect x="31.0270%" y="69" width="0.0991%" height="15" fill="rgb(211,96,35)" fg:x="3444" fg:w="11"/><text x="31.2770%" y="79.50"></text></g><g><title>ntdll`RtlTryEnterCriticalSection (11 samples, 0.10%)</title><rect x="31.0270%" y="53" width="0.0991%" height="15" fill="rgb(253,215,40)" fg:x="3444" fg:w="11"/><text x="31.2770%" y="63.50"></text></g><g><title>ntdll`NtFreeVirtualMemory (11 samples, 0.10%)</title><rect x="31.0270%" y="37" width="0.0991%" height="15" fill="rgb(211,81,21)" fg:x="3444" fg:w="11"/><text x="31.2770%" y="47.50"></text></g><g><title>ntdll`RtlDeleteBoundaryDescriptor (2 samples, 0.02%)</title><rect x="35.8919%" y="181" width="0.0180%" height="15" fill="rgb(208,190,38)" fg:x="3984" fg:w="2"/><text x="36.1419%" y="191.50"></text></g><g><title>ntdll`RtlTryEnterCriticalSection (2 samples, 0.02%)</title><rect x="35.8919%" y="165" width="0.0180%" height="15" fill="rgb(235,213,38)" fg:x="3984" fg:w="2"/><text x="36.1419%" y="175.50"></text></g><g><title>ntdll`RtlFreeHeap (2,418 samples, 21.78%)</title><rect x="14.6847%" y="213" width="21.7838%" height="15" fill="rgb(237,122,38)" fg:x="1630" fg:w="2418"/><text x="14.9347%" y="223.50">ntdll`RtlFreeHeap</text></g><g><title>ntdll`RtlGetCurrentServiceSessionId (593 samples, 5.34%)</title><rect x="31.1261%" y="197" width="5.3423%" height="15" fill="rgb(244,218,35)" fg:x="3455" fg:w="593"/><text x="31.3761%" y="207.50">ntdll`R..</text></g><g><title>ntdll`RtlFreeHeap (62 samples, 0.56%)</title><rect x="35.9099%" y="181" width="0.5586%" height="15" fill="rgb(240,68,47)" fg:x="3986" fg:w="62"/><text x="36.1599%" y="191.50"></text></g><g><title>toy`_rust_dealloc (8 samples, 0.07%)</title><rect x="36.4685%" y="213" width="0.0721%" height="15" fill="rgb(210,16,53)" fg:x="4048" fg:w="8"/><text x="36.7185%" y="223.50"></text></g><g><title>ntdll`RtlFreeHeap (3 samples, 0.03%)</title><rect x="36.6486%" y="197" width="0.0270%" height="15" fill="rgb(235,124,12)" fg:x="4068" fg:w="3"/><text x="36.8986%" y="207.50"></text></g><g><title>toy`alloc::raw_vec::RawVec&lt;petgraph::graph_impl::NodeIndex&lt;u32&gt;,alloc::alloc::Global&gt;::reserve_for_push&lt;petgraph::graph_impl::NodeIndex (2 samples, 0.02%)</title><rect x="36.6757%" y="197" width="0.0180%" height="15" fill="rgb(224,169,11)" fg:x="4071" fg:w="2"/><text x="36.9257%" y="207.50"></text></g><g><title>toy`alloc::raw_vec::finish_grow (2 samples, 0.02%)</title><rect x="36.6757%" y="181" width="0.0180%" height="15" fill="rgb(250,166,2)" fg:x="4071" fg:w="2"/><text x="36.9257%" y="191.50"></text></g><g><title>ntdll`RtlReAllocateHeap (2 samples, 0.02%)</title><rect x="36.6757%" y="165" width="0.0180%" height="15" fill="rgb(242,216,29)" fg:x="4071" fg:w="2"/><text x="36.9257%" y="175.50"></text></g><g><title>ntdll`RtlReAllocateHeap (2 samples, 0.02%)</title><rect x="36.6757%" y="149" width="0.0180%" height="15" fill="rgb(230,116,27)" fg:x="4071" fg:w="2"/><text x="36.9257%" y="159.50"></text></g><g><title>ntdll`RtlReAllocateHeap (2 samples, 0.02%)</title><rect x="36.6757%" y="133" width="0.0180%" height="15" fill="rgb(228,99,48)" fg:x="4071" fg:w="2"/><text x="36.9257%" y="143.50"></text></g><g><title>toy`alloc::vec::spec_from_iter::impl$0::from_iter&lt;petgraph::graph_impl::NodeIndex&lt;u32&gt;,core::iter::adapters::filter_map::FilterMap&lt;petgraph::graph_impl::Edges&lt;aeg::aeg::AegEdge,enum2$ (5 samples, 0.05%)</title><rect x="36.6937%" y="197" width="0.0450%" height="15" fill="rgb(253,11,6)" fg:x="4073" fg:w="5"/><text x="36.9437%" y="207.50"></text></g><g><title>ntdll`RtlAllocateHeap (3 samples, 0.03%)</title><rect x="36.7117%" y="181" width="0.0270%" height="15" fill="rgb(247,143,39)" fg:x="4075" fg:w="3"/><text x="36.9617%" y="191.50"></text></g><g><title>ntdll`RtlAllocateHeap (2 samples, 0.02%)</title><rect x="36.7207%" y="165" width="0.0180%" height="15" fill="rgb(236,97,10)" fg:x="4076" fg:w="2"/><text x="36.9707%" y="175.50"></text></g><g><title>toy`aeg::aeg::AbstractEventGraph::is_po_connected (26 samples, 0.23%)</title><rect x="36.5405%" y="213" width="0.2342%" height="15" fill="rgb(233,208,19)" fg:x="4056" fg:w="26"/><text x="36.7905%" y="223.50"></text></g><g><title>toy`fixedbitset::FixedBitSet::with_capacity (4 samples, 0.04%)</title><rect x="36.7387%" y="197" width="0.0360%" height="15" fill="rgb(216,164,2)" fg:x="4078" fg:w="4"/><text x="36.9887%" y="207.50"></text></g><g><title>ntdll`RtlAllocateHeap (3 samples, 0.03%)</title><rect x="36.7477%" y="181" width="0.0270%" height="15" fill="rgb(220,129,5)" fg:x="4079" fg:w="3"/><text x="36.9977%" y="191.50"></text></g><g><title>ntdll`RtlAllocateHeap (3 samples, 0.03%)</title><rect x="36.7477%" y="165" width="0.0270%" height="15" fill="rgb(242,17,10)" fg:x="4079" fg:w="3"/><text x="36.9977%" y="175.50"></text></g><g><title>ntdll`RtlAllocateHeap (74 samples, 0.67%)</title><rect x="37.1261%" y="181" width="0.6667%" height="15" fill="rgb(242,107,0)" fg:x="4121" fg:w="74"/><text x="37.3761%" y="191.50"></text></g><g><title>ntdll`RtlAllocateHeap (59 samples, 0.53%)</title><rect x="37.2613%" y="165" width="0.5315%" height="15" fill="rgb(251,28,31)" fg:x="4136" fg:w="59"/><text x="37.5113%" y="175.50"></text></g><g><title>toy`alloc::vec::spec_from_iter::impl$0::from_iter&lt;petgraph::graph_impl::NodeIndex&lt;u32&gt;,core::iter::adapters::filter_map::FilterMap&lt;petgraph::graph_impl::Edges&lt;aeg::aeg::AegEdge,enum2$ (111 samples, 1.00%)</title><rect x="36.8829%" y="197" width="1.0000%" height="15" fill="rgb(233,223,10)" fg:x="4094" fg:w="111"/><text x="37.1329%" y="207.50"></text></g><g><title>toy`std::alloc::__default_lib_allocator::__rdl_alloc (10 samples, 0.09%)</title><rect x="37.7928%" y="181" width="0.0901%" height="15" fill="rgb(215,21,27)" fg:x="4195" fg:w="10"/><text x="38.0428%" y="191.50"></text></g><g><title>ntdll`RtlAllocateHeap (3 samples, 0.03%)</title><rect x="38.0811%" y="149" width="0.0270%" height="15" fill="rgb(232,23,21)" fg:x="4227" fg:w="3"/><text x="38.3311%" y="159.50"></text></g><g><title>ntdll`RtlCopyMemory (3 samples, 0.03%)</title><rect x="38.1081%" y="149" width="0.0270%" height="15" fill="rgb(244,5,23)" fg:x="4230" fg:w="3"/><text x="38.3581%" y="159.50"></text></g><g><title>toy`aeg::aeg::AbstractEventGraph::neighbors (155 samples, 1.40%)</title><rect x="36.7748%" y="213" width="1.3964%" height="15" fill="rgb(226,81,46)" fg:x="4082" fg:w="155"/><text x="37.0248%" y="223.50"></text></g><g><title>toy`fixedbitset::FixedBitSet::with_capacity (32 samples, 0.29%)</title><rect x="37.8829%" y="197" width="0.2883%" height="15" fill="rgb(247,70,30)" fg:x="4205" fg:w="32"/><text x="38.1329%" y="207.50"></text></g><g><title>ntdll`RtlAllocateHeap (27 samples, 0.24%)</title><rect x="37.9279%" y="181" width="0.2432%" height="15" fill="rgb(212,68,19)" fg:x="4210" fg:w="27"/><text x="38.1779%" y="191.50"></text></g><g><title>ntdll`RtlAllocateHeap (19 samples, 0.17%)</title><rect x="38.0000%" y="165" width="0.1712%" height="15" fill="rgb(240,187,13)" fg:x="4218" fg:w="19"/><text x="38.2500%" y="175.50"></text></g><g><title>ntdll`RtlUnhandledExceptionFilter (4 samples, 0.04%)</title><rect x="38.1351%" y="149" width="0.0360%" height="15" fill="rgb(223,113,26)" fg:x="4233" fg:w="4"/><text x="38.3851%" y="159.50"></text></g><g><title>ntdll`RtlCopyMemory (17 samples, 0.15%)</title><rect x="42.7027%" y="165" width="0.1532%" height="15" fill="rgb(206,192,2)" fg:x="4740" fg:w="17"/><text x="42.9527%" y="175.50"></text></g><g><title>ntdll`RtlFreeHeap (28 samples, 0.25%)</title><rect x="42.6667%" y="181" width="0.2523%" height="15" fill="rgb(241,108,4)" fg:x="4736" fg:w="28"/><text x="42.9167%" y="191.50"></text></g><g><title>ntdll`RtlGetCurrentServiceSessionId (7 samples, 0.06%)</title><rect x="42.8559%" y="165" width="0.0631%" height="15" fill="rgb(247,173,49)" fg:x="4757" fg:w="7"/><text x="43.1059%" y="175.50"></text></g><g><title>ntdll`RtlAllocateHeap (20 samples, 0.18%)</title><rect x="43.0180%" y="101" width="0.1802%" height="15" fill="rgb(224,114,35)" fg:x="4775" fg:w="20"/><text x="43.2680%" y="111.50"></text></g><g><title>ntdll`RtlAllocateHeap (20 samples, 0.18%)</title><rect x="43.0180%" y="85" width="0.1802%" height="15" fill="rgb(245,159,27)" fg:x="4775" fg:w="20"/><text x="43.2680%" y="95.50"></text></g><g><title>ntdll`RtlUnhandledExceptionFilter (11 samples, 0.10%)</title><rect x="43.0991%" y="69" width="0.0991%" height="15" fill="rgb(245,172,44)" fg:x="4784" fg:w="11"/><text x="43.3491%" y="79.50"></text></g><g><title>ntdll`RtlCopyMemory (6 samples, 0.05%)</title><rect x="43.2162%" y="85" width="0.0541%" height="15" fill="rgb(236,23,11)" fg:x="4797" fg:w="6"/><text x="43.4662%" y="95.50"></text></g><g><title>ntdll`RtlReAllocateHeap (38 samples, 0.34%)</title><rect x="42.9459%" y="149" width="0.3423%" height="15" fill="rgb(205,117,38)" fg:x="4767" fg:w="38"/><text x="43.1959%" y="159.50"></text></g><g><title>ntdll`RtlReAllocateHeap (38 samples, 0.34%)</title><rect x="42.9459%" y="133" width="0.3423%" height="15" fill="rgb(237,72,25)" fg:x="4767" fg:w="38"/><text x="43.1959%" y="143.50"></text></g><g><title>ntdll`RtlReAllocateHeap (37 samples, 0.33%)</title><rect x="42.9550%" y="117" width="0.3333%" height="15" fill="rgb(244,70,9)" fg:x="4768" fg:w="37"/><text x="43.2050%" y="127.50"></text></g><g><title>ntdll`RtlFreeHeap (9 samples, 0.08%)</title><rect x="43.2072%" y="101" width="0.0811%" height="15" fill="rgb(217,125,39)" fg:x="4796" fg:w="9"/><text x="43.4572%" y="111.50"></text></g><g><title>ntdll`RtlGetCurrentServiceSessionId (2 samples, 0.02%)</title><rect x="43.2703%" y="85" width="0.0180%" height="15" fill="rgb(235,36,10)" fg:x="4803" fg:w="2"/><text x="43.5203%" y="95.50"></text></g><g><title>toy`alloc::raw_vec::RawVec&lt;petgraph::graph_impl::NodeIndex&lt;u32&gt;,alloc::alloc::Global&gt;::reserve_for_push&lt;petgraph::graph_impl::NodeIndex (42 samples, 0.38%)</title><rect x="42.9189%" y="181" width="0.3784%" height="15" fill="rgb(251,123,47)" fg:x="4764" fg:w="42"/><text x="43.1689%" y="191.50"></text></g><g><title>toy`alloc::raw_vec::finish_grow (42 samples, 0.38%)</title><rect x="42.9189%" y="165" width="0.3784%" height="15" fill="rgb(221,13,13)" fg:x="4764" fg:w="42"/><text x="43.1689%" y="175.50"></text></g><g><title>ntdll`RtlAllocateHeap (4 samples, 0.04%)</title><rect x="43.8288%" y="133" width="0.0360%" height="15" fill="rgb(238,131,9)" fg:x="4865" fg:w="4"/><text x="44.0788%" y="143.50"></text></g><g><title>ntdll`RtlAllocateHeap (35 samples, 0.32%)</title><rect x="43.5676%" y="165" width="0.3153%" height="15" fill="rgb(211,50,8)" fg:x="4836" fg:w="35"/><text x="43.8176%" y="175.50"></text></g><g><title>ntdll`RtlAllocateHeap (25 samples, 0.23%)</title><rect x="43.6577%" y="149" width="0.2252%" height="15" fill="rgb(245,182,24)" fg:x="4846" fg:w="25"/><text x="43.9077%" y="159.50"></text></g><g><title>ntdll`RtlUnhandledExceptionFilter (2 samples, 0.02%)</title><rect x="43.8649%" y="133" width="0.0180%" height="15" fill="rgb(242,14,37)" fg:x="4869" fg:w="2"/><text x="44.1149%" y="143.50"></text></g><g><title>toy`alloc::vec::spec_from_iter::impl$0::from_iter&lt;petgraph::graph_impl::NodeIndex&lt;u32&gt;,core::iter::adapters::filter_map::FilterMap&lt;petgraph::graph_impl::Edges&lt;aeg::aeg::AegEdge,enum2$ (66 samples, 0.59%)</title><rect x="43.2973%" y="181" width="0.5946%" height="15" fill="rgb(246,228,12)" fg:x="4806" fg:w="66"/><text x="43.5473%" y="191.50"></text></g><g><title>ntdll`RtlAllocateHeap (6 samples, 0.05%)</title><rect x="44.0991%" y="133" width="0.0541%" height="15" fill="rgb(213,55,15)" fg:x="4895" fg:w="6"/><text x="44.3491%" y="143.50"></text></g><g><title>ntdll`RtlEnumerateGenericTableWithoutSplayingAvl (2 samples, 0.02%)</title><rect x="44.1532%" y="133" width="0.0180%" height="15" fill="rgb(209,9,3)" fg:x="4901" fg:w="2"/><text x="44.4032%" y="143.50"></text></g><g><title>ntdll`RtlEnumerateGenericTableWithoutSplayingAvl (2 samples, 0.02%)</title><rect x="44.1532%" y="117" width="0.0180%" height="15" fill="rgb(230,59,30)" fg:x="4901" fg:w="2"/><text x="44.4032%" y="127.50"></text></g><g><title>ntdll`RtlAllocateHeap (2 samples, 0.02%)</title><rect x="44.1532%" y="101" width="0.0180%" height="15" fill="rgb(209,121,21)" fg:x="4901" fg:w="2"/><text x="44.4032%" y="111.50"></text></g><g><title>ntdll`RtlAllocateHeap (2 samples, 0.02%)</title><rect x="44.1532%" y="85" width="0.0180%" height="15" fill="rgb(220,109,13)" fg:x="4901" fg:w="2"/><text x="44.4032%" y="95.50"></text></g><g><title>ntdll`RtlAllocateHeap (40 samples, 0.36%)</title><rect x="43.9009%" y="165" width="0.3604%" height="15" fill="rgb(232,18,1)" fg:x="4873" fg:w="40"/><text x="44.1509%" y="175.50"></text></g><g><title>ntdll`RtlAllocateHeap (35 samples, 0.32%)</title><rect x="43.9459%" y="149" width="0.3153%" height="15" fill="rgb(215,41,42)" fg:x="4878" fg:w="35"/><text x="44.1959%" y="159.50"></text></g><g><title>ntdll`RtlUnhandledExceptionFilter (10 samples, 0.09%)</title><rect x="44.1712%" y="133" width="0.0901%" height="15" fill="rgb(224,123,36)" fg:x="4903" fg:w="10"/><text x="44.4212%" y="143.50"></text></g><g><title>toy`aeg::aeg::AbstractEventGraph::is_po_connected (340 samples, 3.06%)</title><rect x="41.2162%" y="197" width="3.0631%" height="15" fill="rgb(240,125,3)" fg:x="4575" fg:w="340"/><text x="41.4662%" y="207.50">toy..</text></g><g><title>toy`fixedbitset::FixedBitSet::with_capacity (43 samples, 0.39%)</title><rect x="43.8919%" y="181" width="0.3874%" height="15" fill="rgb(205,98,50)" fg:x="4872" fg:w="43"/><text x="44.1419%" y="191.50"></text></g><g><title>toy`std::alloc::__default_lib_allocator::__rdl_alloc_zeroed (2 samples, 0.02%)</title><rect x="44.2613%" y="165" width="0.0180%" height="15" fill="rgb(205,185,37)" fg:x="4913" fg:w="2"/><text x="44.5113%" y="175.50"></text></g><g><title>ntdll`RtlAllocateHeap (36 samples, 0.32%)</title><rect x="44.5225%" y="117" width="0.3243%" height="15" fill="rgb(238,207,15)" fg:x="4942" fg:w="36"/><text x="44.7725%" y="127.50"></text></g><g><title>ntdll`RtlAllocateHeap (34 samples, 0.31%)</title><rect x="44.5405%" y="101" width="0.3063%" height="15" fill="rgb(213,199,42)" fg:x="4944" fg:w="34"/><text x="44.7905%" y="111.50"></text></g><g><title>ntdll`RtlUnhandledExceptionFilter (5 samples, 0.05%)</title><rect x="44.8018%" y="85" width="0.0450%" height="15" fill="rgb(235,201,11)" fg:x="4973" fg:w="5"/><text x="45.0518%" y="95.50"></text></g><g><title>ntdll`RtlCopyMemory (12 samples, 0.11%)</title><rect x="44.8649%" y="101" width="0.1081%" height="15" fill="rgb(207,46,11)" fg:x="4980" fg:w="12"/><text x="45.1149%" y="111.50"></text></g><g><title>ntdll`RtlReAllocateHeap (67 samples, 0.60%)</title><rect x="44.3964%" y="133" width="0.6036%" height="15" fill="rgb(241,35,35)" fg:x="4928" fg:w="67"/><text x="44.6464%" y="143.50"></text></g><g><title>ntdll`RtlFreeHeap (17 samples, 0.15%)</title><rect x="44.8468%" y="117" width="0.1532%" height="15" fill="rgb(243,32,47)" fg:x="4978" fg:w="17"/><text x="45.0968%" y="127.50"></text></g><g><title>ntdll`RtlGetCurrentServiceSessionId (3 samples, 0.03%)</title><rect x="44.9730%" y="101" width="0.0270%" height="15" fill="rgb(247,202,23)" fg:x="4992" fg:w="3"/><text x="45.2230%" y="111.50"></text></g><g><title>ntdll`RtlReAllocateHeap (78 samples, 0.70%)</title><rect x="44.3063%" y="165" width="0.7027%" height="15" fill="rgb(219,102,11)" fg:x="4918" fg:w="78"/><text x="44.5563%" y="175.50"></text></g><g><title>ntdll`RtlReAllocateHeap (74 samples, 0.67%)</title><rect x="44.3423%" y="149" width="0.6667%" height="15" fill="rgb(243,110,44)" fg:x="4922" fg:w="74"/><text x="44.5923%" y="159.50"></text></g><g><title>toy`alloc::raw_vec::RawVec&lt;petgraph::graph_impl::NodeIndex&lt;u32&gt;,alloc::alloc::Global&gt;::reserve_for_push&lt;petgraph::graph_impl::NodeIndex (82 samples, 0.74%)</title><rect x="44.2793%" y="197" width="0.7387%" height="15" fill="rgb(222,74,54)" fg:x="4915" fg:w="82"/><text x="44.5293%" y="207.50"></text></g><g><title>toy`alloc::raw_vec::finish_grow (81 samples, 0.73%)</title><rect x="44.2883%" y="181" width="0.7297%" height="15" fill="rgb(216,99,12)" fg:x="4916" fg:w="81"/><text x="44.5383%" y="191.50"></text></g><g><title>ntdll`RtlAllocateHeap (3 samples, 0.03%)</title><rect x="45.3153%" y="133" width="0.0270%" height="15" fill="rgb(226,22,26)" fg:x="5030" fg:w="3"/><text x="45.5653%" y="143.50"></text></g><g><title>ntdll`RtlLookupElementGenericTableAvl (2 samples, 0.02%)</title><rect x="45.3423%" y="133" width="0.0180%" height="15" fill="rgb(217,163,10)" fg:x="5033" fg:w="2"/><text x="45.5923%" y="143.50"></text></g><g><title>ntdll`RtlAllocateHeap (18 samples, 0.16%)</title><rect x="45.2072%" y="165" width="0.1622%" height="15" fill="rgb(213,25,53)" fg:x="5018" fg:w="18"/><text x="45.4572%" y="175.50"></text></g><g><title>ntdll`RtlAllocateHeap (16 samples, 0.14%)</title><rect x="45.2252%" y="149" width="0.1441%" height="15" fill="rgb(252,105,26)" fg:x="5020" fg:w="16"/><text x="45.4752%" y="159.50"></text></g><g><title>ntdll`RtlAllocateHeap (40 samples, 0.36%)</title><rect x="45.5405%" y="117" width="0.3604%" height="15" fill="rgb(220,39,43)" fg:x="5055" fg:w="40"/><text x="45.7905%" y="127.50"></text></g><g><title>ntdll`RtlAllocateHeap (34 samples, 0.31%)</title><rect x="45.5946%" y="101" width="0.3063%" height="15" fill="rgb(229,68,48)" fg:x="5061" fg:w="34"/><text x="45.8446%" y="111.50"></text></g><g><title>ntdll`RtlUnhandledExceptionFilter (6 samples, 0.05%)</title><rect x="45.8468%" y="85" width="0.0541%" height="15" fill="rgb(252,8,32)" fg:x="5089" fg:w="6"/><text x="46.0968%" y="95.50"></text></g><g><title>ntdll`RtlCopyMemory (3 samples, 0.03%)</title><rect x="45.9009%" y="117" width="0.0270%" height="15" fill="rgb(223,20,43)" fg:x="5095" fg:w="3"/><text x="46.1509%" y="127.50"></text></g><g><title>ntdll`RtlCopyMemory (12 samples, 0.11%)</title><rect x="45.9550%" y="101" width="0.1081%" height="15" fill="rgb(229,81,49)" fg:x="5101" fg:w="12"/><text x="46.2050%" y="111.50"></text></g><g><title>ntdll`RtlReAllocateHeap (71 samples, 0.64%)</title><rect x="45.4505%" y="133" width="0.6396%" height="15" fill="rgb(236,28,36)" fg:x="5045" fg:w="71"/><text x="45.7005%" y="143.50"></text></g><g><title>ntdll`RtlFreeHeap (18 samples, 0.16%)</title><rect x="45.9279%" y="117" width="0.1622%" height="15" fill="rgb(249,185,26)" fg:x="5098" fg:w="18"/><text x="46.1779%" y="127.50"></text></g><g><title>ntdll`RtlGetCurrentServiceSessionId (3 samples, 0.03%)</title><rect x="46.0631%" y="101" width="0.0270%" height="15" fill="rgb(249,174,33)" fg:x="5113" fg:w="3"/><text x="46.3131%" y="111.50"></text></g><g><title>ntdll`RtlReAllocateHeap (81 samples, 0.73%)</title><rect x="45.3694%" y="165" width="0.7297%" height="15" fill="rgb(233,201,37)" fg:x="5036" fg:w="81"/><text x="45.6194%" y="175.50"></text></g><g><title>ntdll`RtlReAllocateHeap (80 samples, 0.72%)</title><rect x="45.3784%" y="149" width="0.7207%" height="15" fill="rgb(221,78,26)" fg:x="5037" fg:w="80"/><text x="45.6284%" y="159.50"></text></g><g><title>toy`alloc::raw_vec::RawVec&lt;usize,alloc::alloc::Global&gt;::reserve_for_push (121 samples, 1.09%)</title><rect x="45.0180%" y="197" width="1.0901%" height="15" fill="rgb(250,127,30)" fg:x="4997" fg:w="121"/><text x="45.2680%" y="207.50"></text></g><g><title>toy`alloc::raw_vec::finish_grow (110 samples, 0.99%)</title><rect x="45.1171%" y="181" width="0.9910%" height="15" fill="rgb(230,49,44)" fg:x="5008" fg:w="110"/><text x="45.3671%" y="191.50"></text></g><g><title>ntdll`RtlCopyMemory (22 samples, 0.20%)</title><rect x="47.5315%" y="149" width="0.1982%" height="15" fill="rgb(229,67,23)" fg:x="5276" fg:w="22"/><text x="47.7815%" y="159.50"></text></g><g><title>ntdll`RtlFreeHeap (35 samples, 0.32%)</title><rect x="47.5135%" y="165" width="0.3153%" height="15" fill="rgb(249,83,47)" fg:x="5274" fg:w="35"/><text x="47.7635%" y="175.50"></text></g><g><title>ntdll`RtlGetCurrentServiceSessionId (11 samples, 0.10%)</title><rect x="47.7297%" y="149" width="0.0991%" height="15" fill="rgb(215,43,3)" fg:x="5298" fg:w="11"/><text x="47.9797%" y="159.50"></text></g><g><title>VCRUNTIME140`memset (3 samples, 0.03%)</title><rect x="47.8919%" y="149" width="0.0270%" height="15" fill="rgb(238,154,13)" fg:x="5316" fg:w="3"/><text x="48.1419%" y="159.50"></text></g><g><title>ntdll`RtlAllocateHeap (26 samples, 0.23%)</title><rect x="48.4234%" y="117" width="0.2342%" height="15" fill="rgb(219,56,2)" fg:x="5375" fg:w="26"/><text x="48.6734%" y="127.50"></text></g><g><title>ntdll`RtlAllocateHeap (3 samples, 0.03%)</title><rect x="48.6306%" y="101" width="0.0270%" height="15" fill="rgb(233,0,4)" fg:x="5398" fg:w="3"/><text x="48.8806%" y="111.50"></text></g><g><title>ntdll`RtlEnumerateGenericTableWithoutSplayingAvl (3 samples, 0.03%)</title><rect x="48.6577%" y="117" width="0.0270%" height="15" fill="rgb(235,30,7)" fg:x="5401" fg:w="3"/><text x="48.9077%" y="127.50"></text></g><g><title>ntdll`RtlEnumerateGenericTableWithoutSplayingAvl (3 samples, 0.03%)</title><rect x="48.6577%" y="101" width="0.0270%" height="15" fill="rgb(250,79,13)" fg:x="5401" fg:w="3"/><text x="48.9077%" y="111.50"></text></g><g><title>ntdll`RtlAllocateHeap (2 samples, 0.02%)</title><rect x="48.6667%" y="85" width="0.0180%" height="15" fill="rgb(211,146,34)" fg:x="5402" fg:w="2"/><text x="48.9167%" y="95.50"></text></g><g><title>ntdll`RtlAllocateHeap (2 samples, 0.02%)</title><rect x="48.6667%" y="69" width="0.0180%" height="15" fill="rgb(228,22,38)" fg:x="5402" fg:w="2"/><text x="48.9167%" y="79.50"></text></g><g><title>ntdll`RtlTryEnterCriticalSection (2 samples, 0.02%)</title><rect x="48.6667%" y="53" width="0.0180%" height="15" fill="rgb(235,168,5)" fg:x="5402" fg:w="2"/><text x="48.9167%" y="63.50"></text></g><g><title>ntdll`NtAllocateVirtualMemory (2 samples, 0.02%)</title><rect x="48.6667%" y="37" width="0.0180%" height="15" fill="rgb(221,155,16)" fg:x="5402" fg:w="2"/><text x="48.9167%" y="47.50"></text></g><g><title>ntdll`RtlAllocateHeap (95 samples, 0.86%)</title><rect x="47.9189%" y="149" width="0.8559%" height="15" fill="rgb(215,215,53)" fg:x="5319" fg:w="95"/><text x="48.1689%" y="159.50"></text></g><g><title>ntdll`RtlAllocateHeap (79 samples, 0.71%)</title><rect x="48.0631%" y="133" width="0.7117%" height="15" fill="rgb(223,4,10)" fg:x="5335" fg:w="79"/><text x="48.3131%" y="143.50"></text></g><g><title>ntdll`RtlUnhandledExceptionFilter (10 samples, 0.09%)</title><rect x="48.6847%" y="117" width="0.0901%" height="15" fill="rgb(234,103,6)" fg:x="5404" fg:w="10"/><text x="48.9347%" y="127.50"></text></g><g><title>toy`aeg::critical_cycles::IncompleteMinimalCycle (1,181 samples, 10.64%)</title><rect x="38.1712%" y="213" width="10.6396%" height="15" fill="rgb(227,97,0)" fg:x="4237" fg:w="1181"/><text x="38.4212%" y="223.50">toy`aeg::critica..</text></g><g><title>toy`enum2$&lt;hashbrown::map::Entry&lt;usize,alloc::vec::Vec&lt;usize,alloc::alloc::Global&gt;,core::hash::BuildHasherDefault&lt;ahash::fallback_hash::AHasher&gt;,allocator_api2::stable::alloc::global::Global&gt; &gt;::or_default&lt;usize,alloc::vec::Vec&lt;usize,alloc::alloc::Global&gt;,core::hash::BuildHasherDefault (300 samples, 2.70%)</title><rect x="46.1081%" y="197" width="2.7027%" height="15" fill="rgb(234,150,53)" fg:x="5118" fg:w="300"/><text x="46.3581%" y="207.50">to..</text></g><g><title>toy`hashbrown::raw::inner::RawTable&lt;tuple$&lt;usize,alloc::vec::Vec&lt;usize,alloc::alloc::Global&gt; &gt;,allocator_api2::stable::alloc::global::Global&gt;::reserve_rehash&lt;tuple$&lt;usize,alloc::vec::Vec&lt;usize,alloc::alloc::Global&gt; &gt;,allocator_api2::stable::alloc::global::Global,hashbrown::map::make_hasher::closure_env$0&lt;usize,alloc::vec::Vec&lt;usize,alloc::alloc::Global&gt;,core::hash::BuildHasherDefault (245 samples, 2.21%)</title><rect x="46.6036%" y="181" width="2.2072%" height="15" fill="rgb(228,201,54)" fg:x="5173" fg:w="245"/><text x="46.8536%" y="191.50">t..</text></g><g><title>toy`hashbrown::raw::inner::RawTableInner::fallible_with_capacity (109 samples, 0.98%)</title><rect x="47.8288%" y="165" width="0.9820%" height="15" fill="rgb(222,22,37)" fg:x="5309" fg:w="109"/><text x="48.0788%" y="175.50"></text></g><g><title>toy`std::alloc::__default_lib_allocator::__rdl_alloc (4 samples, 0.04%)</title><rect x="48.7748%" y="149" width="0.0360%" height="15" fill="rgb(237,53,32)" fg:x="5414" fg:w="4"/><text x="49.0248%" y="159.50"></text></g><g><title>ntdll`RtlAllocateHeap (28 samples, 0.25%)</title><rect x="49.0090%" y="133" width="0.2523%" height="15" fill="rgb(233,25,53)" fg:x="5440" fg:w="28"/><text x="49.2590%" y="143.50"></text></g><g><title>ntdll`RtlAllocateHeap (24 samples, 0.22%)</title><rect x="49.0450%" y="117" width="0.2162%" height="15" fill="rgb(210,40,34)" fg:x="5444" fg:w="24"/><text x="49.2950%" y="127.50"></text></g><g><title>ntdll`RtlUnhandledExceptionFilter (5 samples, 0.05%)</title><rect x="49.2162%" y="101" width="0.0450%" height="15" fill="rgb(241,220,44)" fg:x="5463" fg:w="5"/><text x="49.4662%" y="111.50"></text></g><g><title>ntdll`RtlCopyMemory (2 samples, 0.02%)</title><rect x="49.2793%" y="117" width="0.0180%" height="15" fill="rgb(235,28,35)" fg:x="5470" fg:w="2"/><text x="49.5293%" y="127.50"></text></g><g><title>toy`alloc::raw_vec::RawVec&lt;petgraph::graph_impl::NodeIndex&lt;u32&gt;,alloc::alloc::Global&gt;::reserve_for_push&lt;petgraph::graph_impl::NodeIndex (55 samples, 0.50%)</title><rect x="48.8108%" y="213" width="0.4955%" height="15" fill="rgb(210,56,17)" fg:x="5418" fg:w="55"/><text x="49.0608%" y="223.50"></text></g><g><title>toy`alloc::raw_vec::finish_grow (53 samples, 0.48%)</title><rect x="48.8288%" y="197" width="0.4775%" height="15" fill="rgb(224,130,29)" fg:x="5420" fg:w="53"/><text x="49.0788%" y="207.50"></text></g><g><title>ntdll`RtlReAllocateHeap (50 samples, 0.45%)</title><rect x="48.8559%" y="181" width="0.4505%" height="15" fill="rgb(235,212,8)" fg:x="5423" fg:w="50"/><text x="49.1059%" y="191.50"></text></g><g><title>ntdll`RtlReAllocateHeap (48 samples, 0.43%)</title><rect x="48.8739%" y="165" width="0.4324%" height="15" fill="rgb(223,33,50)" fg:x="5425" fg:w="48"/><text x="49.1239%" y="175.50"></text></g><g><title>ntdll`RtlReAllocateHeap (44 samples, 0.40%)</title><rect x="48.9099%" y="149" width="0.3964%" height="15" fill="rgb(219,149,13)" fg:x="5429" fg:w="44"/><text x="49.1599%" y="159.50"></text></g><g><title>ntdll`RtlFreeHeap (5 samples, 0.05%)</title><rect x="49.2613%" y="133" width="0.0450%" height="15" fill="rgb(250,156,29)" fg:x="5468" fg:w="5"/><text x="49.5113%" y="143.50"></text></g><g><title>ntdll`RtlAllocateHeap (2 samples, 0.02%)</title><rect x="49.3063%" y="133" width="0.0180%" height="15" fill="rgb(216,193,19)" fg:x="5473" fg:w="2"/><text x="49.5563%" y="143.50"></text></g><g><title>ntdll`RtlAllocateHeap (2 samples, 0.02%)</title><rect x="49.3063%" y="117" width="0.0180%" height="15" fill="rgb(216,135,14)" fg:x="5473" fg:w="2"/><text x="49.5563%" y="127.50"></text></g><g><title>toy`alloc::raw_vec::impl$2::reserve::do_reserve_and_handle (7 samples, 0.06%)</title><rect x="49.3063%" y="213" width="0.0631%" height="15" fill="rgb(241,47,5)" fg:x="5473" fg:w="7"/><text x="49.5563%" y="223.50"></text></g><g><title>toy`alloc::raw_vec::finish_grow (7 samples, 0.06%)</title><rect x="49.3063%" y="197" width="0.0631%" height="15" fill="rgb(233,42,35)" fg:x="5473" fg:w="7"/><text x="49.5563%" y="207.50"></text></g><g><title>ntdll`RtlReAllocateHeap (7 samples, 0.06%)</title><rect x="49.3063%" y="181" width="0.0631%" height="15" fill="rgb(231,13,6)" fg:x="5473" fg:w="7"/><text x="49.5563%" y="191.50"></text></g><g><title>ntdll`RtlReAllocateHeap (7 samples, 0.06%)</title><rect x="49.3063%" y="165" width="0.0631%" height="15" fill="rgb(207,181,40)" fg:x="5473" fg:w="7"/><text x="49.5563%" y="175.50"></text></g><g><title>ntdll`RtlReAllocateHeap (7 samples, 0.06%)</title><rect x="49.3063%" y="149" width="0.0631%" height="15" fill="rgb(254,173,49)" fg:x="5473" fg:w="7"/><text x="49.5563%" y="159.50"></text></g><g><title>ntdll`RtlCopyMemory (5 samples, 0.05%)</title><rect x="49.3243%" y="133" width="0.0450%" height="15" fill="rgb(221,1,38)" fg:x="5475" fg:w="5"/><text x="49.5743%" y="143.50"></text></g><g><title>toy`alloc::vec::in_place_collect::impl$1::from_iter&lt;aeg::critical_cycles::CriticalCycle,core::iter::adapters::map::Map&lt;alloc::vec::into_iter::IntoIter&lt;alloc::vec::Vec&lt;petgraph::graph_impl::EdgeIndex (4 samples, 0.04%)</title><rect x="49.3694%" y="213" width="0.0360%" height="15" fill="rgb(206,124,46)" fg:x="5480" fg:w="4"/><text x="49.6194%" y="223.50"></text></g><g><title>ntdll`RtlAllocateHeap (3 samples, 0.03%)</title><rect x="49.3784%" y="197" width="0.0270%" height="15" fill="rgb(249,21,11)" fg:x="5481" fg:w="3"/><text x="49.6284%" y="207.50"></text></g><g><title>ntdll`RtlAllocateHeap (2 samples, 0.02%)</title><rect x="49.3874%" y="181" width="0.0180%" height="15" fill="rgb(222,201,40)" fg:x="5482" fg:w="2"/><text x="49.6374%" y="191.50"></text></g><g><title>toy`alloc::vec::spec_extend::impl$1::spec_extend&lt;petgraph::graph_impl::EdgeIndex&lt;u32&gt;,core::iter::adapters::map::Map&lt;core::slice::iter::Windows&lt;petgraph::graph_impl::NodeIndex (9 samples, 0.08%)</title><rect x="49.4054%" y="213" width="0.0811%" height="15" fill="rgb(235,61,29)" fg:x="5484" fg:w="9"/><text x="49.6554%" y="223.50"></text></g><g><title>toy`alloc::raw_vec::impl$2::reserve::do_reserve_and_handle&lt;petgraph::graph_impl::EdgeIndex (5 samples, 0.05%)</title><rect x="49.4414%" y="197" width="0.0450%" height="15" fill="rgb(219,207,3)" fg:x="5488" fg:w="5"/><text x="49.6914%" y="207.50"></text></g><g><title>toy`alloc::raw_vec::finish_grow (4 samples, 0.04%)</title><rect x="49.4505%" y="181" width="0.0360%" height="15" fill="rgb(222,56,46)" fg:x="5489" fg:w="4"/><text x="49.7005%" y="191.50"></text></g><g><title>ntdll`RtlReAllocateHeap (2 samples, 0.02%)</title><rect x="49.4685%" y="165" width="0.0180%" height="15" fill="rgb(239,76,54)" fg:x="5491" fg:w="2"/><text x="49.7185%" y="175.50"></text></g><g><title>ntdll`RtlReAllocateHeap (2 samples, 0.02%)</title><rect x="49.4685%" y="149" width="0.0180%" height="15" fill="rgb(231,124,27)" fg:x="5491" fg:w="2"/><text x="49.7185%" y="159.50"></text></g><g><title>ntdll`RtlCopyMemory (129 samples, 1.16%)</title><rect x="51.2162%" y="181" width="1.1622%" height="15" fill="rgb(249,195,6)" fg:x="5685" fg:w="129"/><text x="51.4662%" y="191.50"></text></g><g><title>ntdll`RtlTryAcquirePebLock (2 samples, 0.02%)</title><rect x="52.3604%" y="165" width="0.0180%" height="15" fill="rgb(237,174,47)" fg:x="5812" fg:w="2"/><text x="52.6104%" y="175.50"></text></g><g><title>ntdll`RtlTryAcquirePebLock (2 samples, 0.02%)</title><rect x="52.3604%" y="149" width="0.0180%" height="15" fill="rgb(206,201,31)" fg:x="5812" fg:w="2"/><text x="52.6104%" y="159.50"></text></g><g><title>ntdll`RtlFreeHeap (2 samples, 0.02%)</title><rect x="52.3604%" y="133" width="0.0180%" height="15" fill="rgb(231,57,52)" fg:x="5812" fg:w="2"/><text x="52.6104%" y="143.50"></text></g><g><title>ntdll`RtlFreeHeap (415 samples, 3.74%)</title><rect x="51.1351%" y="197" width="3.7387%" height="15" fill="rgb(248,177,22)" fg:x="5676" fg:w="415"/><text x="51.3851%" y="207.50">ntdl..</text></g><g><title>ntdll`RtlGetCurrentServiceSessionId (277 samples, 2.50%)</title><rect x="52.3784%" y="181" width="2.4955%" height="15" fill="rgb(215,211,37)" fg:x="5814" fg:w="277"/><text x="52.6284%" y="191.50">nt..</text></g><g><title>ntdll`RtlFreeHeap (8 samples, 0.07%)</title><rect x="54.8018%" y="165" width="0.0721%" height="15" fill="rgb(241,128,51)" fg:x="6083" fg:w="8"/><text x="55.0518%" y="175.50"></text></g><g><title>toy`core::ptr::drop_in_place&lt;aeg::critical_cycles::IncompleteMinimalCycle (600 samples, 5.41%)</title><rect x="49.4865%" y="213" width="5.4054%" height="15" fill="rgb(227,165,31)" fg:x="5493" fg:w="600"/><text x="49.7365%" y="223.50">toy`cor..</text></g><g><title>toy`std::alloc::__default_lib_allocator::__rdl_dealloc (2 samples, 0.02%)</title><rect x="54.8739%" y="197" width="0.0180%" height="15" fill="rgb(228,167,24)" fg:x="6091" fg:w="2"/><text x="55.1239%" y="207.50"></text></g><g><title>toy`hashbrown::raw::inner::RawTable&lt;tuple$&lt;aeg::critical_cycles::IncompleteMinimalCycle&lt;usize,usize&gt;,tuple$&lt;&gt; &gt;,allocator_api2::stable::alloc::global::Global&gt;::reserve_rehash&lt;tuple$&lt;aeg::critical_cycles::IncompleteMinimalCycle&lt;usize,usize&gt;,tuple$&lt;&gt; &gt;,allocator_api2::stable::alloc::global::Global,hashbrown::map::make_hasher::closure_env$0&lt;aeg::critical_cycles::IncompleteMinimalCycle&lt;usize,usize&gt;,tuple$&lt;&gt;,core::hash::BuildHasherDefault (33 samples, 0.30%)</title><rect x="54.8919%" y="213" width="0.2973%" height="15" fill="rgb(228,143,12)" fg:x="6093" fg:w="33"/><text x="55.1419%" y="223.50"></text></g><g><title>ntdll`RtlFreeHeap (2 samples, 0.02%)</title><rect x="55.1712%" y="197" width="0.0180%" height="15" fill="rgb(249,149,8)" fg:x="6124" fg:w="2"/><text x="55.4212%" y="207.50"></text></g><g><title>ntdll`RtlGetCurrentServiceSessionId (2 samples, 0.02%)</title><rect x="55.1712%" y="181" width="0.0180%" height="15" fill="rgb(243,35,44)" fg:x="6124" fg:w="2"/><text x="55.4212%" y="191.50"></text></g><g><title>ntdll`RtlDeleteBoundaryDescriptor (2 samples, 0.02%)</title><rect x="55.1712%" y="165" width="0.0180%" height="15" fill="rgb(246,89,9)" fg:x="6124" fg:w="2"/><text x="55.4212%" y="175.50"></text></g><g><title>ntdll`RtlTryEnterCriticalSection (2 samples, 0.02%)</title><rect x="55.1712%" y="149" width="0.0180%" height="15" fill="rgb(233,213,13)" fg:x="6124" fg:w="2"/><text x="55.4212%" y="159.50"></text></g><g><title>VCRUNTIME140`memcpy (5 samples, 0.05%)</title><rect x="60.4324%" y="197" width="0.0450%" height="15" fill="rgb(233,141,41)" fg:x="6708" fg:w="5"/><text x="60.6824%" y="207.50"></text></g><g><title>VCRUNTIME140`memmove (177 samples, 1.59%)</title><rect x="60.4775%" y="197" width="1.5946%" height="15" fill="rgb(239,167,4)" fg:x="6713" fg:w="177"/><text x="60.7275%" y="207.50"></text></g><g><title>ntdll`ExpInterlockedPopEntrySListEnd (3 samples, 0.03%)</title><rect x="84.7027%" y="165" width="0.0270%" height="15" fill="rgb(209,217,16)" fg:x="9402" fg:w="3"/><text x="84.9527%" y="175.50"></text></g><g><title>ntdll`RtlAllocateHeap (564 samples, 5.08%)</title><rect x="84.7387%" y="165" width="5.0811%" height="15" fill="rgb(219,88,35)" fg:x="9406" fg:w="564"/><text x="84.9887%" y="175.50">ntdll`..</text></g><g><title>ntdll`RtlAllocateHeap (83 samples, 0.75%)</title><rect x="89.0721%" y="149" width="0.7477%" height="15" fill="rgb(220,193,23)" fg:x="9887" fg:w="83"/><text x="89.3221%" y="159.50"></text></g><g><title>ntdll`NtAllocateVirtualMemory (3 samples, 0.03%)</title><rect x="89.9009%" y="85" width="0.0270%" height="15" fill="rgb(230,90,52)" fg:x="9979" fg:w="3"/><text x="90.1509%" y="95.50"></text></g><g><title>ntdll`RtlEnumerateGenericTableWithoutSplayingAvl (13 samples, 0.12%)</title><rect x="89.8198%" y="165" width="0.1171%" height="15" fill="rgb(252,106,19)" fg:x="9970" fg:w="13"/><text x="90.0698%" y="175.50"></text></g><g><title>ntdll`RtlEnumerateGenericTableWithoutSplayingAvl (12 samples, 0.11%)</title><rect x="89.8288%" y="149" width="0.1081%" height="15" fill="rgb(206,74,20)" fg:x="9971" fg:w="12"/><text x="90.0788%" y="159.50"></text></g><g><title>ntdll`RtlAllocateHeap (11 samples, 0.10%)</title><rect x="89.8378%" y="133" width="0.0991%" height="15" fill="rgb(230,138,44)" fg:x="9972" fg:w="11"/><text x="90.0878%" y="143.50"></text></g><g><title>ntdll`RtlAllocateHeap (11 samples, 0.10%)</title><rect x="89.8378%" y="117" width="0.0991%" height="15" fill="rgb(235,182,43)" fg:x="9972" fg:w="11"/><text x="90.0878%" y="127.50"></text></g><g><title>ntdll`RtlTryEnterCriticalSection (4 samples, 0.04%)</title><rect x="89.9009%" y="101" width="0.0360%" height="15" fill="rgb(242,16,51)" fg:x="9979" fg:w="4"/><text x="90.1509%" y="111.50"></text></g><g><title>ntdll`RtlLookupElementGenericTableAvl (2 samples, 0.02%)</title><rect x="89.9459%" y="165" width="0.0180%" height="15" fill="rgb(248,9,4)" fg:x="9984" fg:w="2"/><text x="90.1959%" y="175.50"></text></g><g><title>ntdll`RtlAllocateHeap (3,712 samples, 33.44%)</title><rect x="62.0721%" y="197" width="33.4414%" height="15" fill="rgb(210,31,22)" fg:x="6890" fg:w="3712"/><text x="62.3221%" y="207.50">ntdll`RtlAllocateHeap</text></g><g><title>ntdll`RtlAllocateHeap (3,013 samples, 27.14%)</title><rect x="68.3694%" y="181" width="27.1441%" height="15" fill="rgb(239,54,39)" fg:x="7589" fg:w="3013"/><text x="68.6194%" y="191.50">ntdll`RtlAllocateHeap</text></g><g><title>ntdll`RtlUnhandledExceptionFilter (616 samples, 5.55%)</title><rect x="89.9640%" y="165" width="5.5495%" height="15" fill="rgb(230,99,41)" fg:x="9986" fg:w="616"/><text x="90.2140%" y="175.50">ntdll`R..</text></g><g><title>toy`_rust_alloc (11 samples, 0.10%)</title><rect x="95.5135%" y="197" width="0.0991%" height="15" fill="rgb(253,106,12)" fg:x="10602" fg:w="11"/><text x="95.7635%" y="207.50"></text></g><g><title>toy`memcpy (3 samples, 0.03%)</title><rect x="95.6126%" y="197" width="0.0270%" height="15" fill="rgb(213,46,41)" fg:x="10613" fg:w="3"/><text x="95.8626%" y="207.50"></text></g><g><title>toy`hashbrown::raw::inner::impl$13::clone&lt;tuple$&lt;usize,alloc::vec::Vec (4,607 samples, 41.50%)</title><rect x="55.1892%" y="213" width="41.5045%" height="15" fill="rgb(215,133,35)" fg:x="6126" fg:w="4607"/><text x="55.4392%" y="223.50">toy`hashbrown::raw::inner::impl$13::clone&lt;tuple$&lt;usize,alloc::vec::V..</text></g><g><title>toy`std::alloc::__default_lib_allocator::__rdl_alloc (117 samples, 1.05%)</title><rect x="95.6396%" y="197" width="1.0541%" height="15" fill="rgb(213,28,5)" fg:x="10616" fg:w="117"/><text x="95.8896%" y="207.50"></text></g><g><title>toy`memcpy (2 samples, 0.02%)</title><rect x="96.6937%" y="213" width="0.0180%" height="15" fill="rgb(215,77,49)" fg:x="10733" fg:w="2"/><text x="96.9437%" y="223.50"></text></g><g><title>ntdll`RtlAllocateHeap (2 samples, 0.02%)</title><rect x="97.2162%" y="197" width="0.0180%" height="15" fill="rgb(248,100,22)" fg:x="10791" fg:w="2"/><text x="97.4662%" y="207.50"></text></g><g><title>ntdll`RtlAllocateHeap (2 samples, 0.02%)</title><rect x="97.2162%" y="181" width="0.0180%" height="15" fill="rgb(208,67,9)" fg:x="10791" fg:w="2"/><text x="97.4662%" y="191.50"></text></g><g><title>ntdll`RtlCopyMemory (3 samples, 0.03%)</title><rect x="97.2432%" y="181" width="0.0270%" height="15" fill="rgb(219,133,21)" fg:x="10794" fg:w="3"/><text x="97.4932%" y="191.50"></text></g><g><title>ntdll`RtlFreeHeap (6 samples, 0.05%)</title><rect x="97.2342%" y="197" width="0.0541%" height="15" fill="rgb(246,46,29)" fg:x="10793" fg:w="6"/><text x="97.4842%" y="207.50"></text></g><g><title>ntdll`RtlGetCurrentServiceSessionId (2 samples, 0.02%)</title><rect x="97.2703%" y="181" width="0.0180%" height="15" fill="rgb(246,185,52)" fg:x="10797" fg:w="2"/><text x="97.5203%" y="191.50"></text></g><g><title>toy`alloc::collections::binary_heap::BinaryHeap&lt;petgraph::scored::MinScored&lt;i32,petgraph::graph_impl::NodeIndex&lt;u32&gt; &gt;,alloc::alloc::Global&gt;::pop&lt;petgraph::scored::MinScored&lt;i32,petgraph::graph_impl::NodeIndex (5 samples, 0.05%)</title><rect x="97.2883%" y="197" width="0.0450%" height="15" fill="rgb(252,136,11)" fg:x="10799" fg:w="5"/><text x="97.5383%" y="207.50"></text></g><g><title>ntdll`RtlCopyMemory (2 samples, 0.02%)</title><rect x="97.3604%" y="101" width="0.0180%" height="15" fill="rgb(219,138,53)" fg:x="10807" fg:w="2"/><text x="97.6104%" y="111.50"></text></g><g><title>ntdll`RtlReAllocateHeap (6 samples, 0.05%)</title><rect x="97.3333%" y="165" width="0.0541%" height="15" fill="rgb(211,51,23)" fg:x="10804" fg:w="6"/><text x="97.5833%" y="175.50"></text></g><g><title>ntdll`RtlReAllocateHeap (5 samples, 0.05%)</title><rect x="97.3423%" y="149" width="0.0450%" height="15" fill="rgb(247,221,28)" fg:x="10805" fg:w="5"/><text x="97.5923%" y="159.50"></text></g><g><title>ntdll`RtlReAllocateHeap (5 samples, 0.05%)</title><rect x="97.3423%" y="133" width="0.0450%" height="15" fill="rgb(251,222,45)" fg:x="10805" fg:w="5"/><text x="97.5923%" y="143.50"></text></g><g><title>ntdll`RtlFreeHeap (4 samples, 0.04%)</title><rect x="97.3514%" y="117" width="0.0360%" height="15" fill="rgb(217,162,53)" fg:x="10806" fg:w="4"/><text x="97.6014%" y="127.50"></text></g><g><title>toy`alloc::raw_vec::RawVec&lt;petgraph::graph_impl::NodeIndex&lt;u32&gt;,alloc::alloc::Global&gt;::reserve_for_push&lt;petgraph::graph_impl::NodeIndex (7 samples, 0.06%)</title><rect x="97.3333%" y="197" width="0.0631%" height="15" fill="rgb(229,93,14)" fg:x="10804" fg:w="7"/><text x="97.5833%" y="207.50"></text></g><g><title>toy`alloc::raw_vec::finish_grow (7 samples, 0.06%)</title><rect x="97.3333%" y="181" width="0.0631%" height="15" fill="rgb(209,67,49)" fg:x="10804" fg:w="7"/><text x="97.5833%" y="191.50"></text></g><g><title>ntdll`RtlAllocateHeap (7 samples, 0.06%)</title><rect x="97.4324%" y="117" width="0.0631%" height="15" fill="rgb(213,87,29)" fg:x="10815" fg:w="7"/><text x="97.6824%" y="127.50"></text></g><g><title>ntdll`RtlAllocateHeap (6 samples, 0.05%)</title><rect x="97.4414%" y="101" width="0.0541%" height="15" fill="rgb(205,151,52)" fg:x="10816" fg:w="6"/><text x="97.6914%" y="111.50"></text></g><g><title>ntdll`RtlReAllocateHeap (13 samples, 0.12%)</title><rect x="97.4144%" y="165" width="0.1171%" height="15" fill="rgb(253,215,39)" fg:x="10813" fg:w="13"/><text x="97.6644%" y="175.50"></text></g><g><title>ntdll`RtlReAllocateHeap (13 samples, 0.12%)</title><rect x="97.4144%" y="149" width="0.1171%" height="15" fill="rgb(221,220,41)" fg:x="10813" fg:w="13"/><text x="97.6644%" y="159.50"></text></g><g><title>ntdll`RtlReAllocateHeap (13 samples, 0.12%)</title><rect x="97.4144%" y="133" width="0.1171%" height="15" fill="rgb(218,133,21)" fg:x="10813" fg:w="13"/><text x="97.6644%" y="143.50"></text></g><g><title>ntdll`RtlFreeHeap (3 samples, 0.03%)</title><rect x="97.5045%" y="117" width="0.0270%" height="15" fill="rgb(221,193,43)" fg:x="10823" fg:w="3"/><text x="97.7545%" y="127.50"></text></g><g><title>ntdll`RtlGetCurrentServiceSessionId (2 samples, 0.02%)</title><rect x="97.5135%" y="101" width="0.0180%" height="15" fill="rgb(240,128,52)" fg:x="10824" fg:w="2"/><text x="97.7635%" y="111.50"></text></g><g><title>toy`alloc::raw_vec::RawVec&lt;petgraph::scored::MinScored&lt;i32,petgraph::graph_impl::NodeIndex&lt;u32&gt; &gt;,alloc::alloc::Global&gt;::reserve_for_push&lt;petgraph::scored::MinScored&lt;i32,petgraph::graph_impl::NodeIndex (16 samples, 0.14%)</title><rect x="97.3964%" y="197" width="0.1441%" height="15" fill="rgb(253,114,12)" fg:x="10811" fg:w="16"/><text x="97.6464%" y="207.50"></text></g><g><title>toy`alloc::raw_vec::finish_grow (15 samples, 0.14%)</title><rect x="97.4054%" y="181" width="0.1351%" height="15" fill="rgb(215,223,47)" fg:x="10812" fg:w="15"/><text x="97.6554%" y="191.50"></text></g><g><title>toy`core::hash::BuildHasher::hash_one&lt;std::hash::random::RandomState,ref$&lt;petgraph::graph_impl::NodeIndex (14 samples, 0.13%)</title><rect x="97.5405%" y="197" width="0.1261%" height="15" fill="rgb(248,225,23)" fg:x="10827" fg:w="14"/><text x="97.7905%" y="207.50"></text></g><g><title>toy`core::hash::sip::impl$5::write (3 samples, 0.03%)</title><rect x="97.6396%" y="181" width="0.0270%" height="15" fill="rgb(250,108,0)" fg:x="10838" fg:w="3"/><text x="97.8896%" y="191.50"></text></g><g><title>toy`core::hash::sip::impl$5::write (6 samples, 0.05%)</title><rect x="97.6667%" y="197" width="0.0541%" height="15" fill="rgb(228,208,7)" fg:x="10841" fg:w="6"/><text x="97.9167%" y="207.50"></text></g><g><title>toy`core::hash::BuildHasher::hash_one&lt;std::hash::random::RandomState,ref$&lt;petgraph::graph_impl::NodeIndex (8 samples, 0.07%)</title><rect x="97.8468%" y="181" width="0.0721%" height="15" fill="rgb(244,45,10)" fg:x="10861" fg:w="8"/><text x="98.0968%" y="191.50"></text></g><g><title>ntdll`RtlAllocateHeap (7 samples, 0.06%)</title><rect x="98.0450%" y="165" width="0.0631%" height="15" fill="rgb(207,125,25)" fg:x="10883" fg:w="7"/><text x="98.2950%" y="175.50"></text></g><g><title>ntdll`RtlAllocateHeap (7 samples, 0.06%)</title><rect x="98.0450%" y="149" width="0.0631%" height="15" fill="rgb(210,195,18)" fg:x="10883" fg:w="7"/><text x="98.2950%" y="159.50"></text></g><g><title>ntdll`RtlCopyMemory (3 samples, 0.03%)</title><rect x="98.1081%" y="149" width="0.0270%" height="15" fill="rgb(249,80,12)" fg:x="10890" fg:w="3"/><text x="98.3581%" y="159.50"></text></g><g><title>ntdll`RtlFreeHeap (5 samples, 0.05%)</title><rect x="98.1081%" y="165" width="0.0450%" height="15" fill="rgb(221,65,9)" fg:x="10890" fg:w="5"/><text x="98.3581%" y="175.50"></text></g><g><title>ntdll`RtlGetCurrentServiceSessionId (2 samples, 0.02%)</title><rect x="98.1351%" y="149" width="0.0180%" height="15" fill="rgb(235,49,36)" fg:x="10893" fg:w="2"/><text x="98.3851%" y="159.50"></text></g><g><title>toy`core::hash::BuildHasher::hash_one&lt;std::hash::random::RandomState,ref$&lt;petgraph::graph_impl::NodeIndex (19 samples, 0.17%)</title><rect x="98.1532%" y="165" width="0.1712%" height="15" fill="rgb(225,32,20)" fg:x="10895" fg:w="19"/><text x="98.4032%" y="175.50"></text></g><g><title>toy`core::hash::sip::impl$5::write (4 samples, 0.04%)</title><rect x="98.2883%" y="149" width="0.0360%" height="15" fill="rgb(215,141,46)" fg:x="10910" fg:w="4"/><text x="98.5383%" y="159.50"></text></g><g><title>toy`hashbrown::map::HashMap&lt;petgraph::graph_impl::NodeIndex&lt;u32&gt;,i32,std::hash::random::RandomState,alloc::alloc::Global&gt;::insert&lt;petgraph::graph_impl::NodeIndex (68 samples, 0.61%)</title><rect x="97.7207%" y="197" width="0.6126%" height="15" fill="rgb(250,160,47)" fg:x="10847" fg:w="68"/><text x="97.9707%" y="207.50"></text></g><g><title>toy`hashbrown::raw::RawTable&lt;tuple$&lt;petgraph::graph_impl::NodeIndex&lt;u32&gt;,i32&gt;,alloc::alloc::Global&gt;::reserve_rehash&lt;tuple$&lt;petgraph::graph_impl::NodeIndex&lt;u32&gt;,i32&gt;,alloc::alloc::Global,hashbrown::map::make_hasher::closure_env$0&lt;petgraph::graph_impl::NodeIndex (46 samples, 0.41%)</title><rect x="97.9189%" y="181" width="0.4144%" height="15" fill="rgb(216,222,40)" fg:x="10869" fg:w="46"/><text x="98.1689%" y="191.50"></text></g><g><title>VCRUNTIME140`memset (4 samples, 0.04%)</title><rect x="98.5045%" y="181" width="0.0360%" height="15" fill="rgb(234,217,39)" fg:x="10934" fg:w="4"/><text x="98.7545%" y="191.50"></text></g><g><title>ntdll`RtlAllocateHeap (14 samples, 0.13%)</title><rect x="98.5405%" y="181" width="0.1261%" height="15" fill="rgb(207,178,40)" fg:x="10938" fg:w="14"/><text x="98.7905%" y="191.50"></text></g><g><title>ntdll`RtlAllocateHeap (13 samples, 0.12%)</title><rect x="98.5495%" y="165" width="0.1171%" height="15" fill="rgb(221,136,13)" fg:x="10939" fg:w="13"/><text x="98.7995%" y="175.50"></text></g><g><title>ntdll`RtlEnumerateGenericTableWithoutSplayingAvl (2 samples, 0.02%)</title><rect x="98.6486%" y="149" width="0.0180%" height="15" fill="rgb(249,199,10)" fg:x="10950" fg:w="2"/><text x="98.8986%" y="159.50"></text></g><g><title>ntdll`RtlEnumerateGenericTableWithoutSplayingAvl (2 samples, 0.02%)</title><rect x="98.6486%" y="133" width="0.0180%" height="15" fill="rgb(249,222,13)" fg:x="10950" fg:w="2"/><text x="98.8986%" y="143.50"></text></g><g><title>ntdll`RtlAllocateHeap (2 samples, 0.02%)</title><rect x="98.6486%" y="117" width="0.0180%" height="15" fill="rgb(244,185,38)" fg:x="10950" fg:w="2"/><text x="98.8986%" y="127.50"></text></g><g><title>ntdll`RtlAllocateHeap (2 samples, 0.02%)</title><rect x="98.6486%" y="101" width="0.0180%" height="15" fill="rgb(236,202,9)" fg:x="10950" fg:w="2"/><text x="98.8986%" y="111.50"></text></g><g><title>ntdll`RtlTryEnterCriticalSection (2 samples, 0.02%)</title><rect x="98.6486%" y="85" width="0.0180%" height="15" fill="rgb(250,229,37)" fg:x="10950" fg:w="2"/><text x="98.8986%" y="95.50"></text></g><g><title>ntdll`RtlCopyMemory (2 samples, 0.02%)</title><rect x="98.6667%" y="165" width="0.0180%" height="15" fill="rgb(206,174,23)" fg:x="10952" fg:w="2"/><text x="98.9167%" y="175.50"></text></g><g><title>ntdll`RtlFreeHeap (3 samples, 0.03%)</title><rect x="98.6667%" y="181" width="0.0270%" height="15" fill="rgb(211,33,43)" fg:x="10952" fg:w="3"/><text x="98.9167%" y="191.50"></text></g><g><title>toy`petgraph::algo::astar::astar&lt;ref$&lt;petgraph::graph_impl::Graph&lt;enum2$&lt;aeg::aeg::Node&gt;,aeg::aeg::AegEdge,enum2$ (236 samples, 2.13%)</title><rect x="96.7117%" y="213" width="2.1261%" height="15" fill="rgb(245,58,50)" fg:x="10735" fg:w="236"/><text x="96.9617%" y="223.50">t..</text></g><g><title>toy`hashbrown::raw::RawTable&lt;tuple$&lt;petgraph::graph_impl::NodeIndex&lt;u32&gt;,i32&gt;,alloc::alloc::Global&gt;::reserve_rehash&lt;tuple$&lt;petgraph::graph_impl::NodeIndex&lt;u32&gt;,i32&gt;,alloc::alloc::Global,hashbrown::map::make_hasher::closure_env$0&lt;petgraph::graph_impl::NodeIndex (56 samples, 0.50%)</title><rect x="98.3333%" y="197" width="0.5045%" height="15" fill="rgb(244,68,36)" fg:x="10915" fg:w="56"/><text x="98.5833%" y="207.50"></text></g><g><title>toy`core::hash::BuildHasher::hash_one&lt;std::hash::random::RandomState,ref$&lt;petgraph::graph_impl::NodeIndex (16 samples, 0.14%)</title><rect x="98.6937%" y="181" width="0.1441%" height="15" fill="rgb(232,229,15)" fg:x="10955" fg:w="16"/><text x="98.9437%" y="191.50"></text></g><g><title>toy`std::alloc::__default_lib_allocator::__rdl_alloc (11 samples, 0.10%)</title><rect x="98.8378%" y="213" width="0.0991%" height="15" fill="rgb(254,30,23)" fg:x="10971" fg:w="11"/><text x="99.0878%" y="223.50"></text></g><g><title>toy`aeg::aeg::AbstractEventGraph::find_critical_cycles (10,993 samples, 99.04%)</title><rect x="0.5225%" y="245" width="99.0360%" height="15" fill="rgb(235,160,14)" fg:x="58" fg:w="10993"/><text x="0.7725%" y="255.50">toy`aeg::aeg::AbstractEventGraph::find_critical_cycles</text></g><g><title>toy`aeg::critical_cycles::critical_cycles (10,993 samples, 99.04%)</title><rect x="0.5225%" y="229" width="99.0360%" height="15" fill="rgb(212,155,44)" fg:x="58" fg:w="10993"/><text x="0.7725%" y="239.50">toy`aeg::critical_cycles::critical_cycles</text></g><g><title>toy`std::alloc::__default_lib_allocator::__rdl_dealloc (69 samples, 0.62%)</title><rect x="98.9369%" y="213" width="0.6216%" height="15" fill="rgb(226,2,50)" fg:x="10982" fg:w="69"/><text x="99.1869%" y="223.50"></text></g><g><title>bcrypt`BCryptOpenAlgorithmProvider (2 samples, 0.02%)</title><rect x="99.5586%" y="149" width="0.0180%" height="15" fill="rgb(234,177,6)" fg:x="11051" fg:w="2"/><text x="99.8086%" y="159.50"></text></g><g><title>bcrypt`BCryptDecrypt (2 samples, 0.02%)</title><rect x="99.5586%" y="133" width="0.0180%" height="15" fill="rgb(217,24,9)" fg:x="11051" fg:w="2"/><text x="99.8086%" y="143.50"></text></g><g><title>bcrypt`BCryptDecrypt (2 samples, 0.02%)</title><rect x="99.5586%" y="117" width="0.0180%" height="15" fill="rgb(220,13,46)" fg:x="11051" fg:w="2"/><text x="99.8086%" y="127.50"></text></g><g><title>KERNELBASE`LoadLibraryExW (2 samples, 0.02%)</title><rect x="99.5586%" y="101" width="0.0180%" height="15" fill="rgb(239,221,27)" fg:x="11051" fg:w="2"/><text x="99.8086%" y="111.50"></text></g><g><title>ntdll`LdrLoadDll (2 samples, 0.02%)</title><rect x="99.5586%" y="85" width="0.0180%" height="15" fill="rgb(222,198,25)" fg:x="11051" fg:w="2"/><text x="99.8086%" y="95.50"></text></g><g><title>ntdll`RtlUnicodeToCustomCPN (2 samples, 0.02%)</title><rect x="99.5586%" y="69" width="0.0180%" height="15" fill="rgb(211,99,13)" fg:x="11051" fg:w="2"/><text x="99.8086%" y="79.50"></text></g><g><title>ntdll`RtlImageRvaToSection (2 samples, 0.02%)</title><rect x="99.5586%" y="53" width="0.0180%" height="15" fill="rgb(232,111,31)" fg:x="11051" fg:w="2"/><text x="99.8086%" y="63.50"></text></g><g><title>toy`aeg::aeg::AbstractEventGraph::with_config (3 samples, 0.03%)</title><rect x="99.5586%" y="245" width="0.0270%" height="15" fill="rgb(245,82,37)" fg:x="11051" fg:w="3"/><text x="99.8086%" y="255.50"></text></g><g><title>toy`aeg::aeg::create_aeg (3 samples, 0.03%)</title><rect x="99.5586%" y="229" width="0.0270%" height="15" fill="rgb(227,149,46)" fg:x="11051" fg:w="3"/><text x="99.8086%" y="239.50"></text></g><g><title>toy`std::sys::common::thread_local::fast_local::Key&lt;core::cell::Cell&lt;tuple$&lt;u64,u64&gt; &gt; &gt;::try_initialize&lt;core::cell::Cell&lt;tuple$ (3 samples, 0.03%)</title><rect x="99.5586%" y="213" width="0.0270%" height="15" fill="rgb(218,36,50)" fg:x="11051" fg:w="3"/><text x="99.8086%" y="223.50"></text></g><g><title>toy`std::sys::windows::rand::hashmap_random_keys (3 samples, 0.03%)</title><rect x="99.5586%" y="197" width="0.0270%" height="15" fill="rgb(226,80,48)" fg:x="11051" fg:w="3"/><text x="99.8086%" y="207.50"></text></g><g><title>bcrypt`BCryptGenRandom (3 samples, 0.03%)</title><rect x="99.5586%" y="181" width="0.0270%" height="15" fill="rgb(238,224,15)" fg:x="11051" fg:w="3"/><text x="99.8086%" y="191.50"></text></g><g><title>bcrypt`BCryptGenRandom (3 samples, 0.03%)</title><rect x="99.5586%" y="165" width="0.0270%" height="15" fill="rgb(241,136,10)" fg:x="11051" fg:w="3"/><text x="99.8086%" y="175.50"></text></g><g><title>toy`parser::parse (2 samples, 0.02%)</title><rect x="99.6036%" y="245" width="0.0180%" height="15" fill="rgb(208,32,45)" fg:x="11056" fg:w="2"/><text x="99.8536%" y="255.50"></text></g><g><title>toy`pest::parser_state::state (2 samples, 0.02%)</title><rect x="99.6036%" y="229" width="0.0180%" height="15" fill="rgb(207,135,9)" fg:x="11056" fg:w="2"/><text x="99.8536%" y="239.50"></text></g><g><title>toy`petgraph::graph_impl::serialization::impl$2::serialize&lt;u32,ref_mut$&lt;serde_json::ser::Serializer&lt;ref_mut$&lt;alloc::vec::Vec (9 samples, 0.08%)</title><rect x="99.6306%" y="197" width="0.0811%" height="15" fill="rgb(206,86,44)" fg:x="11059" fg:w="9"/><text x="99.8806%" y="207.50"></text></g><g><title>toy`serde::ser::Serializer::collect_seq&lt;ref_mut$&lt;serde_json::ser::Serializer&lt;ref_mut$&lt;alloc::vec::Vec&lt;u8,alloc::alloc::Global&gt; &gt;,serde_json::ser::CompactFormatter&gt; &gt;,ref$&lt;alloc::vec::Vec (12 samples, 0.11%)</title><rect x="99.6216%" y="245" width="0.1081%" height="15" fill="rgb(245,177,15)" fg:x="11058" fg:w="12"/><text x="99.8716%" y="255.50"></text></g><g><title>toy`aeg::critical_cycles::_::impl$0::serialize&lt;ref_mut$&lt;serde_json::ser::Serializer&lt;ref_mut$&lt;alloc::vec::Vec (12 samples, 0.11%)</title><rect x="99.6216%" y="229" width="0.1081%" height="15" fill="rgb(206,64,50)" fg:x="11058" fg:w="12"/><text x="99.8716%" y="239.50"></text></g><g><title>toy`serde::ser::SerializeMap::serialize_entry&lt;enum2$&lt;serde_json::ser::Compound&lt;ref_mut$&lt;alloc::vec::Vec&lt;u8,alloc::alloc::Global&gt; &gt;,serde_json::ser::CompactFormatter&gt; &gt;,str$,alloc::vec::Vec&lt;petgraph::graph_impl::NodeIndex (12 samples, 0.11%)</title><rect x="99.6216%" y="213" width="0.1081%" height="15" fill="rgb(234,36,40)" fg:x="11058" fg:w="12"/><text x="99.8716%" y="223.50"></text></g><g><title>toy`serde_json::ser::format_escaped_str&lt;ref_mut$&lt;alloc::vec::Vec (2 samples, 0.02%)</title><rect x="99.7117%" y="197" width="0.0180%" height="15" fill="rgb(213,64,8)" fg:x="11068" fg:w="2"/><text x="99.9617%" y="207.50"></text></g><g><title>KERNELBASE`GetConsoleMode (7 samples, 0.06%)</title><rect x="99.7568%" y="117" width="0.0631%" height="15" fill="rgb(210,75,36)" fg:x="11073" fg:w="7"/><text x="100.0068%" y="127.50"></text></g><g><title>KERNELBASE`GetConsoleScreenBufferInfoEx (7 samples, 0.06%)</title><rect x="99.7568%" y="101" width="0.0631%" height="15" fill="rgb(229,88,21)" fg:x="11073" fg:w="7"/><text x="100.0068%" y="111.50"></text></g><g><title>KERNELBASE`GetConsoleScreenBufferInfoEx (7 samples, 0.06%)</title><rect x="99.7568%" y="85" width="0.0631%" height="15" fill="rgb(252,204,47)" fg:x="11073" fg:w="7"/><text x="100.0068%" y="95.50"></text></g><g><title>ntdll`NtDeviceIoControlFile (7 samples, 0.06%)</title><rect x="99.7568%" y="69" width="0.0631%" height="15" fill="rgb(208,77,27)" fg:x="11073" fg:w="7"/><text x="100.0068%" y="79.50"></text></g><g><title>KERNELBASE`MultiByteToWideChar (2 samples, 0.02%)</title><rect x="99.8198%" y="101" width="0.0180%" height="15" fill="rgb(221,76,26)" fg:x="11080" fg:w="2"/><text x="100.0698%" y="111.50"></text></g><g><title>ntdll`RtlUTF8ToUnicodeN (2 samples, 0.02%)</title><rect x="99.8198%" y="85" width="0.0180%" height="15" fill="rgb(225,139,18)" fg:x="11080" fg:w="2"/><text x="100.0698%" y="95.50"></text></g><g><title>toy`main (11,052 samples, 99.57%)</title><rect x="0.3694%" y="325" width="99.5676%" height="15" fill="rgb(230,137,11)" fg:x="41" fg:w="11052"/><text x="0.6194%" y="335.50">toy`main</text></g><g><title>toy`std::rt::lang_start_internal (11,052 samples, 99.57%)</title><rect x="0.3694%" y="309" width="99.5676%" height="15" fill="rgb(212,28,1)" fg:x="41" fg:w="11052"/><text x="0.6194%" y="319.50">toy`std::rt::lang_start_internal</text></g><g><title>toy`core::ops::function::FnOnce::call_once&lt;std::rt::lang_start::closure_env$0&lt;tuple$&lt;&gt; &gt;,tuple$ (11,051 samples, 99.56%)</title><rect x="0.3784%" y="293" width="99.5586%" height="15" fill="rgb(248,164,17)" fg:x="42" fg:w="11051"/><text x="0.6284%" y="303.50">toy`core::ops::function::FnOnce::call_once&lt;std::rt::lang_start::closure_env$0&lt;tuple$&lt;&gt; &gt;,tuple$</text></g><g><title>toy`std::sys_common::backtrace::__rust_begin_short_backtrace&lt;void (*)(),tuple$ (11,051 samples, 99.56%)</title><rect x="0.3784%" y="277" width="99.5586%" height="15" fill="rgb(222,171,42)" fg:x="42" fg:w="11051"/><text x="0.6284%" y="287.50">toy`std::sys_common::backtrace::__rust_begin_short_backtrace&lt;void (*)(),tuple$</text></g><g><title>toy`toy::main (11,051 samples, 99.56%)</title><rect x="0.3784%" y="261" width="99.5586%" height="15" fill="rgb(243,84,45)" fg:x="42" fg:w="11051"/><text x="0.6284%" y="271.50">toy`toy::main</text></g><g><title>toy`std::io::stdio::_print (22 samples, 0.20%)</title><rect x="99.7387%" y="245" width="0.1982%" height="15" fill="rgb(252,49,23)" fg:x="11071" fg:w="22"/><text x="99.9887%" y="255.50"></text></g><g><title>toy`std::io::stdio::impl$12::write_fmt (22 samples, 0.20%)</title><rect x="99.7387%" y="229" width="0.1982%" height="15" fill="rgb(215,19,7)" fg:x="11071" fg:w="22"/><text x="99.9887%" y="239.50"></text></g><g><title>toy`core::fmt::write (22 samples, 0.20%)</title><rect x="99.7387%" y="213" width="0.1982%" height="15" fill="rgb(238,81,41)" fg:x="11071" fg:w="22"/><text x="99.9887%" y="223.50"></text></g><g><title>toy`std::io::Write::write_fmt::impl$0::write_str (22 samples, 0.20%)</title><rect x="99.7387%" y="197" width="0.1982%" height="15" fill="rgb(210,199,37)" fg:x="11071" fg:w="22"/><text x="99.9887%" y="207.50"></text></g><g><title>toy`std::io::stdio::impl$13::write_all (22 samples, 0.20%)</title><rect x="99.7387%" y="181" width="0.1982%" height="15" fill="rgb(244,192,49)" fg:x="11071" fg:w="22"/><text x="99.9887%" y="191.50"></text></g><g><title>toy`std::io::buffered::bufwriter::BufWriter::write_all_cold (20 samples, 0.18%)</title><rect x="99.7568%" y="165" width="0.1802%" height="15" fill="rgb(226,211,11)" fg:x="11073" fg:w="20"/><text x="100.0068%" y="175.50"></text></g><g><title>toy`std::io::Write::write_all (20 samples, 0.18%)</title><rect x="99.7568%" y="149" width="0.1802%" height="15" fill="rgb(236,162,54)" fg:x="11073" fg:w="20"/><text x="100.0068%" y="159.50"></text></g><g><title>toy`std::sys::windows::stdio::write (20 samples, 0.18%)</title><rect x="99.7568%" y="133" width="0.1802%" height="15" fill="rgb(220,229,9)" fg:x="11073" fg:w="20"/><text x="100.0068%" y="143.50"></text></g><g><title>toy`std::sys::windows::stdio::write_valid_utf8_to_console (13 samples, 0.12%)</title><rect x="99.8198%" y="117" width="0.1171%" height="15" fill="rgb(250,87,22)" fg:x="11080" fg:w="13"/><text x="100.0698%" y="127.50"></text></g><g><title>KERNELBASE`WriteConsoleW (11 samples, 0.10%)</title><rect x="99.8378%" y="101" width="0.0991%" height="15" fill="rgb(239,43,17)" fg:x="11082" fg:w="11"/><text x="100.0878%" y="111.50"></text></g><g><title>KERNELBASE`WriteConsoleW (11 samples, 0.10%)</title><rect x="99.8378%" y="85" width="0.0991%" height="15" fill="rgb(231,177,25)" fg:x="11082" fg:w="11"/><text x="100.0878%" y="95.50"></text></g><g><title>KERNELBASE`GetConsoleScreenBufferInfoEx (11 samples, 0.10%)</title><rect x="99.8378%" y="69" width="0.0991%" height="15" fill="rgb(219,179,1)" fg:x="11082" fg:w="11"/><text x="100.0878%" y="79.50"></text></g><g><title>ntdll`NtDeviceIoControlFile (10 samples, 0.09%)</title><rect x="99.8468%" y="53" width="0.0901%" height="15" fill="rgb(238,219,53)" fg:x="11083" fg:w="10"/><text x="100.0968%" y="63.50"></text></g><g><title>ntdll`LdrControlFlowGuardEnforced (2 samples, 0.02%)</title><rect x="99.9550%" y="133" width="0.0180%" height="15" fill="rgb(232,167,36)" fg:x="11095" fg:w="2"/><text x="100.2050%" y="143.50"></text></g><g><title>ntdll`LdrControlFlowGuardEnforced (2 samples, 0.02%)</title><rect x="99.9550%" y="117" width="0.0180%" height="15" fill="rgb(244,19,51)" fg:x="11095" fg:w="2"/><text x="100.2050%" y="127.50"></text></g><g><title>ntdll`NtMapViewOfSection (2 samples, 0.02%)</title><rect x="99.9550%" y="101" width="0.0180%" height="15" fill="rgb(224,6,22)" fg:x="11095" fg:w="2"/><text x="100.2050%" y="111.50"></text></g><g><title>ntdll`LdrControlFlowGuardEnforced (4 samples, 0.04%)</title><rect x="99.9550%" y="149" width="0.0360%" height="15" fill="rgb(224,145,5)" fg:x="11095" fg:w="4"/><text x="100.2050%" y="159.50"></text></g><g><title>ntdll`RtlImageNtHeaderEx (2 samples, 0.02%)</title><rect x="99.9730%" y="133" width="0.0180%" height="15" fill="rgb(234,130,49)" fg:x="11097" fg:w="2"/><text x="100.2230%" y="143.50"></text></g><g><title>all (11,100 samples, 100%)</title><rect x="0.0000%" y="389" width="100.0000%" height="15" fill="rgb(254,6,2)" fg:x="0" fg:w="11100"/><text x="0.2500%" y="399.50"></text></g><g><title>ntdll`RtlUserThreadStart (11,069 samples, 99.72%)</title><rect x="0.2793%" y="373" width="99.7207%" height="15" fill="rgb(208,96,46)" fg:x="31" fg:w="11069"/><text x="0.5293%" y="383.50">ntdll`RtlUserThreadStart</text></g><g><title>KERNEL32`BaseThreadInitThunk (11,068 samples, 99.71%)</title><rect x="0.2883%" y="357" width="99.7117%" height="15" fill="rgb(239,3,39)" fg:x="32" fg:w="11068"/><text x="0.5383%" y="367.50">KERNEL32`BaseThreadInitThunk</text></g><g><title>toy`__scrt_common_main_seh (11,059 samples, 99.63%)</title><rect x="0.3694%" y="341" width="99.6306%" height="15" fill="rgb(233,210,1)" fg:x="41" fg:w="11059"/><text x="0.6194%" y="351.50">toy`__scrt_common_main_seh</text></g><g><title>ucrtbase`exit (7 samples, 0.06%)</title><rect x="99.9369%" y="325" width="0.0631%" height="15" fill="rgb(244,137,37)" fg:x="11093" fg:w="7"/><text x="100.1869%" y="335.50"></text></g><g><title>ucrtbase`exit (7 samples, 0.06%)</title><rect x="99.9369%" y="309" width="0.0631%" height="15" fill="rgb(240,136,2)" fg:x="11093" fg:w="7"/><text x="100.1869%" y="319.50"></text></g><g><title>ucrtbase`mbsicmp_l (6 samples, 0.05%)</title><rect x="99.9459%" y="293" width="0.0541%" height="15" fill="rgb(239,18,37)" fg:x="11094" fg:w="6"/><text x="100.1959%" y="303.50"></text></g><g><title>ucrtbase`o_iswascii (6 samples, 0.05%)</title><rect x="99.9459%" y="277" width="0.0541%" height="15" fill="rgb(218,185,22)" fg:x="11094" fg:w="6"/><text x="100.1959%" y="287.50"></text></g><g><title>KERNELBASE`LoadLibraryExW (6 samples, 0.05%)</title><rect x="99.9459%" y="261" width="0.0541%" height="15" fill="rgb(225,218,4)" fg:x="11094" fg:w="6"/><text x="100.1959%" y="271.50"></text></g><g><title>ntdll`LdrLoadDll (6 samples, 0.05%)</title><rect x="99.9459%" y="245" width="0.0541%" height="15" fill="rgb(230,182,32)" fg:x="11094" fg:w="6"/><text x="100.1959%" y="255.50"></text></g><g><title>ntdll`RtlUnicodeToCustomCPN (6 samples, 0.05%)</title><rect x="99.9459%" y="229" width="0.0541%" height="15" fill="rgb(242,56,43)" fg:x="11094" fg:w="6"/><text x="100.1959%" y="239.50"></text></g><g><title>ntdll`RtlImageRvaToSection (6 samples, 0.05%)</title><rect x="99.9459%" y="213" width="0.0541%" height="15" fill="rgb(233,99,24)" fg:x="11094" fg:w="6"/><text x="100.1959%" y="223.50"></text></g><g><title>ntdll`RtlQueryPerformanceCounter (6 samples, 0.05%)</title><rect x="99.9459%" y="197" width="0.0541%" height="15" fill="rgb(234,209,42)" fg:x="11094" fg:w="6"/><text x="100.1959%" y="207.50"></text></g><g><title>ntdll`RtlQueryPerformanceCounter (6 samples, 0.05%)</title><rect x="99.9459%" y="181" width="0.0541%" height="15" fill="rgb(227,7,12)" fg:x="11094" fg:w="6"/><text x="100.1959%" y="191.50"></text></g><g><title>ntdll`RtlQueryPerformanceCounter (5 samples, 0.05%)</title><rect x="99.9550%" y="165" width="0.0450%" height="15" fill="rgb(245,203,43)" fg:x="11095" fg:w="5"/><text x="100.2050%" y="175.50"></text></g></svg></svg>