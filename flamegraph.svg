<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="422" onload="init(evt)" viewBox="0 0 1200 422" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="422" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="405.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="405.00"> </text><svg id="frames" x="10" width="1180" total_samples="69813"><g><title>`0x1839F170000 (35 samples, 0.05%)</title><rect x="0.0029%" y="357" width="0.0501%" height="15" fill="rgb(227,0,7)" fg:x="2" fg:w="35"/><text x="0.2529%" y="367.50"></text></g><g><title>toy`indexmap::map::IndexMap&lt;petgraph::graph_impl::NodeIndex&lt;u32&gt;,tuple$&lt;&gt;,std::hash::random::RandomState&gt;::hash&lt;petgraph::graph_impl::NodeIndex&lt;u32&gt;,tuple$&lt;&gt;,std::hash::random::RandomState,petgraph::graph_impl::NodeIndex (35 samples, 0.05%)</title><rect x="0.0029%" y="341" width="0.0501%" height="15" fill="rgb(217,0,24)" fg:x="2" fg:w="35"/><text x="0.2529%" y="351.50"></text></g><g><title>`0x1839FAE0040 (12 samples, 0.02%)</title><rect x="0.0587%" y="357" width="0.0172%" height="15" fill="rgb(221,193,54)" fg:x="41" fg:w="12"/><text x="0.3087%" y="367.50"></text></g><g><title>toy`aeg::critical_cycles::impl$14::clone (12 samples, 0.02%)</title><rect x="0.0587%" y="341" width="0.0172%" height="15" fill="rgb(248,212,6)" fg:x="41" fg:w="12"/><text x="0.3087%" y="351.50"></text></g><g><title>ntdll`LdrGetDllHandleByMapping (7 samples, 0.01%)</title><rect x="0.0988%" y="245" width="0.0100%" height="15" fill="rgb(208,68,35)" fg:x="69" fg:w="7"/><text x="0.3488%" y="255.50"></text></g><g><title>ntdll`LdrAddRefDll (7 samples, 0.01%)</title><rect x="0.0988%" y="229" width="0.0100%" height="15" fill="rgb(232,128,0)" fg:x="69" fg:w="7"/><text x="0.3488%" y="239.50"></text></g><g><title>ntdll`LdrControlFlowGuardEnforced (7 samples, 0.01%)</title><rect x="0.0988%" y="213" width="0.0100%" height="15" fill="rgb(207,160,47)" fg:x="69" fg:w="7"/><text x="0.3488%" y="223.50"></text></g><g><title>ntdll`LdrLoadDll (15 samples, 0.02%)</title><rect x="0.0988%" y="293" width="0.0215%" height="15" fill="rgb(228,23,34)" fg:x="69" fg:w="15"/><text x="0.3488%" y="303.50"></text></g><g><title>ntdll`RtlUnicodeToCustomCPN (15 samples, 0.02%)</title><rect x="0.0988%" y="277" width="0.0215%" height="15" fill="rgb(218,30,26)" fg:x="69" fg:w="15"/><text x="0.3488%" y="287.50"></text></g><g><title>ntdll`RtlImageRvaToSection (15 samples, 0.02%)</title><rect x="0.0988%" y="261" width="0.0215%" height="15" fill="rgb(220,122,19)" fg:x="69" fg:w="15"/><text x="0.3488%" y="271.50"></text></g><g><title>ntdll`RtlCopyUnicodeString (7 samples, 0.01%)</title><rect x="0.1103%" y="245" width="0.0100%" height="15" fill="rgb(250,228,42)" fg:x="77" fg:w="7"/><text x="0.3603%" y="255.50"></text></g><g><title>ntdll`RtlEnumerateEntryHashTable (7 samples, 0.01%)</title><rect x="0.1103%" y="229" width="0.0100%" height="15" fill="rgb(240,193,28)" fg:x="77" fg:w="7"/><text x="0.3603%" y="239.50"></text></g><g><title>ntdll`RtlEnumerateEntryHashTable (7 samples, 0.01%)</title><rect x="0.1103%" y="213" width="0.0100%" height="15" fill="rgb(216,20,37)" fg:x="77" fg:w="7"/><text x="0.3603%" y="223.50"></text></g><g><title>ntdll`RtlEnumerateEntryHashTable (8 samples, 0.01%)</title><rect x="0.1218%" y="293" width="0.0115%" height="15" fill="rgb(206,188,39)" fg:x="85" fg:w="8"/><text x="0.3718%" y="303.50"></text></g><g><title>ntdll`RtlEnumerateEntryHashTable (8 samples, 0.01%)</title><rect x="0.1218%" y="277" width="0.0115%" height="15" fill="rgb(217,207,13)" fg:x="85" fg:w="8"/><text x="0.3718%" y="287.50"></text></g><g><title>ntdll`RtlEnumerateEntryHashTable (8 samples, 0.01%)</title><rect x="0.1218%" y="261" width="0.0115%" height="15" fill="rgb(231,73,38)" fg:x="85" fg:w="8"/><text x="0.3718%" y="271.50"></text></g><g><title>ntdll`LdrAddRefDll (7 samples, 0.01%)</title><rect x="0.1375%" y="245" width="0.0100%" height="15" fill="rgb(225,20,46)" fg:x="96" fg:w="7"/><text x="0.3875%" y="255.50"></text></g><g><title>ntdll`LdrControlFlowGuardEnforced (7 samples, 0.01%)</title><rect x="0.1375%" y="229" width="0.0100%" height="15" fill="rgb(210,31,41)" fg:x="96" fg:w="7"/><text x="0.3875%" y="239.50"></text></g><g><title>ntdll`RtlImageNtHeaderEx (9 samples, 0.01%)</title><rect x="0.1361%" y="293" width="0.0129%" height="15" fill="rgb(221,200,47)" fg:x="95" fg:w="9"/><text x="0.3861%" y="303.50"></text></g><g><title>ntdll`RtlImageNtHeaderEx (8 samples, 0.01%)</title><rect x="0.1375%" y="277" width="0.0115%" height="15" fill="rgb(226,26,5)" fg:x="96" fg:w="8"/><text x="0.3875%" y="287.50"></text></g><g><title>ntdll`RtlAnsiStringToUnicodeString (8 samples, 0.01%)</title><rect x="0.1375%" y="261" width="0.0115%" height="15" fill="rgb(249,33,26)" fg:x="96" fg:w="8"/><text x="0.3875%" y="271.50"></text></g><g><title>ntdll`LdrInitializeThunk (43 samples, 0.06%)</title><rect x="0.0931%" y="357" width="0.0616%" height="15" fill="rgb(235,183,28)" fg:x="65" fg:w="43"/><text x="0.3431%" y="367.50"></text></g><g><title>ntdll`LdrInitializeThunk (43 samples, 0.06%)</title><rect x="0.0931%" y="341" width="0.0616%" height="15" fill="rgb(221,5,38)" fg:x="65" fg:w="43"/><text x="0.3431%" y="351.50"></text></g><g><title>ntdll`EtwLogTraceEvent (43 samples, 0.06%)</title><rect x="0.0931%" y="325" width="0.0616%" height="15" fill="rgb(247,18,42)" fg:x="65" fg:w="43"/><text x="0.3431%" y="335.50"></text></g><g><title>ntdll`LdrInitShimEngineDynamic (43 samples, 0.06%)</title><rect x="0.0931%" y="309" width="0.0616%" height="15" fill="rgb(241,131,45)" fg:x="65" fg:w="43"/><text x="0.3431%" y="319.50"></text></g><g><title>ntdll`RtlQueryPerformanceCounter (16 samples, 0.02%)</title><rect x="0.1647%" y="293" width="0.0229%" height="15" fill="rgb(249,31,29)" fg:x="115" fg:w="16"/><text x="0.4147%" y="303.50"></text></g><g><title>ntdll`RtlQueryPerformanceCounter (16 samples, 0.02%)</title><rect x="0.1647%" y="277" width="0.0229%" height="15" fill="rgb(225,111,53)" fg:x="115" fg:w="16"/><text x="0.4147%" y="287.50"></text></g><g><title>ntdll`RtlQueryPerformanceCounter (9 samples, 0.01%)</title><rect x="0.1748%" y="261" width="0.0129%" height="15" fill="rgb(238,160,17)" fg:x="122" fg:w="9"/><text x="0.4248%" y="271.50"></text></g><g><title>ntdll`RtlClearThreadWorkOnBehalfTicket (18 samples, 0.03%)</title><rect x="0.1633%" y="325" width="0.0258%" height="15" fill="rgb(214,148,48)" fg:x="114" fg:w="18"/><text x="0.4133%" y="335.50"></text></g><g><title>ntdll`RtlHashUnicodeString (18 samples, 0.03%)</title><rect x="0.1633%" y="309" width="0.0258%" height="15" fill="rgb(232,36,49)" fg:x="114" fg:w="18"/><text x="0.4133%" y="319.50"></text></g><g><title>VCRUNTIME140`memmove (57 samples, 0.08%)</title><rect x="0.7019%" y="229" width="0.0816%" height="15" fill="rgb(209,103,24)" fg:x="490" fg:w="57"/><text x="0.9519%" y="239.50"></text></g><g><title>ntdll`NtFreeVirtualMemory (12 samples, 0.02%)</title><rect x="0.8494%" y="85" width="0.0172%" height="15" fill="rgb(229,88,8)" fg:x="593" fg:w="12"/><text x="1.0994%" y="95.50"></text></g><g><title>ntdll`NtFreeVirtualMemory (19 samples, 0.03%)</title><rect x="0.8766%" y="53" width="0.0272%" height="15" fill="rgb(213,181,19)" fg:x="612" fg:w="19"/><text x="1.1266%" y="63.50"></text></g><g><title>ntdll`RtlCopyMemory (80 samples, 0.11%)</title><rect x="0.7907%" y="213" width="0.1146%" height="15" fill="rgb(254,191,54)" fg:x="552" fg:w="80"/><text x="1.0407%" y="223.50"></text></g><g><title>ntdll`RtlTryAcquirePebLock (49 samples, 0.07%)</title><rect x="0.8351%" y="197" width="0.0702%" height="15" fill="rgb(241,83,37)" fg:x="583" fg:w="49"/><text x="1.0851%" y="207.50"></text></g><g><title>ntdll`RtlTryAcquirePebLock (49 samples, 0.07%)</title><rect x="0.8351%" y="181" width="0.0702%" height="15" fill="rgb(233,36,39)" fg:x="583" fg:w="49"/><text x="1.0851%" y="191.50"></text></g><g><title>ntdll`RtlFreeHeap (48 samples, 0.07%)</title><rect x="0.8365%" y="165" width="0.0688%" height="15" fill="rgb(226,3,54)" fg:x="584" fg:w="48"/><text x="1.0865%" y="175.50"></text></g><g><title>ntdll`RtlGetCurrentServiceSessionId (48 samples, 0.07%)</title><rect x="0.8365%" y="149" width="0.0688%" height="15" fill="rgb(245,192,40)" fg:x="584" fg:w="48"/><text x="1.0865%" y="159.50"></text></g><g><title>ntdll`RtlDeleteBoundaryDescriptor (48 samples, 0.07%)</title><rect x="0.8365%" y="133" width="0.0688%" height="15" fill="rgb(238,167,29)" fg:x="584" fg:w="48"/><text x="1.0865%" y="143.50"></text></g><g><title>ntdll`RtlTryEnterCriticalSection (47 samples, 0.07%)</title><rect x="0.8380%" y="117" width="0.0673%" height="15" fill="rgb(232,182,51)" fg:x="585" fg:w="47"/><text x="1.0880%" y="127.50"></text></g><g><title>ntdll`RtlTryEnterCriticalSection (41 samples, 0.06%)</title><rect x="0.8465%" y="101" width="0.0587%" height="15" fill="rgb(231,60,39)" fg:x="591" fg:w="41"/><text x="1.0965%" y="111.50"></text></g><g><title>ntdll`RtlTryEnterCriticalSection (27 samples, 0.04%)</title><rect x="0.8666%" y="85" width="0.0387%" height="15" fill="rgb(208,69,12)" fg:x="605" fg:w="27"/><text x="1.1166%" y="95.50"></text></g><g><title>ntdll`RtlTryEnterCriticalSection (26 samples, 0.04%)</title><rect x="0.8680%" y="69" width="0.0372%" height="15" fill="rgb(235,93,37)" fg:x="606" fg:w="26"/><text x="1.1180%" y="79.50"></text></g><g><title>ntdll`RtlFreeHeap (224 samples, 0.32%)</title><rect x="0.7835%" y="229" width="0.3209%" height="15" fill="rgb(213,116,39)" fg:x="547" fg:w="224"/><text x="1.0335%" y="239.50"></text></g><g><title>ntdll`RtlGetCurrentServiceSessionId (139 samples, 0.20%)</title><rect x="0.9053%" y="213" width="0.1991%" height="15" fill="rgb(222,207,29)" fg:x="632" fg:w="139"/><text x="1.1553%" y="223.50"></text></g><g><title>KERNEL32`HeapFree (91 samples, 0.13%)</title><rect x="34.8001%" y="213" width="0.1303%" height="15" fill="rgb(206,96,30)" fg:x="24295" fg:w="91"/><text x="35.0501%" y="223.50"></text></g><g><title>VCRUNTIME140`memcmp (11 samples, 0.02%)</title><rect x="34.9305%" y="213" width="0.0158%" height="15" fill="rgb(218,138,4)" fg:x="24386" fg:w="11"/><text x="35.1805%" y="223.50"></text></g><g><title>VCRUNTIME140`memmove (33 samples, 0.05%)</title><rect x="34.9476%" y="213" width="0.0473%" height="15" fill="rgb(250,191,14)" fg:x="24398" fg:w="33"/><text x="35.1976%" y="223.50"></text></g><g><title>ntdll`ExpInterlockedPopEntrySListEnd (8 samples, 0.01%)</title><rect x="38.8423%" y="181" width="0.0115%" height="15" fill="rgb(239,60,40)" fg:x="27117" fg:w="8"/><text x="39.0923%" y="191.50"></text></g><g><title>ntdll`RtlAllocateHeap (106 samples, 0.15%)</title><rect x="39.1331%" y="165" width="0.1518%" height="15" fill="rgb(206,27,48)" fg:x="27320" fg:w="106"/><text x="39.3831%" y="175.50"></text></g><g><title>ntdll`RtlAllocateHeap (304 samples, 0.44%)</title><rect x="38.8538%" y="181" width="0.4354%" height="15" fill="rgb(225,35,8)" fg:x="27125" fg:w="304"/><text x="39.1038%" y="191.50"></text></g><g><title>ntdll`RtlCopyMemory (134 samples, 0.19%)</title><rect x="39.2892%" y="181" width="0.1919%" height="15" fill="rgb(250,213,24)" fg:x="27429" fg:w="134"/><text x="39.5392%" y="191.50"></text></g><g><title>ntdll`ExpInterlockedPopEntrySListEnd (7 samples, 0.01%)</title><rect x="39.4912%" y="165" width="0.0100%" height="15" fill="rgb(247,123,22)" fg:x="27570" fg:w="7"/><text x="39.7412%" y="175.50"></text></g><g><title>ntdll`RtlEnumerateGenericTableWithoutSplayingAvl (17 samples, 0.02%)</title><rect x="39.4812%" y="181" width="0.0244%" height="15" fill="rgb(231,138,38)" fg:x="27563" fg:w="17"/><text x="39.7312%" y="191.50"></text></g><g><title>ntdll`RtlTryEnterCriticalSection (8 samples, 0.01%)</title><rect x="39.5055%" y="181" width="0.0115%" height="15" fill="rgb(231,145,46)" fg:x="27580" fg:w="8"/><text x="39.7555%" y="191.50"></text></g><g><title>ntdll`RtlAllocateHeap (3,447 samples, 4.94%)</title><rect x="34.9949%" y="213" width="4.9375%" height="15" fill="rgb(251,118,11)" fg:x="24431" fg:w="3447"/><text x="35.2449%" y="223.50">ntdll`..</text></g><g><title>ntdll`RtlAllocateHeap (1,999 samples, 2.86%)</title><rect x="37.0690%" y="197" width="2.8634%" height="15" fill="rgb(217,147,25)" fg:x="25879" fg:w="1999"/><text x="37.3190%" y="207.50">nt..</text></g><g><title>ntdll`RtlUnhandledExceptionFilter (290 samples, 0.42%)</title><rect x="39.5170%" y="181" width="0.4154%" height="15" fill="rgb(247,81,37)" fg:x="27588" fg:w="290"/><text x="39.7670%" y="191.50"></text></g><g><title>ntdll`RtlGetCurrentServiceSessionId (11 samples, 0.02%)</title><rect x="46.9626%" y="181" width="0.0158%" height="15" fill="rgb(209,12,38)" fg:x="32786" fg:w="11"/><text x="47.2126%" y="191.50"></text></g><g><title>ntdll`RtlLookupElementGenericTableAvl (9 samples, 0.01%)</title><rect x="46.9784%" y="181" width="0.0129%" height="15" fill="rgb(227,1,9)" fg:x="32797" fg:w="9"/><text x="47.2284%" y="191.50"></text></g><g><title>ntdll`NtProtectVirtualMemory (31 samples, 0.04%)</title><rect x="47.0056%" y="149" width="0.0444%" height="15" fill="rgb(248,47,43)" fg:x="32816" fg:w="31"/><text x="47.2556%" y="159.50"></text></g><g><title>ntdll`NtAllocateVirtualMemory (27 samples, 0.04%)</title><rect x="47.0700%" y="85" width="0.0387%" height="15" fill="rgb(221,10,30)" fg:x="32861" fg:w="27"/><text x="47.3200%" y="95.50"></text></g><g><title>ntdll`NtFreeVirtualMemory (30 samples, 0.04%)</title><rect x="47.1574%" y="69" width="0.0430%" height="15" fill="rgb(210,229,1)" fg:x="32922" fg:w="30"/><text x="47.4074%" y="79.50"></text></g><g><title>ntdll`RtlCopyMemory (5,445 samples, 7.80%)</title><rect x="40.4180%" y="197" width="7.7994%" height="15" fill="rgb(222,148,37)" fg:x="28217" fg:w="5445"/><text x="40.6680%" y="207.50">ntdll`RtlCo..</text></g><g><title>ntdll`RtlTryAcquirePebLock (856 samples, 1.23%)</title><rect x="46.9912%" y="181" width="1.2261%" height="15" fill="rgb(234,67,33)" fg:x="32806" fg:w="856"/><text x="47.2412%" y="191.50"></text></g><g><title>ntdll`RtlTryAcquirePebLock (847 samples, 1.21%)</title><rect x="47.0041%" y="165" width="1.2132%" height="15" fill="rgb(247,98,35)" fg:x="32815" fg:w="847"/><text x="47.2541%" y="175.50"></text></g><g><title>ntdll`RtlFreeHeap (815 samples, 1.17%)</title><rect x="47.0500%" y="149" width="1.1674%" height="15" fill="rgb(247,138,52)" fg:x="32847" fg:w="815"/><text x="47.3000%" y="159.50"></text></g><g><title>ntdll`RtlGetCurrentServiceSessionId (814 samples, 1.17%)</title><rect x="47.0514%" y="133" width="1.1660%" height="15" fill="rgb(213,79,30)" fg:x="32848" fg:w="814"/><text x="47.3014%" y="143.50"></text></g><g><title>ntdll`RtlDeleteBoundaryDescriptor (813 samples, 1.16%)</title><rect x="47.0528%" y="117" width="1.1645%" height="15" fill="rgb(246,177,23)" fg:x="32849" fg:w="813"/><text x="47.3028%" y="127.50"></text></g><g><title>ntdll`RtlTryEnterCriticalSection (803 samples, 1.15%)</title><rect x="47.0672%" y="101" width="1.1502%" height="15" fill="rgb(230,62,27)" fg:x="32859" fg:w="803"/><text x="47.3172%" y="111.50"></text></g><g><title>ntdll`RtlTryEnterCriticalSection (774 samples, 1.11%)</title><rect x="47.1087%" y="85" width="1.1087%" height="15" fill="rgb(216,154,8)" fg:x="32888" fg:w="774"/><text x="47.3587%" y="95.50"></text></g><g><title>ntdll`RtlTryEnterCriticalSection (710 samples, 1.02%)</title><rect x="47.2004%" y="69" width="1.0170%" height="15" fill="rgb(244,35,45)" fg:x="32952" fg:w="710"/><text x="47.4504%" y="79.50"></text></g><g><title>ntdll`RtlTryEnterCriticalSection (703 samples, 1.01%)</title><rect x="47.2104%" y="53" width="1.0070%" height="15" fill="rgb(251,115,12)" fg:x="32959" fg:w="703"/><text x="47.4604%" y="63.50"></text></g><g><title>ntdll`NtFreeVirtualMemory (655 samples, 0.94%)</title><rect x="47.2792%" y="37" width="0.9382%" height="15" fill="rgb(240,54,50)" fg:x="33007" fg:w="655"/><text x="47.5292%" y="47.50"></text></g><g><title>ntdll`RtlDeleteBoundaryDescriptor (7 samples, 0.01%)</title><rect x="52.5289%" y="181" width="0.0100%" height="15" fill="rgb(233,84,52)" fg:x="36672" fg:w="7"/><text x="52.7789%" y="191.50"></text></g><g><title>ntdll`RtlFreeHeap (8,890 samples, 12.73%)</title><rect x="39.9324%" y="213" width="12.7340%" height="15" fill="rgb(207,117,47)" fg:x="27878" fg:w="8890"/><text x="40.1824%" y="223.50">ntdll`RtlFreeHeap</text></g><g><title>ntdll`RtlGetCurrentServiceSessionId (3,106 samples, 4.45%)</title><rect x="48.2174%" y="197" width="4.4490%" height="15" fill="rgb(249,43,39)" fg:x="33662" fg:w="3106"/><text x="48.4674%" y="207.50">ntdll..</text></g><g><title>ntdll`RtlFreeHeap (89 samples, 0.13%)</title><rect x="52.5389%" y="181" width="0.1275%" height="15" fill="rgb(209,38,44)" fg:x="36679" fg:w="89"/><text x="52.7889%" y="191.50"></text></g><g><title>ntdll`RtlAllocateHeap (19 samples, 0.03%)</title><rect x="63.6314%" y="69" width="0.0272%" height="15" fill="rgb(236,212,23)" fg:x="44423" fg:w="19"/><text x="63.8814%" y="79.50"></text></g><g><title>ntdll`RtlAllocateHeap (58 samples, 0.08%)</title><rect x="63.5770%" y="85" width="0.0831%" height="15" fill="rgb(242,79,21)" fg:x="44385" fg:w="58"/><text x="63.8270%" y="95.50"></text></g><g><title>ntdll`RtlAllocateHeap (801 samples, 1.15%)</title><rect x="62.7247%" y="117" width="1.1474%" height="15" fill="rgb(211,96,35)" fg:x="43790" fg:w="801"/><text x="62.9747%" y="127.50"></text></g><g><title>ntdll`RtlAllocateHeap (685 samples, 0.98%)</title><rect x="62.8909%" y="101" width="0.9812%" height="15" fill="rgb(253,215,40)" fg:x="43906" fg:w="685"/><text x="63.1409%" y="111.50"></text></g><g><title>ntdll`RtlUnhandledExceptionFilter (141 samples, 0.20%)</title><rect x="63.6701%" y="85" width="0.2020%" height="15" fill="rgb(211,81,21)" fg:x="44450" fg:w="141"/><text x="63.9201%" y="95.50"></text></g><g><title>ntdll`RtlCopyMemory (24 samples, 0.03%)</title><rect x="63.8721%" y="117" width="0.0344%" height="15" fill="rgb(208,190,38)" fg:x="44591" fg:w="24"/><text x="64.1221%" y="127.50"></text></g><g><title>ntdll`RtlCopyMemory (315 samples, 0.45%)</title><rect x="63.9379%" y="101" width="0.4512%" height="15" fill="rgb(235,213,38)" fg:x="44637" fg:w="315"/><text x="64.1879%" y="111.50"></text></g><g><title>toy`alloc::raw_vec::RawVec&lt;petgraph::graph_impl::NodeIndex&lt;u32&gt;,alloc::alloc::Global&gt;::reserve_for_push&lt;petgraph::graph_impl::NodeIndex (1,784 samples, 2.56%)</title><rect x="61.9842%" y="197" width="2.5554%" height="15" fill="rgb(237,122,38)" fg:x="43273" fg:w="1784"/><text x="62.2342%" y="207.50">to..</text></g><g><title>toy`alloc::raw_vec::finish_grow (1,699 samples, 2.43%)</title><rect x="62.1059%" y="181" width="2.4336%" height="15" fill="rgb(244,218,35)" fg:x="43358" fg:w="1699"/><text x="62.3559%" y="191.50">to..</text></g><g><title>ntdll`RtlReAllocateHeap (1,647 samples, 2.36%)</title><rect x="62.1804%" y="165" width="2.3592%" height="15" fill="rgb(240,68,47)" fg:x="43410" fg:w="1647"/><text x="62.4304%" y="175.50">n..</text></g><g><title>ntdll`RtlReAllocateHeap (1,598 samples, 2.29%)</title><rect x="62.2506%" y="149" width="2.2890%" height="15" fill="rgb(210,16,53)" fg:x="43459" fg:w="1598"/><text x="62.5006%" y="159.50">n..</text></g><g><title>ntdll`RtlReAllocateHeap (1,488 samples, 2.13%)</title><rect x="62.4081%" y="133" width="2.1314%" height="15" fill="rgb(235,124,12)" fg:x="43569" fg:w="1488"/><text x="62.6581%" y="143.50">n..</text></g><g><title>ntdll`RtlFreeHeap (442 samples, 0.63%)</title><rect x="63.9064%" y="117" width="0.6331%" height="15" fill="rgb(224,169,11)" fg:x="44615" fg:w="442"/><text x="64.1564%" y="127.50"></text></g><g><title>ntdll`RtlGetCurrentServiceSessionId (105 samples, 0.15%)</title><rect x="64.3892%" y="101" width="0.1504%" height="15" fill="rgb(250,166,2)" fg:x="44952" fg:w="105"/><text x="64.6392%" y="111.50"></text></g><g><title>ntdll`RtlFreeHeap (10 samples, 0.01%)</title><rect x="64.5252%" y="85" width="0.0143%" height="15" fill="rgb(242,216,29)" fg:x="45047" fg:w="10"/><text x="64.7752%" y="95.50"></text></g><g><title>ntdll`RtlCopyMemory (19 samples, 0.03%)</title><rect x="64.7988%" y="165" width="0.0272%" height="15" fill="rgb(230,116,27)" fg:x="45238" fg:w="19"/><text x="65.0488%" y="175.50"></text></g><g><title>ntdll`RtlFreeHeap (32 samples, 0.05%)</title><rect x="64.7974%" y="181" width="0.0458%" height="15" fill="rgb(228,99,48)" fg:x="45237" fg:w="32"/><text x="65.0474%" y="191.50"></text></g><g><title>ntdll`RtlGetCurrentServiceSessionId (12 samples, 0.02%)</title><rect x="64.8260%" y="165" width="0.0172%" height="15" fill="rgb(253,11,6)" fg:x="45257" fg:w="12"/><text x="65.0760%" y="175.50"></text></g><g><title>ntdll`RtlAllocateHeap (83 samples, 0.12%)</title><rect x="64.9392%" y="133" width="0.1189%" height="15" fill="rgb(247,143,39)" fg:x="45336" fg:w="83"/><text x="65.1892%" y="143.50"></text></g><g><title>toy`hashbrown::raw::inner::RawTable&lt;tuple$&lt;usize,arrayvec::arrayvec::ArrayVec&lt;usize,2&gt; &gt;,allocator_api2::stable::alloc::global::Global&gt;::reserve_rehash&lt;tuple$&lt;usize,arrayvec::arrayvec::ArrayVec&lt;usize,2&gt; &gt;,allocator_api2::stable::alloc::global::Global,hashbrown::map::make_hasher::closure_env$0&lt;usize,arrayvec::arrayvec::ArrayVec&lt;usize,2&gt;,core::hash::BuildHasherDefault (393 samples, 0.56%)</title><rect x="64.5396%" y="197" width="0.5629%" height="15" fill="rgb(236,97,10)" fg:x="45057" fg:w="393"/><text x="64.7896%" y="207.50"></text></g><g><title>toy`hashbrown::raw::inner::RawTableInner::fallible_with_capacity (181 samples, 0.26%)</title><rect x="64.8432%" y="181" width="0.2593%" height="15" fill="rgb(233,208,19)" fg:x="45269" fg:w="181"/><text x="65.0932%" y="191.50"></text></g><g><title>ntdll`RtlAllocateHeap (166 samples, 0.24%)</title><rect x="64.8647%" y="165" width="0.2378%" height="15" fill="rgb(216,164,2)" fg:x="45284" fg:w="166"/><text x="65.1147%" y="175.50"></text></g><g><title>ntdll`RtlAllocateHeap (156 samples, 0.22%)</title><rect x="64.8790%" y="149" width="0.2235%" height="15" fill="rgb(220,129,5)" fg:x="45294" fg:w="156"/><text x="65.1290%" y="159.50"></text></g><g><title>ntdll`RtlUnhandledExceptionFilter (27 samples, 0.04%)</title><rect x="65.0638%" y="133" width="0.0387%" height="15" fill="rgb(242,17,10)" fg:x="45423" fg:w="27"/><text x="65.3138%" y="143.50"></text></g><g><title>ntdll`RtlCopyMemory (44 samples, 0.06%)</title><rect x="65.8359%" y="165" width="0.0630%" height="15" fill="rgb(242,107,0)" fg:x="45962" fg:w="44"/><text x="66.0859%" y="175.50"></text></g><g><title>ntdll`RtlFreeHeap (83 samples, 0.12%)</title><rect x="65.8230%" y="181" width="0.1189%" height="15" fill="rgb(251,28,31)" fg:x="45953" fg:w="83"/><text x="66.0730%" y="191.50"></text></g><g><title>ntdll`RtlGetCurrentServiceSessionId (30 samples, 0.04%)</title><rect x="65.8989%" y="165" width="0.0430%" height="15" fill="rgb(233,223,10)" fg:x="46006" fg:w="30"/><text x="66.1489%" y="175.50"></text></g><g><title>VCRUNTIME140`memset (11 samples, 0.02%)</title><rect x="65.9820%" y="165" width="0.0158%" height="15" fill="rgb(215,21,27)" fg:x="46064" fg:w="11"/><text x="66.2320%" y="175.50"></text></g><g><title>ntdll`RtlAllocateHeap (693 samples, 0.99%)</title><rect x="66.2885%" y="133" width="0.9927%" height="15" fill="rgb(232,23,21)" fg:x="46278" fg:w="693"/><text x="66.5385%" y="143.50"></text></g><g><title>ntdll`NtProtectVirtualMemory (12 samples, 0.02%)</title><rect x="67.2812%" y="101" width="0.0172%" height="15" fill="rgb(244,5,23)" fg:x="46971" fg:w="12"/><text x="67.5312%" y="111.50"></text></g><g><title>ntdll`NtAllocateVirtualMemory (14 samples, 0.02%)</title><rect x="67.3299%" y="53" width="0.0201%" height="15" fill="rgb(226,81,46)" fg:x="47005" fg:w="14"/><text x="67.5799%" y="63.50"></text></g><g><title>ntdll`RtlAllocateHeap (44 samples, 0.06%)</title><rect x="67.2984%" y="101" width="0.0630%" height="15" fill="rgb(247,70,30)" fg:x="46983" fg:w="44"/><text x="67.5484%" y="111.50"></text></g><g><title>ntdll`RtlAllocateHeap (44 samples, 0.06%)</title><rect x="67.2984%" y="85" width="0.0630%" height="15" fill="rgb(212,68,19)" fg:x="46983" fg:w="44"/><text x="67.5484%" y="95.50"></text></g><g><title>ntdll`RtlTryEnterCriticalSection (22 samples, 0.03%)</title><rect x="67.3299%" y="69" width="0.0315%" height="15" fill="rgb(240,187,13)" fg:x="47005" fg:w="22"/><text x="67.5799%" y="79.50"></text></g><g><title>ntdll`RtlTryEnterCriticalSection (8 samples, 0.01%)</title><rect x="67.3499%" y="53" width="0.0115%" height="15" fill="rgb(223,113,26)" fg:x="47019" fg:w="8"/><text x="67.5999%" y="63.50"></text></g><g><title>ntdll`RtlEnumerateGenericTableWithoutSplayingAvl (60 samples, 0.09%)</title><rect x="67.2812%" y="133" width="0.0859%" height="15" fill="rgb(206,192,2)" fg:x="46971" fg:w="60"/><text x="67.5312%" y="143.50"></text></g><g><title>ntdll`RtlEnumerateGenericTableWithoutSplayingAvl (60 samples, 0.09%)</title><rect x="67.2812%" y="117" width="0.0859%" height="15" fill="rgb(241,108,4)" fg:x="46971" fg:w="60"/><text x="67.5312%" y="127.50"></text></g><g><title>toy`aeg::critical_cycles::IncompleteMinimalCycle (10,328 samples, 14.79%)</title><rect x="52.6664%" y="213" width="14.7938%" height="15" fill="rgb(247,173,49)" fg:x="36768" fg:w="10328"/><text x="52.9164%" y="223.50">toy`aeg::critical_cycle..</text></g><g><title>toy`hashbrown::raw::inner::RawTable&lt;tuple$&lt;usize,arrayvec::arrayvec::ArrayVec&lt;usize,3&gt; &gt;,allocator_api2::stable::alloc::global::Global&gt;::reserve_rehash&lt;tuple$&lt;usize,arrayvec::arrayvec::ArrayVec&lt;usize,3&gt; &gt;,allocator_api2::stable::alloc::global::Global,hashbrown::map::make_hasher::closure_env$0&lt;usize,arrayvec::arrayvec::ArrayVec&lt;usize,3&gt;,core::hash::BuildHasherDefault (1,646 samples, 2.36%)</title><rect x="65.1025%" y="197" width="2.3577%" height="15" fill="rgb(224,114,35)" fg:x="45450" fg:w="1646"/><text x="65.3525%" y="207.50">t..</text></g><g><title>toy`hashbrown::raw::inner::RawTableInner::fallible_with_capacity (1,060 samples, 1.52%)</title><rect x="65.9419%" y="181" width="1.5183%" height="15" fill="rgb(245,159,27)" fg:x="46036" fg:w="1060"/><text x="66.1919%" y="191.50"></text></g><g><title>ntdll`RtlAllocateHeap (1,021 samples, 1.46%)</title><rect x="65.9977%" y="165" width="1.4625%" height="15" fill="rgb(245,172,44)" fg:x="46075" fg:w="1021"/><text x="66.2477%" y="175.50"></text></g><g><title>ntdll`RtlAllocateHeap (972 samples, 1.39%)</title><rect x="66.0679%" y="149" width="1.3923%" height="15" fill="rgb(236,23,11)" fg:x="46124" fg:w="972"/><text x="66.3179%" y="159.50"></text></g><g><title>ntdll`RtlUnhandledExceptionFilter (62 samples, 0.09%)</title><rect x="67.3714%" y="133" width="0.0888%" height="15" fill="rgb(205,117,38)" fg:x="47034" fg:w="62"/><text x="67.6214%" y="143.50"></text></g><g><title>VCRUNTIME140`memmove (222 samples, 0.32%)</title><rect x="70.1087%" y="197" width="0.3180%" height="15" fill="rgb(237,72,25)" fg:x="48945" fg:w="222"/><text x="70.3587%" y="207.50"></text></g><g><title>ntdll`RtlAllocateHeap (7 samples, 0.01%)</title><rect x="82.3256%" y="149" width="0.0100%" height="15" fill="rgb(244,70,9)" fg:x="57474" fg:w="7"/><text x="82.5756%" y="159.50"></text></g><g><title>ntdll`RtlAllocateHeap (3,241 samples, 4.64%)</title><rect x="77.6947%" y="165" width="4.6424%" height="15" fill="rgb(217,125,39)" fg:x="54241" fg:w="3241"/><text x="77.9447%" y="175.50">ntdll..</text></g><g><title>ntdll`NtProtectVirtualMemory (39 samples, 0.06%)</title><rect x="82.3385%" y="133" width="0.0559%" height="15" fill="rgb(235,36,10)" fg:x="57483" fg:w="39"/><text x="82.5885%" y="143.50"></text></g><g><title>ntdll`NtAllocateVirtualMemory (38 samples, 0.05%)</title><rect x="82.5649%" y="85" width="0.0544%" height="15" fill="rgb(251,123,47)" fg:x="57641" fg:w="38"/><text x="82.8149%" y="95.50"></text></g><g><title>ntdll`NtAllocateVirtualMemory (27 samples, 0.04%)</title><rect x="82.6350%" y="69" width="0.0387%" height="15" fill="rgb(221,13,13)" fg:x="57690" fg:w="27"/><text x="82.8850%" y="79.50"></text></g><g><title>ntdll`RtlAllocateHeap (216 samples, 0.31%)</title><rect x="82.3944%" y="133" width="0.3094%" height="15" fill="rgb(238,131,9)" fg:x="57522" fg:w="216"/><text x="82.6444%" y="143.50"></text></g><g><title>ntdll`RtlAllocateHeap (216 samples, 0.31%)</title><rect x="82.3944%" y="117" width="0.3094%" height="15" fill="rgb(211,50,8)" fg:x="57522" fg:w="216"/><text x="82.6444%" y="127.50"></text></g><g><title>ntdll`RtlTryEnterCriticalSection (97 samples, 0.14%)</title><rect x="82.5649%" y="101" width="0.1389%" height="15" fill="rgb(245,182,24)" fg:x="57641" fg:w="97"/><text x="82.8149%" y="111.50"></text></g><g><title>ntdll`RtlTryEnterCriticalSection (59 samples, 0.08%)</title><rect x="82.6193%" y="85" width="0.0845%" height="15" fill="rgb(242,14,37)" fg:x="57679" fg:w="59"/><text x="82.8693%" y="95.50"></text></g><g><title>ntdll`RtlTryEnterCriticalSection (21 samples, 0.03%)</title><rect x="82.6737%" y="69" width="0.0301%" height="15" fill="rgb(246,228,12)" fg:x="57717" fg:w="21"/><text x="82.9237%" y="79.50"></text></g><g><title>ntdll`RtlEnumerateGenericTableWithoutSplayingAvl (270 samples, 0.39%)</title><rect x="82.3371%" y="165" width="0.3867%" height="15" fill="rgb(213,55,15)" fg:x="57482" fg:w="270"/><text x="82.5871%" y="175.50"></text></g><g><title>ntdll`RtlEnumerateGenericTableWithoutSplayingAvl (270 samples, 0.39%)</title><rect x="82.3371%" y="149" width="0.3867%" height="15" fill="rgb(209,9,3)" fg:x="57482" fg:w="270"/><text x="82.5871%" y="159.50"></text></g><g><title>ntdll`RtlReAllocateHeap (13 samples, 0.02%)</title><rect x="82.7052%" y="133" width="0.0186%" height="15" fill="rgb(230,59,30)" fg:x="57739" fg:w="13"/><text x="82.9552%" y="143.50"></text></g><g><title>ntdll`RtlReAllocateHeap (13 samples, 0.02%)</title><rect x="82.7052%" y="117" width="0.0186%" height="15" fill="rgb(209,121,21)" fg:x="57739" fg:w="13"/><text x="82.9552%" y="127.50"></text></g><g><title>ntdll`RtlReAllocateHeap (13 samples, 0.02%)</title><rect x="82.7052%" y="101" width="0.0186%" height="15" fill="rgb(220,109,13)" fg:x="57739" fg:w="13"/><text x="82.9552%" y="111.50"></text></g><g><title>ntdll`RtlTryEnterCriticalSection (9 samples, 0.01%)</title><rect x="82.7110%" y="85" width="0.0129%" height="15" fill="rgb(232,18,1)" fg:x="57743" fg:w="9"/><text x="82.9610%" y="95.50"></text></g><g><title>ntdll`RtlAllocateHeap (9,436 samples, 13.52%)</title><rect x="70.4267%" y="197" width="13.5161%" height="15" fill="rgb(215,41,42)" fg:x="49167" fg:w="9436"/><text x="70.6767%" y="207.50">ntdll`RtlAllocateHeap</text></g><g><title>ntdll`RtlAllocateHeap (8,430 samples, 12.08%)</title><rect x="71.8677%" y="181" width="12.0751%" height="15" fill="rgb(224,123,36)" fg:x="50173" fg:w="8430"/><text x="72.1177%" y="191.50">ntdll`RtlAllocateH..</text></g><g><title>ntdll`RtlUnhandledExceptionFilter (845 samples, 1.21%)</title><rect x="82.7324%" y="165" width="1.2104%" height="15" fill="rgb(240,125,3)" fg:x="57758" fg:w="845"/><text x="82.9824%" y="175.50"></text></g><g><title>toy`aeg::critical_cycles::impl$14::clone (11,525 samples, 16.51%)</title><rect x="67.4602%" y="213" width="16.5084%" height="15" fill="rgb(205,98,50)" fg:x="47096" fg:w="11525"/><text x="67.7102%" y="223.50">toy`aeg::critical_cycles:..</text></g><g><title>toy`memcpy (18 samples, 0.03%)</title><rect x="83.9428%" y="197" width="0.0258%" height="15" fill="rgb(205,185,37)" fg:x="58603" fg:w="18"/><text x="84.1928%" y="207.50"></text></g><g><title>ntdll`RtlAllocateHeap (42 samples, 0.06%)</title><rect x="86.0785%" y="101" width="0.0602%" height="15" fill="rgb(238,207,15)" fg:x="60094" fg:w="42"/><text x="86.3285%" y="111.50"></text></g><g><title>ntdll`RtlEnumerateGenericTableWithoutSplayingAvl (9 samples, 0.01%)</title><rect x="86.1387%" y="101" width="0.0129%" height="15" fill="rgb(213,199,42)" fg:x="60136" fg:w="9"/><text x="86.3887%" y="111.50"></text></g><g><title>ntdll`RtlEnumerateGenericTableWithoutSplayingAvl (8 samples, 0.01%)</title><rect x="86.1401%" y="85" width="0.0115%" height="15" fill="rgb(235,201,11)" fg:x="60137" fg:w="8"/><text x="86.3901%" y="95.50"></text></g><g><title>ntdll`RtlAllocateHeap (1,089 samples, 1.56%)</title><rect x="84.8553%" y="133" width="1.5599%" height="15" fill="rgb(207,46,11)" fg:x="59240" fg:w="1089"/><text x="85.1053%" y="143.50"></text></g><g><title>ntdll`RtlAllocateHeap (921 samples, 1.32%)</title><rect x="85.0959%" y="117" width="1.3192%" height="15" fill="rgb(241,35,35)" fg:x="59408" fg:w="921"/><text x="85.3459%" y="127.50"></text></g><g><title>ntdll`RtlUnhandledExceptionFilter (184 samples, 0.26%)</title><rect x="86.1516%" y="101" width="0.2636%" height="15" fill="rgb(243,32,47)" fg:x="60145" fg:w="184"/><text x="86.4016%" y="111.50"></text></g><g><title>ntdll`RtlCopyMemory (22 samples, 0.03%)</title><rect x="86.4151%" y="133" width="0.0315%" height="15" fill="rgb(247,202,23)" fg:x="60329" fg:w="22"/><text x="86.6651%" y="143.50"></text></g><g><title>ntdll`RtlCopyMemory (321 samples, 0.46%)</title><rect x="86.5125%" y="117" width="0.4598%" height="15" fill="rgb(219,102,11)" fg:x="60397" fg:w="321"/><text x="86.7625%" y="127.50"></text></g><g><title>ntdll`RtlReAllocateHeap (1,797 samples, 2.57%)</title><rect x="84.5573%" y="149" width="2.5740%" height="15" fill="rgb(243,110,44)" fg:x="59032" fg:w="1797"/><text x="84.8073%" y="159.50">nt..</text></g><g><title>ntdll`RtlFreeHeap (478 samples, 0.68%)</title><rect x="86.4467%" y="133" width="0.6847%" height="15" fill="rgb(222,74,54)" fg:x="60351" fg:w="478"/><text x="86.6967%" y="143.50"></text></g><g><title>ntdll`RtlGetCurrentServiceSessionId (111 samples, 0.16%)</title><rect x="86.9723%" y="117" width="0.1590%" height="15" fill="rgb(216,99,12)" fg:x="60718" fg:w="111"/><text x="87.2223%" y="127.50"></text></g><g><title>ntdll`RtlFreeHeap (13 samples, 0.02%)</title><rect x="87.1127%" y="101" width="0.0186%" height="15" fill="rgb(226,22,26)" fg:x="60816" fg:w="13"/><text x="87.3627%" y="111.50"></text></g><g><title>toy`alloc::raw_vec::RawVec&lt;petgraph::graph_impl::NodeIndex&lt;u32&gt;,alloc::alloc::Global&gt;::reserve_for_push&lt;petgraph::graph_impl::NodeIndex (2,212 samples, 3.17%)</title><rect x="83.9700%" y="213" width="3.1685%" height="15" fill="rgb(217,163,10)" fg:x="58622" fg:w="2212"/><text x="84.2200%" y="223.50">toy..</text></g><g><title>toy`alloc::raw_vec::finish_grow (2,109 samples, 3.02%)</title><rect x="84.1176%" y="197" width="3.0209%" height="15" fill="rgb(213,25,53)" fg:x="58725" fg:w="2109"/><text x="84.3676%" y="207.50">toy..</text></g><g><title>ntdll`RtlReAllocateHeap (2,008 samples, 2.88%)</title><rect x="84.2622%" y="181" width="2.8763%" height="15" fill="rgb(252,105,26)" fg:x="58826" fg:w="2008"/><text x="84.5122%" y="191.50">nt..</text></g><g><title>ntdll`RtlReAllocateHeap (1,924 samples, 2.76%)</title><rect x="84.3826%" y="165" width="2.7559%" height="15" fill="rgb(220,39,43)" fg:x="58910" fg:w="1924"/><text x="84.6326%" y="175.50">nt..</text></g><g><title>ntdll`RtlAllocateHeap (115 samples, 0.16%)</title><rect x="87.3175%" y="181" width="0.1647%" height="15" fill="rgb(229,68,48)" fg:x="60959" fg:w="115"/><text x="87.5675%" y="191.50"></text></g><g><title>ntdll`RtlAllocateHeap (99 samples, 0.14%)</title><rect x="87.3405%" y="165" width="0.1418%" height="15" fill="rgb(252,8,32)" fg:x="60975" fg:w="99"/><text x="87.5905%" y="175.50"></text></g><g><title>ntdll`RtlUnhandledExceptionFilter (19 samples, 0.03%)</title><rect x="87.4551%" y="149" width="0.0272%" height="15" fill="rgb(223,20,43)" fg:x="61055" fg:w="19"/><text x="87.7051%" y="159.50"></text></g><g><title>ntdll`RtlAllocateHeap (10 samples, 0.01%)</title><rect x="88.1383%" y="85" width="0.0143%" height="15" fill="rgb(229,81,49)" fg:x="61532" fg:w="10"/><text x="88.3883%" y="95.50"></text></g><g><title>ntdll`RtlAllocateHeap (26 samples, 0.04%)</title><rect x="88.1168%" y="101" width="0.0372%" height="15" fill="rgb(236,28,36)" fg:x="61517" fg:w="26"/><text x="88.3668%" y="111.50"></text></g><g><title>ntdll`RtlAllocateHeap (421 samples, 0.60%)</title><rect x="87.7043%" y="133" width="0.6030%" height="15" fill="rgb(249,185,26)" fg:x="61229" fg:w="421"/><text x="87.9543%" y="143.50"></text></g><g><title>ntdll`RtlAllocateHeap (371 samples, 0.53%)</title><rect x="87.7759%" y="117" width="0.5314%" height="15" fill="rgb(249,174,33)" fg:x="61279" fg:w="371"/><text x="88.0259%" y="127.50"></text></g><g><title>ntdll`RtlUnhandledExceptionFilter (104 samples, 0.15%)</title><rect x="88.1584%" y="101" width="0.1490%" height="15" fill="rgb(233,201,37)" fg:x="61546" fg:w="104"/><text x="88.4084%" y="111.50"></text></g><g><title>ntdll`RtlCopyMemory (26 samples, 0.04%)</title><rect x="88.3073%" y="133" width="0.0372%" height="15" fill="rgb(221,78,26)" fg:x="61650" fg:w="26"/><text x="88.5573%" y="143.50"></text></g><g><title>ntdll`RtlCopyMemory (96 samples, 0.14%)</title><rect x="88.3632%" y="117" width="0.1375%" height="15" fill="rgb(250,127,30)" fg:x="61689" fg:w="96"/><text x="88.6132%" y="127.50"></text></g><g><title>toy`alloc::raw_vec::RawVec&lt;petgraph::scored::MinScored&lt;i32,petgraph::graph_impl::NodeIndex&lt;u32&gt; &gt;,alloc::alloc::Global&gt;::reserve_for_push&lt;petgraph::scored::MinScored&lt;i32,petgraph::graph_impl::NodeIndex (984 samples, 1.41%)</title><rect x="87.1385%" y="213" width="1.4095%" height="15" fill="rgb(230,49,44)" fg:x="60834" fg:w="984"/><text x="87.3885%" y="223.50"></text></g><g><title>toy`alloc::raw_vec::finish_grow (938 samples, 1.34%)</title><rect x="87.2044%" y="197" width="1.3436%" height="15" fill="rgb(229,67,23)" fg:x="60880" fg:w="938"/><text x="87.4544%" y="207.50"></text></g><g><title>ntdll`RtlReAllocateHeap (744 samples, 1.07%)</title><rect x="87.4823%" y="181" width="1.0657%" height="15" fill="rgb(249,83,47)" fg:x="61074" fg:w="744"/><text x="87.7323%" y="191.50"></text></g><g><title>ntdll`RtlReAllocateHeap (717 samples, 1.03%)</title><rect x="87.5209%" y="165" width="1.0270%" height="15" fill="rgb(215,43,3)" fg:x="61101" fg:w="717"/><text x="87.7709%" y="175.50"></text></g><g><title>ntdll`RtlReAllocateHeap (672 samples, 0.96%)</title><rect x="87.5854%" y="149" width="0.9626%" height="15" fill="rgb(238,154,13)" fg:x="61146" fg:w="672"/><text x="87.8354%" y="159.50"></text></g><g><title>ntdll`RtlFreeHeap (142 samples, 0.20%)</title><rect x="88.3446%" y="133" width="0.2034%" height="15" fill="rgb(219,56,2)" fg:x="61676" fg:w="142"/><text x="88.5946%" y="143.50"></text></g><g><title>ntdll`RtlGetCurrentServiceSessionId (33 samples, 0.05%)</title><rect x="88.5007%" y="117" width="0.0473%" height="15" fill="rgb(233,0,4)" fg:x="61785" fg:w="33"/><text x="88.7507%" y="127.50"></text></g><g><title>ntdll`RtlAllocateHeap (76 samples, 0.11%)</title><rect x="88.5580%" y="197" width="0.1089%" height="15" fill="rgb(235,30,7)" fg:x="61825" fg:w="76"/><text x="88.8080%" y="207.50"></text></g><g><title>ntdll`RtlAllocateHeap (64 samples, 0.09%)</title><rect x="88.5752%" y="181" width="0.0917%" height="15" fill="rgb(250,79,13)" fg:x="61837" fg:w="64"/><text x="88.8252%" y="191.50"></text></g><g><title>ntdll`RtlUnhandledExceptionFilter (11 samples, 0.02%)</title><rect x="88.6511%" y="165" width="0.0158%" height="15" fill="rgb(211,146,34)" fg:x="61890" fg:w="11"/><text x="88.9011%" y="175.50"></text></g><g><title>ntdll`RtlAllocateHeap (7 samples, 0.01%)</title><rect x="88.7442%" y="117" width="0.0100%" height="15" fill="rgb(228,22,38)" fg:x="61955" fg:w="7"/><text x="88.9942%" y="127.50"></text></g><g><title>ntdll`RtlAllocateHeap (44 samples, 0.06%)</title><rect x="88.6984%" y="149" width="0.0630%" height="15" fill="rgb(235,168,5)" fg:x="61923" fg:w="44"/><text x="88.9484%" y="159.50"></text></g><g><title>ntdll`RtlAllocateHeap (37 samples, 0.05%)</title><rect x="88.7084%" y="133" width="0.0530%" height="15" fill="rgb(221,155,16)" fg:x="61930" fg:w="37"/><text x="88.9584%" y="143.50"></text></g><g><title>ntdll`RtlCopyMemory (12 samples, 0.02%)</title><rect x="88.7614%" y="149" width="0.0172%" height="15" fill="rgb(215,215,53)" fg:x="61967" fg:w="12"/><text x="89.0114%" y="159.50"></text></g><g><title>ntdll`RtlCopyMemory (8 samples, 0.01%)</title><rect x="88.7786%" y="133" width="0.0115%" height="15" fill="rgb(223,4,10)" fg:x="61979" fg:w="8"/><text x="89.0286%" y="143.50"></text></g><g><title>toy`alloc::raw_vec::finish_grow (172 samples, 0.25%)</title><rect x="88.5480%" y="213" width="0.2464%" height="15" fill="rgb(234,103,6)" fg:x="61818" fg:w="172"/><text x="88.7980%" y="223.50"></text></g><g><title>ntdll`RtlReAllocateHeap (89 samples, 0.13%)</title><rect x="88.6669%" y="197" width="0.1275%" height="15" fill="rgb(227,97,0)" fg:x="61901" fg:w="89"/><text x="88.9169%" y="207.50"></text></g><g><title>ntdll`RtlReAllocateHeap (84 samples, 0.12%)</title><rect x="88.6740%" y="181" width="0.1203%" height="15" fill="rgb(234,150,53)" fg:x="61906" fg:w="84"/><text x="88.9240%" y="191.50"></text></g><g><title>ntdll`RtlReAllocateHeap (75 samples, 0.11%)</title><rect x="88.6869%" y="165" width="0.1074%" height="15" fill="rgb(228,201,54)" fg:x="61915" fg:w="75"/><text x="88.9369%" y="175.50"></text></g><g><title>ntdll`RtlFreeHeap (11 samples, 0.02%)</title><rect x="88.7786%" y="149" width="0.0158%" height="15" fill="rgb(222,22,37)" fg:x="61979" fg:w="11"/><text x="89.0286%" y="159.50"></text></g><g><title>ntdll`RtlCopyMemory (18 samples, 0.03%)</title><rect x="88.7972%" y="133" width="0.0258%" height="15" fill="rgb(237,53,32)" fg:x="61992" fg:w="18"/><text x="89.0472%" y="143.50"></text></g><g><title>toy`alloc::raw_vec::impl$2::reserve::do_reserve_and_handle (22 samples, 0.03%)</title><rect x="88.7944%" y="213" width="0.0315%" height="15" fill="rgb(233,25,53)" fg:x="61990" fg:w="22"/><text x="89.0444%" y="223.50"></text></g><g><title>toy`alloc::raw_vec::finish_grow (22 samples, 0.03%)</title><rect x="88.7944%" y="197" width="0.0315%" height="15" fill="rgb(210,40,34)" fg:x="61990" fg:w="22"/><text x="89.0444%" y="207.50"></text></g><g><title>ntdll`RtlReAllocateHeap (21 samples, 0.03%)</title><rect x="88.7958%" y="181" width="0.0301%" height="15" fill="rgb(241,220,44)" fg:x="61991" fg:w="21"/><text x="89.0458%" y="191.50"></text></g><g><title>ntdll`RtlReAllocateHeap (21 samples, 0.03%)</title><rect x="88.7958%" y="165" width="0.0301%" height="15" fill="rgb(235,28,35)" fg:x="61991" fg:w="21"/><text x="89.0458%" y="175.50"></text></g><g><title>ntdll`RtlReAllocateHeap (21 samples, 0.03%)</title><rect x="88.7958%" y="149" width="0.0301%" height="15" fill="rgb(210,56,17)" fg:x="61991" fg:w="21"/><text x="89.0458%" y="159.50"></text></g><g><title>KERNEL32`HeapFree (19 samples, 0.03%)</title><rect x="92.3940%" y="197" width="0.0272%" height="15" fill="rgb(224,130,29)" fg:x="64503" fg:w="19"/><text x="92.6440%" y="207.50"></text></g><g><title>VCRUNTIME140`memset (67 samples, 0.10%)</title><rect x="92.4212%" y="197" width="0.0960%" height="15" fill="rgb(235,212,8)" fg:x="64522" fg:w="67"/><text x="92.6712%" y="207.50"></text></g><g><title>ntdll`RtlAllocateHeap (50 samples, 0.07%)</title><rect x="93.9997%" y="149" width="0.0716%" height="15" fill="rgb(223,33,50)" fg:x="65624" fg:w="50"/><text x="94.2497%" y="159.50"></text></g><g><title>ntdll`RtlAllocateHeap (94 samples, 0.13%)</title><rect x="93.9381%" y="165" width="0.1346%" height="15" fill="rgb(219,149,13)" fg:x="65581" fg:w="94"/><text x="94.1881%" y="175.50"></text></g><g><title>ntdll`RtlAllocateHeap (1,328 samples, 1.90%)</title><rect x="92.5172%" y="197" width="1.9022%" height="15" fill="rgb(250,156,29)" fg:x="64589" fg:w="1328"/><text x="92.7672%" y="207.50">n..</text></g><g><title>ntdll`RtlAllocateHeap (1,098 samples, 1.57%)</title><rect x="92.8466%" y="181" width="1.5728%" height="15" fill="rgb(216,193,19)" fg:x="64819" fg:w="1098"/><text x="93.0966%" y="191.50"></text></g><g><title>ntdll`RtlUnhandledExceptionFilter (236 samples, 0.34%)</title><rect x="94.0813%" y="165" width="0.3380%" height="15" fill="rgb(216,135,14)" fg:x="65681" fg:w="236"/><text x="94.3313%" y="175.50"></text></g><g><title>ntdll`RtlCopyMemory (348 samples, 0.50%)</title><rect x="94.4752%" y="181" width="0.4985%" height="15" fill="rgb(241,47,5)" fg:x="65956" fg:w="348"/><text x="94.7252%" y="191.50"></text></g><g><title>ntdll`RtlFreeHeap (484 samples, 0.69%)</title><rect x="94.4194%" y="197" width="0.6933%" height="15" fill="rgb(233,42,35)" fg:x="65917" fg:w="484"/><text x="94.6694%" y="207.50"></text></g><g><title>ntdll`RtlGetCurrentServiceSessionId (97 samples, 0.14%)</title><rect x="94.9737%" y="181" width="0.1389%" height="15" fill="rgb(231,13,6)" fg:x="66304" fg:w="97"/><text x="95.2237%" y="191.50"></text></g><g><title>ntdll`RtlFreeHeap (13 samples, 0.02%)</title><rect x="95.0940%" y="165" width="0.0186%" height="15" fill="rgb(207,181,40)" fg:x="66388" fg:w="13"/><text x="95.3440%" y="175.50"></text></g><g><title>toy`indexmap::map::IndexMap&lt;petgraph::graph_impl::NodeIndex&lt;u32&gt;,tuple$&lt;&gt;,std::hash::random::RandomState&gt;::hash&lt;petgraph::graph_impl::NodeIndex&lt;u32&gt;,tuple$&lt;&gt;,std::hash::random::RandomState,petgraph::graph_impl::NodeIndex (1,889 samples, 2.71%)</title><rect x="95.1127%" y="197" width="2.7058%" height="15" fill="rgb(254,173,49)" fg:x="66401" fg:w="1889"/><text x="95.3627%" y="207.50">to..</text></g><g><title>toy`core::hash::sip::impl$5::write (349 samples, 0.50%)</title><rect x="97.3186%" y="181" width="0.4999%" height="15" fill="rgb(221,1,38)" fg:x="67941" fg:w="349"/><text x="97.5686%" y="191.50"></text></g><g><title>toy`hashbrown::raw::RawTable&lt;tuple$&lt;petgraph::graph_impl::NodeIndex&lt;u32&gt;,i32&gt;,alloc::alloc::Global&gt;::reserve_rehash&lt;tuple$&lt;petgraph::graph_impl::NodeIndex&lt;u32&gt;,i32&gt;,alloc::alloc::Global,hashbrown::map::make_hasher::closure_env$0&lt;petgraph::graph_impl::NodeIndex (6,280 samples, 9.00%)</title><rect x="88.8259%" y="213" width="8.9955%" height="15" fill="rgb(206,124,46)" fg:x="62012" fg:w="6280"/><text x="89.0759%" y="223.50">toy`hashbrown..</text></g><g><title>toy`hashbrown::raw::inner::RawTable&lt;tuple$&lt;aeg::critical_cycles::IncompleteMinimalCycle&lt;usize,usize&gt;,tuple$&lt;&gt; &gt;,allocator_api2::stable::alloc::global::Global&gt;::reserve_rehash&lt;tuple$&lt;aeg::critical_cycles::IncompleteMinimalCycle&lt;usize,usize&gt;,tuple$&lt;&gt; &gt;,allocator_api2::stable::alloc::global::Global,hashbrown::map::make_hasher::closure_env$0&lt;aeg::critical_cycles::IncompleteMinimalCycle&lt;usize,usize&gt;,tuple$&lt;&gt;,core::hash::BuildHasherDefault (724 samples, 1.04%)</title><rect x="97.8213%" y="213" width="1.0371%" height="15" fill="rgb(249,21,11)" fg:x="68292" fg:w="724"/><text x="98.0713%" y="223.50"></text></g><g><title>toy`indexmap::map::IndexMap&lt;petgraph::graph_impl::NodeIndex&lt;u32&gt;,tuple$&lt;&gt;,std::hash::random::RandomState&gt;::hash&lt;petgraph::graph_impl::NodeIndex&lt;u32&gt;,tuple$&lt;&gt;,std::hash::random::RandomState,petgraph::graph_impl::NodeIndex (65 samples, 0.09%)</title><rect x="98.8584%" y="213" width="0.0931%" height="15" fill="rgb(222,201,40)" fg:x="69016" fg:w="65"/><text x="99.1084%" y="223.50"></text></g><g><title>toy`core::hash::sip::impl$5::write (16 samples, 0.02%)</title><rect x="98.9286%" y="197" width="0.0229%" height="15" fill="rgb(235,61,29)" fg:x="69065" fg:w="16"/><text x="99.1786%" y="207.50"></text></g><g><title>toy`aeg::critical_cycles::critical_cycles (68,311 samples, 97.85%)</title><rect x="1.1044%" y="229" width="97.8485%" height="15" fill="rgb(219,207,3)" fg:x="771" fg:w="68311"/><text x="1.3544%" y="239.50">toy`aeg::critical_cycles::critical_cycles</text></g><g><title>ntdll`RtlCopyMemory (23 samples, 0.03%)</title><rect x="98.9558%" y="149" width="0.0329%" height="15" fill="rgb(222,56,46)" fg:x="69084" fg:w="23"/><text x="99.2058%" y="159.50"></text></g><g><title>toy`alloc::raw_vec::impl$2::reserve::do_reserve_and_handle (26 samples, 0.04%)</title><rect x="98.9543%" y="229" width="0.0372%" height="15" fill="rgb(239,76,54)" fg:x="69083" fg:w="26"/><text x="99.2043%" y="239.50"></text></g><g><title>toy`alloc::raw_vec::finish_grow (26 samples, 0.04%)</title><rect x="98.9543%" y="213" width="0.0372%" height="15" fill="rgb(231,124,27)" fg:x="69083" fg:w="26"/><text x="99.2043%" y="223.50"></text></g><g><title>ntdll`RtlReAllocateHeap (26 samples, 0.04%)</title><rect x="98.9543%" y="197" width="0.0372%" height="15" fill="rgb(249,195,6)" fg:x="69083" fg:w="26"/><text x="99.2043%" y="207.50"></text></g><g><title>ntdll`RtlReAllocateHeap (26 samples, 0.04%)</title><rect x="98.9543%" y="181" width="0.0372%" height="15" fill="rgb(237,174,47)" fg:x="69083" fg:w="26"/><text x="99.2043%" y="191.50"></text></g><g><title>ntdll`RtlReAllocateHeap (26 samples, 0.04%)</title><rect x="98.9543%" y="165" width="0.0372%" height="15" fill="rgb(206,201,31)" fg:x="69083" fg:w="26"/><text x="99.2043%" y="175.50"></text></g><g><title>VCRUNTIME140`memmove (14 samples, 0.02%)</title><rect x="99.0790%" y="213" width="0.0201%" height="15" fill="rgb(231,57,52)" fg:x="69170" fg:w="14"/><text x="99.3290%" y="223.50"></text></g><g><title>toy`serde_json::ser::format_escaped_str&lt;ref_mut$&lt;alloc::vec::Vec (61 samples, 0.09%)</title><rect x="99.0131%" y="229" width="0.0874%" height="15" fill="rgb(248,177,22)" fg:x="69124" fg:w="61"/><text x="99.2631%" y="239.50"></text></g><g><title>toy`core::slice::memchr::memrchr (8 samples, 0.01%)</title><rect x="99.1033%" y="165" width="0.0115%" height="15" fill="rgb(215,211,37)" fg:x="69187" fg:w="8"/><text x="99.3533%" y="175.50"></text></g><g><title>KERNELBASE`GetConsoleMode (251 samples, 0.36%)</title><rect x="99.1248%" y="117" width="0.3595%" height="15" fill="rgb(241,128,51)" fg:x="69202" fg:w="251"/><text x="99.3748%" y="127.50"></text></g><g><title>KERNELBASE`GetConsoleScreenBufferInfoEx (249 samples, 0.36%)</title><rect x="99.1277%" y="101" width="0.3567%" height="15" fill="rgb(227,165,31)" fg:x="69204" fg:w="249"/><text x="99.3777%" y="111.50"></text></g><g><title>KERNELBASE`GetConsoleScreenBufferInfoEx (247 samples, 0.35%)</title><rect x="99.1305%" y="85" width="0.3538%" height="15" fill="rgb(228,167,24)" fg:x="69206" fg:w="247"/><text x="99.3805%" y="95.50"></text></g><g><title>ntdll`NtDeviceIoControlFile (241 samples, 0.35%)</title><rect x="99.1391%" y="69" width="0.3452%" height="15" fill="rgb(228,143,12)" fg:x="69212" fg:w="241"/><text x="99.3891%" y="79.50"></text></g><g><title>KERNELBASE`GetStdHandle (8 samples, 0.01%)</title><rect x="99.4843%" y="117" width="0.0115%" height="15" fill="rgb(249,149,8)" fg:x="69453" fg:w="8"/><text x="99.7343%" y="127.50"></text></g><g><title>toy`core::str::converts::from_utf8 (7 samples, 0.01%)</title><rect x="99.4958%" y="117" width="0.0100%" height="15" fill="rgb(243,35,44)" fg:x="69461" fg:w="7"/><text x="99.7458%" y="127.50"></text></g><g><title>KERNELBASE`MultiByteToWideChar (80 samples, 0.11%)</title><rect x="99.5101%" y="101" width="0.1146%" height="15" fill="rgb(246,89,9)" fg:x="69471" fg:w="80"/><text x="99.7601%" y="111.50"></text></g><g><title>ntdll`RtlUTF8ToUnicodeN (76 samples, 0.11%)</title><rect x="99.5158%" y="85" width="0.1089%" height="15" fill="rgb(233,213,13)" fg:x="69475" fg:w="76"/><text x="99.7658%" y="95.50"></text></g><g><title>KERNELBASE`WriteConsoleW (227 samples, 0.33%)</title><rect x="99.6247%" y="101" width="0.3252%" height="15" fill="rgb(233,141,41)" fg:x="69551" fg:w="227"/><text x="99.8747%" y="111.50"></text></g><g><title>KERNELBASE`WriteConsoleW (227 samples, 0.33%)</title><rect x="99.6247%" y="85" width="0.3252%" height="15" fill="rgb(239,167,4)" fg:x="69551" fg:w="227"/><text x="99.8747%" y="95.50"></text></g><g><title>KERNELBASE`GetConsoleScreenBufferInfoEx (226 samples, 0.32%)</title><rect x="99.6261%" y="69" width="0.3237%" height="15" fill="rgb(209,217,16)" fg:x="69552" fg:w="226"/><text x="99.8761%" y="79.50"></text></g><g><title>ntdll`NtDeviceIoControlFile (218 samples, 0.31%)</title><rect x="99.6376%" y="53" width="0.3123%" height="15" fill="rgb(219,88,35)" fg:x="69560" fg:w="218"/><text x="99.8876%" y="63.50"></text></g><g><title>toy`std::io::Write::write_all (585 samples, 0.84%)</title><rect x="99.1148%" y="149" width="0.8380%" height="15" fill="rgb(220,193,23)" fg:x="69195" fg:w="585"/><text x="99.3648%" y="159.50"></text></g><g><title>toy`std::sys::windows::stdio::write (584 samples, 0.84%)</title><rect x="99.1162%" y="133" width="0.8365%" height="15" fill="rgb(230,90,52)" fg:x="69196" fg:w="584"/><text x="99.3662%" y="143.50"></text></g><g><title>toy`std::sys::windows::stdio::write_valid_utf8_to_console (312 samples, 0.45%)</title><rect x="99.5058%" y="117" width="0.4469%" height="15" fill="rgb(252,106,19)" fg:x="69468" fg:w="312"/><text x="99.7558%" y="127.50"></text></g><g><title>toy`std::io::stdio::_print (595 samples, 0.85%)</title><rect x="99.1033%" y="229" width="0.8523%" height="15" fill="rgb(206,74,20)" fg:x="69187" fg:w="595"/><text x="99.3533%" y="239.50"></text></g><g><title>toy`core::fmt::write (595 samples, 0.85%)</title><rect x="99.1033%" y="213" width="0.8523%" height="15" fill="rgb(230,138,44)" fg:x="69187" fg:w="595"/><text x="99.3533%" y="223.50"></text></g><g><title>toy`std::io::Write::write_fmt::impl$0::write_str (595 samples, 0.85%)</title><rect x="99.1033%" y="197" width="0.8523%" height="15" fill="rgb(235,182,43)" fg:x="69187" fg:w="595"/><text x="99.3533%" y="207.50"></text></g><g><title>toy`std::io::stdio::impl$13::write_all (595 samples, 0.85%)</title><rect x="99.1033%" y="181" width="0.8523%" height="15" fill="rgb(242,16,51)" fg:x="69187" fg:w="595"/><text x="99.3533%" y="191.50"></text></g><g><title>toy`std::io::buffered::bufwriter::BufWriter::write_all_cold (587 samples, 0.84%)</title><rect x="99.1148%" y="165" width="0.8408%" height="15" fill="rgb(248,9,4)" fg:x="69195" fg:w="587"/><text x="99.3648%" y="175.50"></text></g><g><title>toy`main (69,657 samples, 99.78%)</title><rect x="0.1891%" y="309" width="99.7765%" height="15" fill="rgb(210,31,22)" fg:x="132" fg:w="69657"/><text x="0.4391%" y="319.50">toy`main</text></g><g><title>toy`std::rt::lang_start_internal (69,657 samples, 99.78%)</title><rect x="0.1891%" y="293" width="99.7765%" height="15" fill="rgb(239,54,39)" fg:x="132" fg:w="69657"/><text x="0.4391%" y="303.50">toy`std::rt::lang_start_internal</text></g><g><title>toy`std::rt::lang_start::closure$0&lt;tuple$ (69,657 samples, 99.78%)</title><rect x="0.1891%" y="277" width="99.7765%" height="15" fill="rgb(230,99,41)" fg:x="132" fg:w="69657"/><text x="0.4391%" y="287.50">toy`std::rt::lang_start::closure$0&lt;tuple$</text></g><g><title>toy`std::sys_common::backtrace::__rust_begin_short_backtrace&lt;void (*)(),tuple$ (69,657 samples, 99.78%)</title><rect x="0.1891%" y="261" width="99.7765%" height="15" fill="rgb(253,106,12)" fg:x="132" fg:w="69657"/><text x="0.4391%" y="271.50">toy`std::sys_common::backtrace::__rust_begin_short_backtrace&lt;void (*)(),tuple$</text></g><g><title>toy`toy::main (69,657 samples, 99.78%)</title><rect x="0.1891%" y="245" width="99.7765%" height="15" fill="rgb(213,46,41)" fg:x="132" fg:w="69657"/><text x="0.4391%" y="255.50">toy`toy::main</text></g><g><title>ntdll`RtlUserThreadStart (69,687 samples, 99.82%)</title><rect x="0.1547%" y="357" width="99.8195%" height="15" fill="rgb(215,133,35)" fg:x="108" fg:w="69687"/><text x="0.4047%" y="367.50">ntdll`RtlUserThreadStart</text></g><g><title>KERNEL32`BaseThreadInitThunk (69,681 samples, 99.81%)</title><rect x="0.1633%" y="341" width="99.8109%" height="15" fill="rgb(213,28,5)" fg:x="114" fg:w="69681"/><text x="0.4133%" y="351.50">KERNEL32`BaseThreadInitThunk</text></g><g><title>toy`__scrt_common_main_seh (69,663 samples, 99.79%)</title><rect x="0.1891%" y="325" width="99.7851%" height="15" fill="rgb(215,77,49)" fg:x="132" fg:w="69663"/><text x="0.4391%" y="335.50">toy`__scrt_common_main_seh</text></g><g><title>toy`aeg::critical_cycles::impl$14::clone (17 samples, 0.02%)</title><rect x="99.9742%" y="357" width="0.0244%" height="15" fill="rgb(248,100,22)" fg:x="69795" fg:w="17"/><text x="100.2242%" y="367.50"></text></g><g><title>all (69,813 samples, 100%)</title><rect x="0.0000%" y="373" width="100.0000%" height="15" fill="rgb(208,67,9)" fg:x="0" fg:w="69813"/><text x="0.2500%" y="383.50"></text></g></svg></svg>