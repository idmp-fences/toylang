<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="454" onload="init(evt)" viewBox="0 0 1200 454" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="454" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="437.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="437.00"> </text><svg id="frames" x="10" width="1180" total_samples="18018"><g><title>ntdll`LdrpResGetMappingSize (2 samples, 0.01%)</title><rect x="0.0056%" y="213" width="0.0111%" height="15" fill="rgb(227,0,7)" fg:x="1" fg:w="2"/><text x="0.2556%" y="223.50"></text></g><g><title>ntdll`LdrGetDllHandleByMapping (4 samples, 0.02%)</title><rect x="0.0056%" y="277" width="0.0222%" height="15" fill="rgb(217,0,24)" fg:x="1" fg:w="4"/><text x="0.2556%" y="287.50"></text></g><g><title>ntdll`LdrAddRefDll (4 samples, 0.02%)</title><rect x="0.0056%" y="261" width="0.0222%" height="15" fill="rgb(221,193,54)" fg:x="1" fg:w="4"/><text x="0.2556%" y="271.50"></text></g><g><title>ntdll`LdrControlFlowGuardEnforced (4 samples, 0.02%)</title><rect x="0.0056%" y="245" width="0.0222%" height="15" fill="rgb(248,212,6)" fg:x="1" fg:w="4"/><text x="0.2556%" y="255.50"></text></g><g><title>ntdll`RtlImageNtHeaderEx (4 samples, 0.02%)</title><rect x="0.0056%" y="229" width="0.0222%" height="15" fill="rgb(208,68,35)" fg:x="1" fg:w="4"/><text x="0.2556%" y="239.50"></text></g><g><title>ntdll`RtlImageNtHeaderEx (2 samples, 0.01%)</title><rect x="0.0167%" y="213" width="0.0111%" height="15" fill="rgb(232,128,0)" fg:x="3" fg:w="2"/><text x="0.2667%" y="223.50"></text></g><g><title>ntdll`RtlAnsiStringToUnicodeString (2 samples, 0.01%)</title><rect x="0.0167%" y="197" width="0.0111%" height="15" fill="rgb(207,160,47)" fg:x="3" fg:w="2"/><text x="0.2667%" y="207.50"></text></g><g><title>ntdll`LdrLoadDll (8 samples, 0.04%)</title><rect x="0.0056%" y="325" width="0.0444%" height="15" fill="rgb(228,23,34)" fg:x="1" fg:w="8"/><text x="0.2556%" y="335.50"></text></g><g><title>ntdll`RtlUnicodeToCustomCPN (8 samples, 0.04%)</title><rect x="0.0056%" y="309" width="0.0444%" height="15" fill="rgb(218,30,26)" fg:x="1" fg:w="8"/><text x="0.2556%" y="319.50"></text></g><g><title>ntdll`RtlImageRvaToSection (8 samples, 0.04%)</title><rect x="0.0056%" y="293" width="0.0444%" height="15" fill="rgb(220,122,19)" fg:x="1" fg:w="8"/><text x="0.2556%" y="303.50"></text></g><g><title>ntdll`RtlCopyUnicodeString (3 samples, 0.02%)</title><rect x="0.0333%" y="277" width="0.0167%" height="15" fill="rgb(250,228,42)" fg:x="6" fg:w="3"/><text x="0.2833%" y="287.50"></text></g><g><title>ntdll`RtlEnumerateEntryHashTable (3 samples, 0.02%)</title><rect x="0.0333%" y="261" width="0.0167%" height="15" fill="rgb(240,193,28)" fg:x="6" fg:w="3"/><text x="0.2833%" y="271.50"></text></g><g><title>ntdll`RtlEnumerateEntryHashTable (3 samples, 0.02%)</title><rect x="0.0333%" y="245" width="0.0167%" height="15" fill="rgb(216,20,37)" fg:x="6" fg:w="3"/><text x="0.2833%" y="255.50"></text></g><g><title>ntdll`RtlEnumerateEntryHashTable (3 samples, 0.02%)</title><rect x="0.0333%" y="229" width="0.0167%" height="15" fill="rgb(206,188,39)" fg:x="6" fg:w="3"/><text x="0.2833%" y="239.50"></text></g><g><title>ntdll`RtlActivateActivationContextUnsafeFast (3 samples, 0.02%)</title><rect x="0.0333%" y="213" width="0.0167%" height="15" fill="rgb(217,207,13)" fg:x="6" fg:w="3"/><text x="0.2833%" y="223.50"></text></g><g><title>KERNELBASE`TestCreate (3 samples, 0.02%)</title><rect x="0.0333%" y="197" width="0.0167%" height="15" fill="rgb(231,73,38)" fg:x="6" fg:w="3"/><text x="0.2833%" y="207.50"></text></g><g><title>KERNELBASE`TestCreate (3 samples, 0.02%)</title><rect x="0.0333%" y="181" width="0.0167%" height="15" fill="rgb(225,20,46)" fg:x="6" fg:w="3"/><text x="0.2833%" y="191.50"></text></g><g><title>ntdll`RtlActivateActivationContextUnsafeFast (2 samples, 0.01%)</title><rect x="0.0611%" y="277" width="0.0111%" height="15" fill="rgb(210,31,41)" fg:x="11" fg:w="2"/><text x="0.3111%" y="287.50"></text></g><g><title>msvcrt`wfindnexti64 (2 samples, 0.01%)</title><rect x="0.0722%" y="245" width="0.0111%" height="15" fill="rgb(221,200,47)" fg:x="13" fg:w="2"/><text x="0.3222%" y="255.50"></text></g><g><title>ntdll`RtlEnumerateEntryHashTable (5 samples, 0.03%)</title><rect x="0.0611%" y="325" width="0.0278%" height="15" fill="rgb(226,26,5)" fg:x="11" fg:w="5"/><text x="0.3111%" y="335.50"></text></g><g><title>ntdll`RtlEnumerateEntryHashTable (5 samples, 0.03%)</title><rect x="0.0611%" y="309" width="0.0278%" height="15" fill="rgb(249,33,26)" fg:x="11" fg:w="5"/><text x="0.3111%" y="319.50"></text></g><g><title>ntdll`RtlEnumerateEntryHashTable (5 samples, 0.03%)</title><rect x="0.0611%" y="293" width="0.0278%" height="15" fill="rgb(235,183,28)" fg:x="11" fg:w="5"/><text x="0.3111%" y="303.50"></text></g><g><title>ntdll`RtlEnumerateEntryHashTable (3 samples, 0.02%)</title><rect x="0.0722%" y="277" width="0.0167%" height="15" fill="rgb(221,5,38)" fg:x="13" fg:w="3"/><text x="0.3222%" y="287.50"></text></g><g><title>ntdll`RtlActivateActivationContextUnsafeFast (3 samples, 0.02%)</title><rect x="0.0722%" y="261" width="0.0167%" height="15" fill="rgb(247,18,42)" fg:x="13" fg:w="3"/><text x="0.3222%" y="271.50"></text></g><g><title>ntdll`RtlImageNtHeaderEx (4 samples, 0.02%)</title><rect x="0.1055%" y="245" width="0.0222%" height="15" fill="rgb(241,131,45)" fg:x="19" fg:w="4"/><text x="0.3555%" y="255.50"></text></g><g><title>ntdll`RtlImageNtHeaderEx (3 samples, 0.02%)</title><rect x="0.1110%" y="229" width="0.0167%" height="15" fill="rgb(249,31,29)" fg:x="20" fg:w="3"/><text x="0.3610%" y="239.50"></text></g><g><title>ntdll`RtlAnsiStringToUnicodeString (3 samples, 0.02%)</title><rect x="0.1110%" y="213" width="0.0167%" height="15" fill="rgb(225,111,53)" fg:x="20" fg:w="3"/><text x="0.3610%" y="223.50"></text></g><g><title>ntdll`LdrAddRefDll (3 samples, 0.02%)</title><rect x="0.1110%" y="197" width="0.0167%" height="15" fill="rgb(238,160,17)" fg:x="20" fg:w="3"/><text x="0.3610%" y="207.50"></text></g><g><title>ntdll`LdrControlFlowGuardEnforced (3 samples, 0.02%)</title><rect x="0.1110%" y="181" width="0.0167%" height="15" fill="rgb(214,148,48)" fg:x="20" fg:w="3"/><text x="0.3610%" y="191.50"></text></g><g><title>ntdll`RtlImageNtHeaderEx (2 samples, 0.01%)</title><rect x="0.1166%" y="165" width="0.0111%" height="15" fill="rgb(232,36,49)" fg:x="21" fg:w="2"/><text x="0.3666%" y="175.50"></text></g><g><title>ntdll`RtlImageNtHeaderEx (6 samples, 0.03%)</title><rect x="0.0999%" y="325" width="0.0333%" height="15" fill="rgb(209,103,24)" fg:x="18" fg:w="6"/><text x="0.3499%" y="335.50"></text></g><g><title>ntdll`RtlImageNtHeaderEx (6 samples, 0.03%)</title><rect x="0.0999%" y="309" width="0.0333%" height="15" fill="rgb(229,88,8)" fg:x="18" fg:w="6"/><text x="0.3499%" y="319.50"></text></g><g><title>ntdll`RtlAnsiStringToUnicodeString (6 samples, 0.03%)</title><rect x="0.0999%" y="293" width="0.0333%" height="15" fill="rgb(213,181,19)" fg:x="18" fg:w="6"/><text x="0.3499%" y="303.50"></text></g><g><title>ntdll`LdrAddRefDll (6 samples, 0.03%)</title><rect x="0.0999%" y="277" width="0.0333%" height="15" fill="rgb(254,191,54)" fg:x="18" fg:w="6"/><text x="0.3499%" y="287.50"></text></g><g><title>ntdll`LdrControlFlowGuardEnforced (6 samples, 0.03%)</title><rect x="0.0999%" y="261" width="0.0333%" height="15" fill="rgb(241,83,37)" fg:x="18" fg:w="6"/><text x="0.3499%" y="271.50"></text></g><g><title>ntdll`LdrInitializeThunk (26 samples, 0.14%)</title><rect x="0.0000%" y="389" width="0.1443%" height="15" fill="rgb(233,36,39)" fg:x="0" fg:w="26"/><text x="0.2500%" y="399.50"></text></g><g><title>ntdll`LdrInitializeThunk (26 samples, 0.14%)</title><rect x="0.0000%" y="373" width="0.1443%" height="15" fill="rgb(226,3,54)" fg:x="0" fg:w="26"/><text x="0.2500%" y="383.50"></text></g><g><title>ntdll`EtwLogTraceEvent (26 samples, 0.14%)</title><rect x="0.0000%" y="357" width="0.1443%" height="15" fill="rgb(245,192,40)" fg:x="0" fg:w="26"/><text x="0.2500%" y="367.50"></text></g><g><title>ntdll`LdrInitShimEngineDynamic (26 samples, 0.14%)</title><rect x="0.0000%" y="341" width="0.1443%" height="15" fill="rgb(238,167,29)" fg:x="0" fg:w="26"/><text x="0.2500%" y="351.50"></text></g><g><title>ntdll`LdrpResGetMappingSize (4 samples, 0.02%)</title><rect x="0.1554%" y="293" width="0.0222%" height="15" fill="rgb(232,182,51)" fg:x="28" fg:w="4"/><text x="0.4054%" y="303.50"></text></g><g><title>ntdll`LdrGetDllHandleByMapping (2 samples, 0.01%)</title><rect x="0.1776%" y="277" width="0.0111%" height="15" fill="rgb(231,60,39)" fg:x="32" fg:w="2"/><text x="0.4276%" y="287.50"></text></g><g><title>ntdll`RtlClearThreadWorkOnBehalfTicket (8 samples, 0.04%)</title><rect x="0.1554%" y="357" width="0.0444%" height="15" fill="rgb(208,69,12)" fg:x="28" fg:w="8"/><text x="0.4054%" y="367.50"></text></g><g><title>ntdll`RtlHashUnicodeString (8 samples, 0.04%)</title><rect x="0.1554%" y="341" width="0.0444%" height="15" fill="rgb(235,93,37)" fg:x="28" fg:w="8"/><text x="0.4054%" y="351.50"></text></g><g><title>ntdll`RtlQueryPerformanceCounter (8 samples, 0.04%)</title><rect x="0.1554%" y="325" width="0.0444%" height="15" fill="rgb(213,116,39)" fg:x="28" fg:w="8"/><text x="0.4054%" y="335.50"></text></g><g><title>ntdll`RtlQueryPerformanceCounter (8 samples, 0.04%)</title><rect x="0.1554%" y="309" width="0.0444%" height="15" fill="rgb(222,207,29)" fg:x="28" fg:w="8"/><text x="0.4054%" y="319.50"></text></g><g><title>ntdll`RtlQueryPerformanceCounter (4 samples, 0.02%)</title><rect x="0.1776%" y="293" width="0.0222%" height="15" fill="rgb(206,96,30)" fg:x="32" fg:w="4"/><text x="0.4276%" y="303.50"></text></g><g><title>ntdll`RtlQueryPerformanceCounter (2 samples, 0.01%)</title><rect x="0.1887%" y="277" width="0.0111%" height="15" fill="rgb(218,138,4)" fg:x="34" fg:w="2"/><text x="0.4387%" y="287.50"></text></g><g><title>ntdll`RtlCopyMemory (6 samples, 0.03%)</title><rect x="0.1998%" y="245" width="0.0333%" height="15" fill="rgb(250,191,14)" fg:x="36" fg:w="6"/><text x="0.4498%" y="255.50"></text></g><g><title>ntdll`RtlTryAcquirePebLock (6 samples, 0.03%)</title><rect x="0.1998%" y="229" width="0.0333%" height="15" fill="rgb(239,60,40)" fg:x="36" fg:w="6"/><text x="0.4498%" y="239.50"></text></g><g><title>ntdll`RtlTryAcquirePebLock (6 samples, 0.03%)</title><rect x="0.1998%" y="213" width="0.0333%" height="15" fill="rgb(206,27,48)" fg:x="36" fg:w="6"/><text x="0.4498%" y="223.50"></text></g><g><title>ntdll`RtlFreeHeap (6 samples, 0.03%)</title><rect x="0.1998%" y="197" width="0.0333%" height="15" fill="rgb(225,35,8)" fg:x="36" fg:w="6"/><text x="0.4498%" y="207.50"></text></g><g><title>ntdll`RtlGetCurrentServiceSessionId (6 samples, 0.03%)</title><rect x="0.1998%" y="181" width="0.0333%" height="15" fill="rgb(250,213,24)" fg:x="36" fg:w="6"/><text x="0.4498%" y="191.50"></text></g><g><title>ntdll`RtlDeleteBoundaryDescriptor (6 samples, 0.03%)</title><rect x="0.1998%" y="165" width="0.0333%" height="15" fill="rgb(247,123,22)" fg:x="36" fg:w="6"/><text x="0.4498%" y="175.50"></text></g><g><title>ntdll`RtlTryEnterCriticalSection (6 samples, 0.03%)</title><rect x="0.1998%" y="149" width="0.0333%" height="15" fill="rgb(231,138,38)" fg:x="36" fg:w="6"/><text x="0.4498%" y="159.50"></text></g><g><title>ntdll`RtlTryEnterCriticalSection (4 samples, 0.02%)</title><rect x="0.2109%" y="133" width="0.0222%" height="15" fill="rgb(231,145,46)" fg:x="38" fg:w="4"/><text x="0.4609%" y="143.50"></text></g><g><title>ntdll`RtlTryEnterCriticalSection (3 samples, 0.02%)</title><rect x="0.2165%" y="117" width="0.0167%" height="15" fill="rgb(251,118,11)" fg:x="39" fg:w="3"/><text x="0.4665%" y="127.50"></text></g><g><title>ntdll`RtlTryEnterCriticalSection (3 samples, 0.02%)</title><rect x="0.2165%" y="101" width="0.0167%" height="15" fill="rgb(217,147,25)" fg:x="39" fg:w="3"/><text x="0.4665%" y="111.50"></text></g><g><title>ntdll`NtFreeVirtualMemory (2 samples, 0.01%)</title><rect x="0.2220%" y="85" width="0.0111%" height="15" fill="rgb(247,81,37)" fg:x="40" fg:w="2"/><text x="0.4720%" y="95.50"></text></g><g><title>ntdll`RtlFreeHeap (13 samples, 0.07%)</title><rect x="0.1998%" y="261" width="0.0722%" height="15" fill="rgb(209,12,38)" fg:x="36" fg:w="13"/><text x="0.4498%" y="271.50"></text></g><g><title>ntdll`RtlGetCurrentServiceSessionId (7 samples, 0.04%)</title><rect x="0.2331%" y="245" width="0.0389%" height="15" fill="rgb(227,1,9)" fg:x="42" fg:w="7"/><text x="0.4831%" y="255.50"></text></g><g><title>KERNEL32`HeapFree (6 samples, 0.03%)</title><rect x="50.0000%" y="229" width="0.0333%" height="15" fill="rgb(248,47,43)" fg:x="9009" fg:w="6"/><text x="50.2500%" y="239.50"></text></g><g><title>VCRUNTIME140`memcpy (2 samples, 0.01%)</title><rect x="50.0389%" y="229" width="0.0111%" height="15" fill="rgb(221,10,30)" fg:x="9016" fg:w="2"/><text x="50.2889%" y="239.50"></text></g><g><title>VCRUNTIME140`memmove (14 samples, 0.08%)</title><rect x="50.0500%" y="229" width="0.0777%" height="15" fill="rgb(210,229,1)" fg:x="9018" fg:w="14"/><text x="50.3000%" y="239.50"></text></g><g><title>ntdll`RtlAllocateHeap (71 samples, 0.39%)</title><rect x="51.9536%" y="197" width="0.3941%" height="15" fill="rgb(222,148,37)" fg:x="9361" fg:w="71"/><text x="52.2036%" y="207.50"></text></g><g><title>ntdll`RtlAllocateHeap (464 samples, 2.58%)</title><rect x="50.1277%" y="229" width="2.5752%" height="15" fill="rgb(234,67,33)" fg:x="9032" fg:w="464"/><text x="50.3777%" y="239.50">nt..</text></g><g><title>ntdll`RtlAllocateHeap (362 samples, 2.01%)</title><rect x="50.6938%" y="213" width="2.0091%" height="15" fill="rgb(247,98,35)" fg:x="9134" fg:w="362"/><text x="50.9438%" y="223.50">n..</text></g><g><title>ntdll`RtlUnhandledExceptionFilter (64 samples, 0.36%)</title><rect x="52.3477%" y="197" width="0.3552%" height="15" fill="rgb(247,138,52)" fg:x="9432" fg:w="64"/><text x="52.5977%" y="207.50"></text></g><g><title>ntdll`RtlCopyMemory (1,366 samples, 7.58%)</title><rect x="53.9294%" y="213" width="7.5813%" height="15" fill="rgb(213,79,30)" fg:x="9717" fg:w="1366"/><text x="54.1794%" y="223.50">ntdll`RtlC..</text></g><g><title>ntdll`RtlFreeHeap (2,050 samples, 11.38%)</title><rect x="52.7029%" y="229" width="11.3775%" height="15" fill="rgb(246,177,23)" fg:x="9496" fg:w="2050"/><text x="52.9529%" y="239.50">ntdll`RtlFreeHeap</text></g><g><title>ntdll`RtlGetCurrentServiceSessionId (463 samples, 2.57%)</title><rect x="61.5107%" y="213" width="2.5697%" height="15" fill="rgb(230,62,27)" fg:x="11083" fg:w="463"/><text x="61.7607%" y="223.50">nt..</text></g><g><title>ntdll`RtlFreeHeap (39 samples, 0.22%)</title><rect x="63.8639%" y="197" width="0.2165%" height="15" fill="rgb(216,154,8)" fg:x="11507" fg:w="39"/><text x="64.1139%" y="207.50"></text></g><g><title>toy`_rust_alloc (3 samples, 0.02%)</title><rect x="64.0804%" y="229" width="0.0167%" height="15" fill="rgb(244,35,45)" fg:x="11546" fg:w="3"/><text x="64.3304%" y="239.50"></text></g><g><title>toy`_rust_dealloc (6 samples, 0.03%)</title><rect x="64.0970%" y="229" width="0.0333%" height="15" fill="rgb(251,115,12)" fg:x="11549" fg:w="6"/><text x="64.3470%" y="239.50"></text></g><g><title>ntdll`RtlCopyMemory (2 samples, 0.01%)</title><rect x="64.2136%" y="197" width="0.0111%" height="15" fill="rgb(240,54,50)" fg:x="11570" fg:w="2"/><text x="64.4636%" y="207.50"></text></g><g><title>ntdll`RtlFreeHeap (4 samples, 0.02%)</title><rect x="64.2080%" y="213" width="0.0222%" height="15" fill="rgb(233,84,52)" fg:x="11569" fg:w="4"/><text x="64.4580%" y="223.50"></text></g><g><title>toy`alloc::vec::spec_from_iter::impl$0::from_iter&lt;petgraph::graph_impl::NodeIndex&lt;u32&gt;,core::iter::adapters::filter_map::FilterMap&lt;petgraph::graph_impl::Edges&lt;aeg::aeg::AegEdge,enum2$ (4 samples, 0.02%)</title><rect x="64.2358%" y="213" width="0.0222%" height="15" fill="rgb(207,117,47)" fg:x="11574" fg:w="4"/><text x="64.4858%" y="223.50"></text></g><g><title>toy`aeg::aeg::AbstractEventGraph::is_po_connected (25 samples, 0.14%)</title><rect x="64.1303%" y="229" width="0.1388%" height="15" fill="rgb(249,43,39)" fg:x="11555" fg:w="25"/><text x="64.3803%" y="239.50"></text></g><g><title>toy`fixedbitset::FixedBitSet::with_capacity (2 samples, 0.01%)</title><rect x="64.2580%" y="213" width="0.0111%" height="15" fill="rgb(209,38,44)" fg:x="11578" fg:w="2"/><text x="64.5080%" y="223.50"></text></g><g><title>ntdll`RtlAllocateHeap (2 samples, 0.01%)</title><rect x="64.2580%" y="197" width="0.0111%" height="15" fill="rgb(236,212,23)" fg:x="11578" fg:w="2"/><text x="64.5080%" y="207.50"></text></g><g><title>ntdll`RtlCopyMemory (14 samples, 0.08%)</title><rect x="66.9719%" y="181" width="0.0777%" height="15" fill="rgb(242,79,21)" fg:x="12067" fg:w="14"/><text x="67.2219%" y="191.50"></text></g><g><title>ntdll`RtlFreeHeap (27 samples, 0.15%)</title><rect x="66.9442%" y="197" width="0.1499%" height="15" fill="rgb(211,96,35)" fg:x="12062" fg:w="27"/><text x="67.1942%" y="207.50"></text></g><g><title>ntdll`RtlGetCurrentServiceSessionId (8 samples, 0.04%)</title><rect x="67.0496%" y="181" width="0.0444%" height="15" fill="rgb(253,215,40)" fg:x="12081" fg:w="8"/><text x="67.2996%" y="191.50"></text></g><g><title>ntdll`RtlAllocateHeap (6 samples, 0.03%)</title><rect x="67.2161%" y="85" width="0.0333%" height="15" fill="rgb(211,81,21)" fg:x="12111" fg:w="6"/><text x="67.4661%" y="95.50"></text></g><g><title>ntdll`RtlAllocateHeap (2 samples, 0.01%)</title><rect x="67.2383%" y="69" width="0.0111%" height="15" fill="rgb(208,190,38)" fg:x="12115" fg:w="2"/><text x="67.4883%" y="79.50"></text></g><g><title>ntdll`RtlAllocateHeap (22 samples, 0.12%)</title><rect x="67.1384%" y="117" width="0.1221%" height="15" fill="rgb(235,213,38)" fg:x="12097" fg:w="22"/><text x="67.3884%" y="127.50"></text></g><g><title>ntdll`RtlAllocateHeap (20 samples, 0.11%)</title><rect x="67.1495%" y="101" width="0.1110%" height="15" fill="rgb(237,122,38)" fg:x="12099" fg:w="20"/><text x="67.3995%" y="111.50"></text></g><g><title>ntdll`RtlCopyMemory (7 samples, 0.04%)</title><rect x="67.2716%" y="101" width="0.0389%" height="15" fill="rgb(244,218,35)" fg:x="12121" fg:w="7"/><text x="67.5216%" y="111.50"></text></g><g><title>ntdll`RtlReAllocateHeap (40 samples, 0.22%)</title><rect x="67.1107%" y="165" width="0.2220%" height="15" fill="rgb(240,68,47)" fg:x="12092" fg:w="40"/><text x="67.3607%" y="175.50"></text></g><g><title>ntdll`RtlReAllocateHeap (39 samples, 0.22%)</title><rect x="67.1162%" y="149" width="0.2165%" height="15" fill="rgb(210,16,53)" fg:x="12093" fg:w="39"/><text x="67.3662%" y="159.50"></text></g><g><title>ntdll`RtlReAllocateHeap (38 samples, 0.21%)</title><rect x="67.1218%" y="133" width="0.2109%" height="15" fill="rgb(235,124,12)" fg:x="12094" fg:w="38"/><text x="67.3718%" y="143.50"></text></g><g><title>ntdll`RtlFreeHeap (12 samples, 0.07%)</title><rect x="67.2661%" y="117" width="0.0666%" height="15" fill="rgb(224,169,11)" fg:x="12120" fg:w="12"/><text x="67.5161%" y="127.50"></text></g><g><title>ntdll`RtlGetCurrentServiceSessionId (4 samples, 0.02%)</title><rect x="67.3105%" y="101" width="0.0222%" height="15" fill="rgb(250,166,2)" fg:x="12128" fg:w="4"/><text x="67.5605%" y="111.50"></text></g><g><title>toy`alloc::raw_vec::RawVec&lt;petgraph::graph_impl::NodeIndex&lt;u32&gt;,alloc::alloc::Global&gt;::reserve_for_push&lt;petgraph::graph_impl::NodeIndex (45 samples, 0.25%)</title><rect x="67.0940%" y="197" width="0.2498%" height="15" fill="rgb(242,216,29)" fg:x="12089" fg:w="45"/><text x="67.3440%" y="207.50"></text></g><g><title>toy`alloc::raw_vec::finish_grow (42 samples, 0.23%)</title><rect x="67.1107%" y="181" width="0.2331%" height="15" fill="rgb(230,116,27)" fg:x="12092" fg:w="42"/><text x="67.3607%" y="191.50"></text></g><g><title>toy`std::alloc::__default_lib_allocator::__rdl_realloc (2 samples, 0.01%)</title><rect x="67.3327%" y="165" width="0.0111%" height="15" fill="rgb(228,99,48)" fg:x="12132" fg:w="2"/><text x="67.5827%" y="175.50"></text></g><g><title>ntdll`RtlAllocateHeap (9 samples, 0.05%)</title><rect x="67.5269%" y="149" width="0.0500%" height="15" fill="rgb(253,11,6)" fg:x="12167" fg:w="9"/><text x="67.7769%" y="159.50"></text></g><g><title>ntdll`RtlAllocateHeap (32 samples, 0.18%)</title><rect x="67.4326%" y="181" width="0.1776%" height="15" fill="rgb(247,143,39)" fg:x="12150" fg:w="32"/><text x="67.6826%" y="191.50"></text></g><g><title>ntdll`RtlAllocateHeap (28 samples, 0.16%)</title><rect x="67.4548%" y="165" width="0.1554%" height="15" fill="rgb(236,97,10)" fg:x="12154" fg:w="28"/><text x="67.7048%" y="175.50"></text></g><g><title>ntdll`RtlUnhandledExceptionFilter (5 samples, 0.03%)</title><rect x="67.5824%" y="149" width="0.0278%" height="15" fill="rgb(233,208,19)" fg:x="12177" fg:w="5"/><text x="67.8324%" y="159.50"></text></g><g><title>toy`alloc::vec::spec_from_iter::impl$0::from_iter&lt;petgraph::graph_impl::NodeIndex&lt;u32&gt;,core::iter::adapters::filter_map::FilterMap&lt;petgraph::graph_impl::Edges&lt;aeg::aeg::AegEdge,enum2$ (50 samples, 0.28%)</title><rect x="67.3438%" y="197" width="0.2775%" height="15" fill="rgb(216,164,2)" fg:x="12134" fg:w="50"/><text x="67.5938%" y="207.50"></text></g><g><title>toy`std::alloc::__default_lib_allocator::__rdl_alloc (2 samples, 0.01%)</title><rect x="67.6102%" y="181" width="0.0111%" height="15" fill="rgb(220,129,5)" fg:x="12182" fg:w="2"/><text x="67.8602%" y="191.50"></text></g><g><title>ntdll`RtlAllocateHeap (12 samples, 0.07%)</title><rect x="67.7045%" y="149" width="0.0666%" height="15" fill="rgb(242,17,10)" fg:x="12199" fg:w="12"/><text x="67.9545%" y="159.50"></text></g><g><title>ntdll`RtlAllocateHeap (5 samples, 0.03%)</title><rect x="67.7434%" y="133" width="0.0278%" height="15" fill="rgb(242,107,0)" fg:x="12206" fg:w="5"/><text x="67.9934%" y="143.50"></text></g><g><title>toy`fixedbitset::FixedBitSet::with_capacity (30 samples, 0.17%)</title><rect x="67.6213%" y="197" width="0.1665%" height="15" fill="rgb(251,28,31)" fg:x="12184" fg:w="30"/><text x="67.8713%" y="207.50"></text></g><g><title>ntdll`RtlAllocateHeap (27 samples, 0.15%)</title><rect x="67.6379%" y="181" width="0.1499%" height="15" fill="rgb(233,223,10)" fg:x="12187" fg:w="27"/><text x="67.8879%" y="191.50"></text></g><g><title>ntdll`RtlAllocateHeap (24 samples, 0.13%)</title><rect x="67.6546%" y="165" width="0.1332%" height="15" fill="rgb(215,21,27)" fg:x="12190" fg:w="24"/><text x="67.9046%" y="175.50"></text></g><g><title>ntdll`RtlUnhandledExceptionFilter (2 samples, 0.01%)</title><rect x="67.7767%" y="149" width="0.0111%" height="15" fill="rgb(232,23,21)" fg:x="12212" fg:w="2"/><text x="68.0267%" y="159.50"></text></g><g><title>toy`aeg::aeg::AbstractEventGraph::is_po_connected (311 samples, 1.73%)</title><rect x="66.0728%" y="213" width="1.7261%" height="15" fill="rgb(244,5,23)" fg:x="11905" fg:w="311"/><text x="66.3228%" y="223.50"></text></g><g><title>toy`std::alloc::__default_lib_allocator::__rdl_dealloc (2 samples, 0.01%)</title><rect x="67.7878%" y="197" width="0.0111%" height="15" fill="rgb(226,81,46)" fg:x="12214" fg:w="2"/><text x="68.0378%" y="207.50"></text></g><g><title>ntdll`RtlAllocateHeap (6 samples, 0.03%)</title><rect x="68.0542%" y="101" width="0.0333%" height="15" fill="rgb(247,70,30)" fg:x="12262" fg:w="6"/><text x="68.3042%" y="111.50"></text></g><g><title>ntdll`RtlAllocateHeap (44 samples, 0.24%)</title><rect x="67.8710%" y="133" width="0.2442%" height="15" fill="rgb(212,68,19)" fg:x="12229" fg:w="44"/><text x="68.1210%" y="143.50"></text></g><g><title>ntdll`RtlAllocateHeap (37 samples, 0.21%)</title><rect x="67.9099%" y="117" width="0.2054%" height="15" fill="rgb(240,187,13)" fg:x="12236" fg:w="37"/><text x="68.1599%" y="127.50"></text></g><g><title>ntdll`RtlUnhandledExceptionFilter (5 samples, 0.03%)</title><rect x="68.0875%" y="101" width="0.0278%" height="15" fill="rgb(223,113,26)" fg:x="12268" fg:w="5"/><text x="68.3375%" y="111.50"></text></g><g><title>ntdll`RtlCopyMemory (3 samples, 0.02%)</title><rect x="68.1208%" y="117" width="0.0167%" height="15" fill="rgb(206,192,2)" fg:x="12274" fg:w="3"/><text x="68.3708%" y="127.50"></text></g><g><title>ntdll`RtlReAllocateHeap (59 samples, 0.33%)</title><rect x="67.8266%" y="181" width="0.3275%" height="15" fill="rgb(241,108,4)" fg:x="12221" fg:w="59"/><text x="68.0766%" y="191.50"></text></g><g><title>ntdll`RtlReAllocateHeap (57 samples, 0.32%)</title><rect x="67.8377%" y="165" width="0.3164%" height="15" fill="rgb(247,173,49)" fg:x="12223" fg:w="57"/><text x="68.0877%" y="175.50"></text></g><g><title>ntdll`RtlReAllocateHeap (56 samples, 0.31%)</title><rect x="67.8433%" y="149" width="0.3108%" height="15" fill="rgb(224,114,35)" fg:x="12224" fg:w="56"/><text x="68.0933%" y="159.50"></text></g><g><title>ntdll`RtlFreeHeap (6 samples, 0.03%)</title><rect x="68.1208%" y="133" width="0.0333%" height="15" fill="rgb(245,159,27)" fg:x="12274" fg:w="6"/><text x="68.3708%" y="143.50"></text></g><g><title>ntdll`RtlGetCurrentServiceSessionId (3 samples, 0.02%)</title><rect x="68.1374%" y="117" width="0.0167%" height="15" fill="rgb(245,172,44)" fg:x="12277" fg:w="3"/><text x="68.3874%" y="127.50"></text></g><g><title>toy`alloc::raw_vec::RawVec&lt;petgraph::graph_impl::NodeIndex&lt;u32&gt;,alloc::alloc::Global&gt;::reserve_for_push&lt;petgraph::graph_impl::NodeIndex (67 samples, 0.37%)</title><rect x="67.7989%" y="213" width="0.3719%" height="15" fill="rgb(236,23,11)" fg:x="12216" fg:w="67"/><text x="68.0489%" y="223.50"></text></g><g><title>toy`alloc::raw_vec::finish_grow (64 samples, 0.36%)</title><rect x="67.8155%" y="197" width="0.3552%" height="15" fill="rgb(205,117,38)" fg:x="12219" fg:w="64"/><text x="68.0655%" y="207.50"></text></g><g><title>toy`std::alloc::__default_lib_allocator::__rdl_realloc (3 samples, 0.02%)</title><rect x="68.1541%" y="181" width="0.0167%" height="15" fill="rgb(237,72,25)" fg:x="12280" fg:w="3"/><text x="68.4041%" y="191.50"></text></g><g><title>ntdll`RtlAllocateHeap (22 samples, 0.12%)</title><rect x="68.2595%" y="181" width="0.1221%" height="15" fill="rgb(244,70,9)" fg:x="12299" fg:w="22"/><text x="68.5095%" y="191.50"></text></g><g><title>ntdll`RtlAllocateHeap (20 samples, 0.11%)</title><rect x="68.2706%" y="165" width="0.1110%" height="15" fill="rgb(217,125,39)" fg:x="12301" fg:w="20"/><text x="68.5206%" y="175.50"></text></g><g><title>ntdll`RtlAllocateHeap (8 samples, 0.04%)</title><rect x="68.6869%" y="101" width="0.0444%" height="15" fill="rgb(235,36,10)" fg:x="12376" fg:w="8"/><text x="68.9369%" y="111.50"></text></g><g><title>ntdll`RtlAllocateHeap (58 samples, 0.32%)</title><rect x="68.4649%" y="133" width="0.3219%" height="15" fill="rgb(251,123,47)" fg:x="12336" fg:w="58"/><text x="68.7149%" y="143.50"></text></g><g><title>ntdll`RtlAllocateHeap (50 samples, 0.28%)</title><rect x="68.5093%" y="117" width="0.2775%" height="15" fill="rgb(221,13,13)" fg:x="12344" fg:w="50"/><text x="68.7593%" y="127.50"></text></g><g><title>ntdll`RtlUnhandledExceptionFilter (9 samples, 0.05%)</title><rect x="68.7368%" y="101" width="0.0500%" height="15" fill="rgb(238,131,9)" fg:x="12385" fg:w="9"/><text x="68.9868%" y="111.50"></text></g><g><title>ntdll`RtlCopyMemory (11 samples, 0.06%)</title><rect x="68.8034%" y="117" width="0.0611%" height="15" fill="rgb(211,50,8)" fg:x="12397" fg:w="11"/><text x="69.0534%" y="127.50"></text></g><g><title>ntdll`RtlReAllocateHeap (84 samples, 0.47%)</title><rect x="68.4205%" y="149" width="0.4662%" height="15" fill="rgb(245,182,24)" fg:x="12328" fg:w="84"/><text x="68.6705%" y="159.50"></text></g><g><title>ntdll`RtlFreeHeap (17 samples, 0.09%)</title><rect x="68.7923%" y="133" width="0.0944%" height="15" fill="rgb(242,14,37)" fg:x="12395" fg:w="17"/><text x="69.0423%" y="143.50"></text></g><g><title>ntdll`RtlGetCurrentServiceSessionId (4 samples, 0.02%)</title><rect x="68.8645%" y="117" width="0.0222%" height="15" fill="rgb(246,228,12)" fg:x="12408" fg:w="4"/><text x="69.1145%" y="127.50"></text></g><g><title>ntdll`RtlReAllocateHeap (92 samples, 0.51%)</title><rect x="68.3816%" y="181" width="0.5106%" height="15" fill="rgb(213,55,15)" fg:x="12321" fg:w="92"/><text x="68.6316%" y="191.50"></text></g><g><title>ntdll`RtlReAllocateHeap (91 samples, 0.51%)</title><rect x="68.3872%" y="165" width="0.5051%" height="15" fill="rgb(209,9,3)" fg:x="12322" fg:w="91"/><text x="68.6372%" y="175.50"></text></g><g><title>toy`std::alloc::__default_lib_allocator::__rdl_alloc (3 samples, 0.02%)</title><rect x="68.8922%" y="181" width="0.0167%" height="15" fill="rgb(230,59,30)" fg:x="12413" fg:w="3"/><text x="69.1422%" y="191.50"></text></g><g><title>toy`alloc::raw_vec::RawVec&lt;usize,alloc::alloc::Global&gt;::reserve_for_push (134 samples, 0.74%)</title><rect x="68.1707%" y="213" width="0.7437%" height="15" fill="rgb(209,121,21)" fg:x="12283" fg:w="134"/><text x="68.4207%" y="223.50"></text></g><g><title>toy`alloc::raw_vec::finish_grow (127 samples, 0.70%)</title><rect x="68.2096%" y="197" width="0.7049%" height="15" fill="rgb(220,109,13)" fg:x="12290" fg:w="127"/><text x="68.4596%" y="207.50"></text></g><g><title>toy`core::hash::BuildHasher::hash_one&lt;std::hash::random::RandomState,ref$ (256 samples, 1.42%)</title><rect x="68.9144%" y="213" width="1.4208%" height="15" fill="rgb(232,18,1)" fg:x="12417" fg:w="256"/><text x="69.1644%" y="223.50"></text></g><g><title>toy`core::hash::sip::impl$5::write (66 samples, 0.37%)</title><rect x="69.9689%" y="197" width="0.3663%" height="15" fill="rgb(215,41,42)" fg:x="12607" fg:w="66"/><text x="70.2189%" y="207.50"></text></g><g><title>ntdll`RtlAllocateHeap (18 samples, 0.10%)</title><rect x="71.1511%" y="165" width="0.0999%" height="15" fill="rgb(224,123,36)" fg:x="12820" fg:w="18"/><text x="71.4011%" y="175.50"></text></g><g><title>ntdll`RtlAllocateHeap (8 samples, 0.04%)</title><rect x="71.2066%" y="149" width="0.0444%" height="15" fill="rgb(240,125,3)" fg:x="12830" fg:w="8"/><text x="71.4566%" y="159.50"></text></g><g><title>ntdll`RtlEnumerateGenericTableWithoutSplayingAvl (2 samples, 0.01%)</title><rect x="71.2510%" y="165" width="0.0111%" height="15" fill="rgb(205,98,50)" fg:x="12838" fg:w="2"/><text x="71.5010%" y="175.50"></text></g><g><title>ntdll`RtlEnumerateGenericTableWithoutSplayingAvl (2 samples, 0.01%)</title><rect x="71.2510%" y="149" width="0.0111%" height="15" fill="rgb(205,185,37)" fg:x="12838" fg:w="2"/><text x="71.5010%" y="159.50"></text></g><g><title>ntdll`RtlAllocateHeap (2 samples, 0.01%)</title><rect x="71.2510%" y="133" width="0.0111%" height="15" fill="rgb(238,207,15)" fg:x="12838" fg:w="2"/><text x="71.5010%" y="143.50"></text></g><g><title>ntdll`RtlAllocateHeap (2 samples, 0.01%)</title><rect x="71.2510%" y="117" width="0.0111%" height="15" fill="rgb(213,199,42)" fg:x="12838" fg:w="2"/><text x="71.5010%" y="127.50"></text></g><g><title>ntdll`RtlAllocateHeap (90 samples, 0.50%)</title><rect x="70.8680%" y="197" width="0.4995%" height="15" fill="rgb(235,201,11)" fg:x="12769" fg:w="90"/><text x="71.1180%" y="207.50"></text></g><g><title>ntdll`RtlAllocateHeap (78 samples, 0.43%)</title><rect x="70.9346%" y="181" width="0.4329%" height="15" fill="rgb(207,46,11)" fg:x="12781" fg:w="78"/><text x="71.1846%" y="191.50"></text></g><g><title>ntdll`RtlUnhandledExceptionFilter (19 samples, 0.11%)</title><rect x="71.2621%" y="165" width="0.1055%" height="15" fill="rgb(241,35,35)" fg:x="12840" fg:w="19"/><text x="71.5121%" y="175.50"></text></g><g><title>ntdll`RtlCopyMemory (15 samples, 0.08%)</title><rect x="71.3897%" y="181" width="0.0833%" height="15" fill="rgb(243,32,47)" fg:x="12863" fg:w="15"/><text x="71.6397%" y="191.50"></text></g><g><title>ntdll`RtlFreeHeap (22 samples, 0.12%)</title><rect x="71.3675%" y="197" width="0.1221%" height="15" fill="rgb(247,202,23)" fg:x="12859" fg:w="22"/><text x="71.6175%" y="207.50"></text></g><g><title>ntdll`RtlGetCurrentServiceSessionId (3 samples, 0.02%)</title><rect x="71.4730%" y="181" width="0.0167%" height="15" fill="rgb(219,102,11)" fg:x="12878" fg:w="3"/><text x="71.7230%" y="191.50"></text></g><g><title>toy`core::hash::BuildHasher::hash_one&lt;std::hash::random::RandomState,ref$ (50 samples, 0.28%)</title><rect x="71.4952%" y="197" width="0.2775%" height="15" fill="rgb(243,110,44)" fg:x="12882" fg:w="50"/><text x="71.7452%" y="207.50"></text></g><g><title>toy`core::hash::sip::impl$5::write (18 samples, 0.10%)</title><rect x="71.6728%" y="181" width="0.0999%" height="15" fill="rgb(222,74,54)" fg:x="12914" fg:w="18"/><text x="71.9228%" y="191.50"></text></g><g><title>toy`aeg::critical_cycles::IncompleteMinimalCycle (1,359 samples, 7.54%)</title><rect x="64.2691%" y="229" width="7.5425%" height="15" fill="rgb(216,99,12)" fg:x="11580" fg:w="1359"/><text x="64.5191%" y="239.50">toy`aeg::c..</text></g><g><title>toy`hashbrown::raw::RawTable&lt;tuple$&lt;usize,alloc::vec::Vec&lt;usize,alloc::alloc::Global&gt; &gt;,alloc::alloc::Global&gt;::reserve_rehash&lt;tuple$&lt;usize,alloc::vec::Vec&lt;usize,alloc::alloc::Global&gt; &gt;,alloc::alloc::Global,hashbrown::map::make_hasher::closure_env$0&lt;usize,alloc::vec::Vec (266 samples, 1.48%)</title><rect x="70.3352%" y="213" width="1.4763%" height="15" fill="rgb(226,22,26)" fg:x="12673" fg:w="266"/><text x="70.5852%" y="223.50"></text></g><g><title>toy`std::alloc::__default_lib_allocator::__rdl_alloc (7 samples, 0.04%)</title><rect x="71.7727%" y="197" width="0.0389%" height="15" fill="rgb(217,163,10)" fg:x="12932" fg:w="7"/><text x="72.0227%" y="207.50"></text></g><g><title>ntdll`RtlCopyMemory (2 samples, 0.01%)</title><rect x="71.8115%" y="149" width="0.0111%" height="15" fill="rgb(213,25,53)" fg:x="12939" fg:w="2"/><text x="72.0615%" y="159.50"></text></g><g><title>toy`alloc::raw_vec::RawVec&lt;aeg::critical_cycles::IncompleteMinimalCycle&lt;usize,usize&gt;,alloc::alloc::Global&gt;::reserve_for_push&lt;aeg::critical_cycles::IncompleteMinimalCycle (3 samples, 0.02%)</title><rect x="71.8115%" y="229" width="0.0167%" height="15" fill="rgb(252,105,26)" fg:x="12939" fg:w="3"/><text x="72.0615%" y="239.50"></text></g><g><title>toy`alloc::raw_vec::finish_grow (3 samples, 0.02%)</title><rect x="71.8115%" y="213" width="0.0167%" height="15" fill="rgb(220,39,43)" fg:x="12939" fg:w="3"/><text x="72.0615%" y="223.50"></text></g><g><title>ntdll`RtlReAllocateHeap (3 samples, 0.02%)</title><rect x="71.8115%" y="197" width="0.0167%" height="15" fill="rgb(229,68,48)" fg:x="12939" fg:w="3"/><text x="72.0615%" y="207.50"></text></g><g><title>ntdll`RtlReAllocateHeap (3 samples, 0.02%)</title><rect x="71.8115%" y="181" width="0.0167%" height="15" fill="rgb(252,8,32)" fg:x="12939" fg:w="3"/><text x="72.0615%" y="191.50"></text></g><g><title>ntdll`RtlReAllocateHeap (3 samples, 0.02%)</title><rect x="71.8115%" y="165" width="0.0167%" height="15" fill="rgb(223,20,43)" fg:x="12939" fg:w="3"/><text x="72.0615%" y="175.50"></text></g><g><title>ntdll`RtlAllocateHeap (3 samples, 0.02%)</title><rect x="72.0946%" y="117" width="0.0167%" height="15" fill="rgb(229,81,49)" fg:x="12990" fg:w="3"/><text x="72.3446%" y="127.50"></text></g><g><title>ntdll`RtlAllocateHeap (30 samples, 0.17%)</title><rect x="71.9669%" y="149" width="0.1665%" height="15" fill="rgb(236,28,36)" fg:x="12967" fg:w="30"/><text x="72.2169%" y="159.50"></text></g><g><title>ntdll`RtlAllocateHeap (26 samples, 0.14%)</title><rect x="71.9891%" y="133" width="0.1443%" height="15" fill="rgb(249,185,26)" fg:x="12971" fg:w="26"/><text x="72.2391%" y="143.50"></text></g><g><title>ntdll`RtlUnhandledExceptionFilter (4 samples, 0.02%)</title><rect x="72.1112%" y="117" width="0.0222%" height="15" fill="rgb(249,174,33)" fg:x="12993" fg:w="4"/><text x="72.3612%" y="127.50"></text></g><g><title>ntdll`RtlCopyMemory (6 samples, 0.03%)</title><rect x="72.1501%" y="133" width="0.0333%" height="15" fill="rgb(233,201,37)" fg:x="13000" fg:w="6"/><text x="72.4001%" y="143.50"></text></g><g><title>ntdll`RtlReAllocateHeap (60 samples, 0.33%)</title><rect x="71.8726%" y="197" width="0.3330%" height="15" fill="rgb(221,78,26)" fg:x="12950" fg:w="60"/><text x="72.1226%" y="207.50"></text></g><g><title>ntdll`RtlReAllocateHeap (58 samples, 0.32%)</title><rect x="71.8837%" y="181" width="0.3219%" height="15" fill="rgb(250,127,30)" fg:x="12952" fg:w="58"/><text x="72.1337%" y="191.50"></text></g><g><title>ntdll`RtlReAllocateHeap (52 samples, 0.29%)</title><rect x="71.9170%" y="165" width="0.2886%" height="15" fill="rgb(230,49,44)" fg:x="12958" fg:w="52"/><text x="72.1670%" y="175.50"></text></g><g><title>ntdll`RtlFreeHeap (12 samples, 0.07%)</title><rect x="72.1390%" y="149" width="0.0666%" height="15" fill="rgb(229,67,23)" fg:x="12998" fg:w="12"/><text x="72.3890%" y="159.50"></text></g><g><title>ntdll`RtlGetCurrentServiceSessionId (4 samples, 0.02%)</title><rect x="72.1834%" y="133" width="0.0222%" height="15" fill="rgb(249,83,47)" fg:x="13006" fg:w="4"/><text x="72.4334%" y="143.50"></text></g><g><title>ntdll`RtlFreeHeap (2 samples, 0.01%)</title><rect x="72.1945%" y="117" width="0.0111%" height="15" fill="rgb(215,43,3)" fg:x="13008" fg:w="2"/><text x="72.4445%" y="127.50"></text></g><g><title>toy`alloc::raw_vec::RawVec&lt;petgraph::graph_impl::NodeIndex&lt;u32&gt;,alloc::alloc::Global&gt;::reserve_for_push&lt;petgraph::graph_impl::NodeIndex (69 samples, 0.38%)</title><rect x="71.8282%" y="229" width="0.3830%" height="15" fill="rgb(238,154,13)" fg:x="12942" fg:w="69"/><text x="72.0782%" y="239.50"></text></g><g><title>toy`alloc::raw_vec::finish_grow (63 samples, 0.35%)</title><rect x="71.8615%" y="213" width="0.3497%" height="15" fill="rgb(219,56,2)" fg:x="12948" fg:w="63"/><text x="72.1115%" y="223.50"></text></g><g><title>toy`alloc::raw_vec::impl$2::reserve::do_reserve_and_handle (2 samples, 0.01%)</title><rect x="72.2111%" y="229" width="0.0111%" height="15" fill="rgb(233,0,4)" fg:x="13011" fg:w="2"/><text x="72.4611%" y="239.50"></text></g><g><title>toy`alloc::raw_vec::finish_grow (2 samples, 0.01%)</title><rect x="72.2111%" y="213" width="0.0111%" height="15" fill="rgb(235,30,7)" fg:x="13011" fg:w="2"/><text x="72.4611%" y="223.50"></text></g><g><title>ntdll`RtlReAllocateHeap (2 samples, 0.01%)</title><rect x="72.2111%" y="197" width="0.0111%" height="15" fill="rgb(250,79,13)" fg:x="13011" fg:w="2"/><text x="72.4611%" y="207.50"></text></g><g><title>ntdll`RtlReAllocateHeap (2 samples, 0.01%)</title><rect x="72.2111%" y="181" width="0.0111%" height="15" fill="rgb(211,146,34)" fg:x="13011" fg:w="2"/><text x="72.4611%" y="191.50"></text></g><g><title>ntdll`RtlReAllocateHeap (2 samples, 0.01%)</title><rect x="72.2111%" y="165" width="0.0111%" height="15" fill="rgb(228,22,38)" fg:x="13011" fg:w="2"/><text x="72.4611%" y="175.50"></text></g><g><title>ntdll`RtlAllocateHeap (2 samples, 0.01%)</title><rect x="72.2222%" y="197" width="0.0111%" height="15" fill="rgb(235,168,5)" fg:x="13013" fg:w="2"/><text x="72.4722%" y="207.50"></text></g><g><title>ntdll`RtlAllocateHeap (2 samples, 0.01%)</title><rect x="72.2222%" y="181" width="0.0111%" height="15" fill="rgb(221,155,16)" fg:x="13013" fg:w="2"/><text x="72.4722%" y="191.50"></text></g><g><title>toy`alloc::raw_vec::impl$2::reserve::do_reserve_and_handle&lt;petgraph::graph_impl::EdgeIndex (4 samples, 0.02%)</title><rect x="72.2222%" y="229" width="0.0222%" height="15" fill="rgb(215,215,53)" fg:x="13013" fg:w="4"/><text x="72.4722%" y="239.50"></text></g><g><title>toy`alloc::raw_vec::finish_grow (4 samples, 0.02%)</title><rect x="72.2222%" y="213" width="0.0222%" height="15" fill="rgb(223,4,10)" fg:x="13013" fg:w="4"/><text x="72.4722%" y="223.50"></text></g><g><title>ntdll`RtlReAllocateHeap (2 samples, 0.01%)</title><rect x="72.2333%" y="197" width="0.0111%" height="15" fill="rgb(234,103,6)" fg:x="13015" fg:w="2"/><text x="72.4833%" y="207.50"></text></g><g><title>ntdll`RtlReAllocateHeap (2 samples, 0.01%)</title><rect x="72.2333%" y="181" width="0.0111%" height="15" fill="rgb(227,97,0)" fg:x="13015" fg:w="2"/><text x="72.4833%" y="191.50"></text></g><g><title>ntdll`RtlReAllocateHeap (2 samples, 0.01%)</title><rect x="72.2333%" y="165" width="0.0111%" height="15" fill="rgb(234,150,53)" fg:x="13015" fg:w="2"/><text x="72.4833%" y="175.50"></text></g><g><title>ntdll`RtlAllocateHeap (2 samples, 0.01%)</title><rect x="72.2333%" y="149" width="0.0111%" height="15" fill="rgb(228,201,54)" fg:x="13015" fg:w="2"/><text x="72.4833%" y="159.50"></text></g><g><title>ntdll`RtlAllocateHeap (2 samples, 0.01%)</title><rect x="72.2333%" y="133" width="0.0111%" height="15" fill="rgb(222,22,37)" fg:x="13015" fg:w="2"/><text x="72.4833%" y="143.50"></text></g><g><title>toy`alloc::vec::in_place_collect::impl$1::from_iter&lt;aeg::critical_cycles::CriticalCycle,core::iter::adapters::map::Map&lt;alloc::vec::into_iter::IntoIter&lt;alloc::vec::Vec&lt;petgraph::graph_impl::EdgeIndex (2 samples, 0.01%)</title><rect x="72.2444%" y="229" width="0.0111%" height="15" fill="rgb(237,53,32)" fg:x="13017" fg:w="2"/><text x="72.4944%" y="239.50"></text></g><g><title>ntdll`RtlAllocateHeap (5 samples, 0.03%)</title><rect x="72.5608%" y="181" width="0.0278%" height="15" fill="rgb(233,25,53)" fg:x="13074" fg:w="5"/><text x="72.8108%" y="191.50"></text></g><g><title>ntdll`RtlAllocateHeap (25 samples, 0.14%)</title><rect x="72.4609%" y="213" width="0.1388%" height="15" fill="rgb(210,40,34)" fg:x="13056" fg:w="25"/><text x="72.7109%" y="223.50"></text></g><g><title>ntdll`RtlAllocateHeap (22 samples, 0.12%)</title><rect x="72.4775%" y="197" width="0.1221%" height="15" fill="rgb(241,220,44)" fg:x="13059" fg:w="22"/><text x="72.7275%" y="207.50"></text></g><g><title>ntdll`RtlUnhandledExceptionFilter (2 samples, 0.01%)</title><rect x="72.5885%" y="181" width="0.0111%" height="15" fill="rgb(235,28,35)" fg:x="13079" fg:w="2"/><text x="72.8385%" y="191.50"></text></g><g><title>toy`alloc::vec::spec_from_iter::impl$0::from_iter&lt;petgraph::graph_impl::NodeIndex&lt;u32&gt;,core::iter::adapters::filter_map::FilterMap&lt;petgraph::graph_impl::Edges&lt;aeg::aeg::AegEdge,enum2$ (64 samples, 0.36%)</title><rect x="72.2555%" y="229" width="0.3552%" height="15" fill="rgb(210,56,17)" fg:x="13019" fg:w="64"/><text x="72.5055%" y="239.50"></text></g><g><title>toy`std::alloc::__default_lib_allocator::__rdl_alloc (2 samples, 0.01%)</title><rect x="72.5996%" y="213" width="0.0111%" height="15" fill="rgb(224,130,29)" fg:x="13081" fg:w="2"/><text x="72.8496%" y="223.50"></text></g><g><title>ntdll`RtlCopyMemory (102 samples, 0.57%)</title><rect x="73.3988%" y="197" width="0.5661%" height="15" fill="rgb(235,212,8)" fg:x="13225" fg:w="102"/><text x="73.6488%" y="207.50"></text></g><g><title>ntdll`RtlTryAcquirePebLock (18 samples, 0.10%)</title><rect x="73.8650%" y="181" width="0.0999%" height="15" fill="rgb(223,33,50)" fg:x="13309" fg:w="18"/><text x="74.1150%" y="191.50"></text></g><g><title>ntdll`RtlTryAcquirePebLock (18 samples, 0.10%)</title><rect x="73.8650%" y="165" width="0.0999%" height="15" fill="rgb(219,149,13)" fg:x="13309" fg:w="18"/><text x="74.1150%" y="175.50"></text></g><g><title>ntdll`RtlFreeHeap (17 samples, 0.09%)</title><rect x="73.8706%" y="149" width="0.0944%" height="15" fill="rgb(250,156,29)" fg:x="13310" fg:w="17"/><text x="74.1206%" y="159.50"></text></g><g><title>ntdll`RtlGetCurrentServiceSessionId (17 samples, 0.09%)</title><rect x="73.8706%" y="133" width="0.0944%" height="15" fill="rgb(216,193,19)" fg:x="13310" fg:w="17"/><text x="74.1206%" y="143.50"></text></g><g><title>ntdll`RtlDeleteBoundaryDescriptor (17 samples, 0.09%)</title><rect x="73.8706%" y="117" width="0.0944%" height="15" fill="rgb(216,135,14)" fg:x="13310" fg:w="17"/><text x="74.1206%" y="127.50"></text></g><g><title>ntdll`RtlTryEnterCriticalSection (16 samples, 0.09%)</title><rect x="73.8761%" y="101" width="0.0888%" height="15" fill="rgb(241,47,5)" fg:x="13311" fg:w="16"/><text x="74.1261%" y="111.50"></text></g><g><title>ntdll`RtlTryEnterCriticalSection (16 samples, 0.09%)</title><rect x="73.8761%" y="85" width="0.0888%" height="15" fill="rgb(233,42,35)" fg:x="13311" fg:w="16"/><text x="74.1261%" y="95.50"></text></g><g><title>ntdll`RtlTryEnterCriticalSection (16 samples, 0.09%)</title><rect x="73.8761%" y="69" width="0.0888%" height="15" fill="rgb(231,13,6)" fg:x="13311" fg:w="16"/><text x="74.1261%" y="79.50"></text></g><g><title>ntdll`RtlTryEnterCriticalSection (16 samples, 0.09%)</title><rect x="73.8761%" y="53" width="0.0888%" height="15" fill="rgb(207,181,40)" fg:x="13311" fg:w="16"/><text x="74.1261%" y="63.50"></text></g><g><title>ntdll`NtFreeVirtualMemory (16 samples, 0.09%)</title><rect x="73.8761%" y="37" width="0.0888%" height="15" fill="rgb(254,173,49)" fg:x="13311" fg:w="16"/><text x="74.1261%" y="47.50"></text></g><g><title>ntdll`RtlFreeHeap (192 samples, 1.07%)</title><rect x="73.3489%" y="213" width="1.0656%" height="15" fill="rgb(221,1,38)" fg:x="13216" fg:w="192"/><text x="73.5989%" y="223.50"></text></g><g><title>ntdll`RtlGetCurrentServiceSessionId (81 samples, 0.45%)</title><rect x="73.9649%" y="197" width="0.4496%" height="15" fill="rgb(206,124,46)" fg:x="13327" fg:w="81"/><text x="74.2149%" y="207.50"></text></g><g><title>ntdll`RtlFreeHeap (2 samples, 0.01%)</title><rect x="74.4034%" y="181" width="0.0111%" height="15" fill="rgb(249,21,11)" fg:x="13406" fg:w="2"/><text x="74.6534%" y="191.50"></text></g><g><title>toy`core::ptr::drop_in_place&lt;slice2$&lt;aeg::critical_cycles::IncompleteMinimalCycle (327 samples, 1.81%)</title><rect x="72.6107%" y="229" width="1.8149%" height="15" fill="rgb(222,201,40)" fg:x="13083" fg:w="327"/><text x="72.8607%" y="239.50">t..</text></g><g><title>toy`std::alloc::__default_lib_allocator::__rdl_dealloc (2 samples, 0.01%)</title><rect x="74.4145%" y="213" width="0.0111%" height="15" fill="rgb(235,61,29)" fg:x="13408" fg:w="2"/><text x="74.6645%" y="223.50"></text></g><g><title>ntdll`RtlAllocateHeap (5 samples, 0.03%)</title><rect x="74.5865%" y="181" width="0.0278%" height="15" fill="rgb(219,207,3)" fg:x="13439" fg:w="5"/><text x="74.8365%" y="191.50"></text></g><g><title>ntdll`RtlCopyMemory (2 samples, 0.01%)</title><rect x="74.6143%" y="181" width="0.0111%" height="15" fill="rgb(222,56,46)" fg:x="13444" fg:w="2"/><text x="74.8643%" y="191.50"></text></g><g><title>ntdll`RtlAllocateHeap (39 samples, 0.22%)</title><rect x="74.4311%" y="213" width="0.2165%" height="15" fill="rgb(239,76,54)" fg:x="13411" fg:w="39"/><text x="74.6811%" y="223.50"></text></g><g><title>ntdll`RtlAllocateHeap (35 samples, 0.19%)</title><rect x="74.4533%" y="197" width="0.1943%" height="15" fill="rgb(231,124,27)" fg:x="13415" fg:w="35"/><text x="74.7033%" y="207.50"></text></g><g><title>ntdll`RtlUnhandledExceptionFilter (4 samples, 0.02%)</title><rect x="74.6254%" y="181" width="0.0222%" height="15" fill="rgb(249,195,6)" fg:x="13446" fg:w="4"/><text x="74.8754%" y="191.50"></text></g><g><title>toy`fixedbitset::FixedBitSet::with_capacity (41 samples, 0.23%)</title><rect x="74.4256%" y="229" width="0.2276%" height="15" fill="rgb(237,174,47)" fg:x="13410" fg:w="41"/><text x="74.6756%" y="239.50"></text></g><g><title>VCRUNTIME140`memcpy (5 samples, 0.03%)</title><rect x="77.3504%" y="213" width="0.0278%" height="15" fill="rgb(206,201,31)" fg:x="13937" fg:w="5"/><text x="77.6004%" y="223.50"></text></g><g><title>VCRUNTIME140`memmove (128 samples, 0.71%)</title><rect x="77.3782%" y="213" width="0.7104%" height="15" fill="rgb(231,57,52)" fg:x="13942" fg:w="128"/><text x="77.6282%" y="223.50"></text></g><g><title>ntdll`RtlAllocateHeap (741 samples, 4.11%)</title><rect x="90.3319%" y="181" width="4.1126%" height="15" fill="rgb(248,177,22)" fg:x="16276" fg:w="741"/><text x="90.5819%" y="191.50">ntdl..</text></g><g><title>ntdll`RtlAllocateHeap (108 samples, 0.60%)</title><rect x="93.8450%" y="165" width="0.5994%" height="15" fill="rgb(215,211,37)" fg:x="16909" fg:w="108"/><text x="94.0950%" y="175.50"></text></g><g><title>ntdll`ExpInterlockedPopEntrySListEnd (2 samples, 0.01%)</title><rect x="94.4500%" y="165" width="0.0111%" height="15" fill="rgb(241,128,51)" fg:x="17018" fg:w="2"/><text x="94.7000%" y="175.50"></text></g><g><title>ntdll`NtProtectVirtualMemory (3 samples, 0.02%)</title><rect x="94.4666%" y="149" width="0.0167%" height="15" fill="rgb(227,165,31)" fg:x="17021" fg:w="3"/><text x="94.7166%" y="159.50"></text></g><g><title>ntdll`NtAllocateVirtualMemory (5 samples, 0.03%)</title><rect x="94.4999%" y="101" width="0.0278%" height="15" fill="rgb(228,167,24)" fg:x="17027" fg:w="5"/><text x="94.7499%" y="111.50"></text></g><g><title>ntdll`RtlEnumerateGenericTableWithoutSplayingAvl (17 samples, 0.09%)</title><rect x="94.4444%" y="181" width="0.0944%" height="15" fill="rgb(228,143,12)" fg:x="17017" fg:w="17"/><text x="94.6944%" y="191.50"></text></g><g><title>ntdll`RtlEnumerateGenericTableWithoutSplayingAvl (13 samples, 0.07%)</title><rect x="94.4666%" y="165" width="0.0722%" height="15" fill="rgb(249,149,8)" fg:x="17021" fg:w="13"/><text x="94.7166%" y="175.50"></text></g><g><title>ntdll`RtlAllocateHeap (10 samples, 0.06%)</title><rect x="94.4833%" y="149" width="0.0555%" height="15" fill="rgb(243,35,44)" fg:x="17024" fg:w="10"/><text x="94.7333%" y="159.50"></text></g><g><title>ntdll`RtlAllocateHeap (10 samples, 0.06%)</title><rect x="94.4833%" y="133" width="0.0555%" height="15" fill="rgb(246,89,9)" fg:x="17024" fg:w="10"/><text x="94.7333%" y="143.50"></text></g><g><title>ntdll`RtlTryEnterCriticalSection (7 samples, 0.04%)</title><rect x="94.4999%" y="117" width="0.0389%" height="15" fill="rgb(233,213,13)" fg:x="17027" fg:w="7"/><text x="94.7499%" y="127.50"></text></g><g><title>ntdll`RtlTryEnterCriticalSection (2 samples, 0.01%)</title><rect x="94.5277%" y="101" width="0.0111%" height="15" fill="rgb(233,141,41)" fg:x="17032" fg:w="2"/><text x="94.7777%" y="111.50"></text></g><g><title>ntdll`RtlAllocateHeap (3,501 samples, 19.43%)</title><rect x="78.0886%" y="213" width="19.4306%" height="15" fill="rgb(239,167,4)" fg:x="14070" fg:w="3501"/><text x="78.3386%" y="223.50">ntdll`RtlAllocateHeap</text></g><g><title>ntdll`RtlAllocateHeap (2,917 samples, 16.19%)</title><rect x="81.3298%" y="197" width="16.1894%" height="15" fill="rgb(209,217,16)" fg:x="14654" fg:w="2917"/><text x="81.5798%" y="207.50">ntdll`RtlAllocateHeap</text></g><g><title>ntdll`RtlUnhandledExceptionFilter (537 samples, 2.98%)</title><rect x="94.5388%" y="181" width="2.9804%" height="15" fill="rgb(219,88,35)" fg:x="17034" fg:w="537"/><text x="94.7888%" y="191.50">ntd..</text></g><g><title>toy`_rust_alloc (21 samples, 0.12%)</title><rect x="97.5191%" y="213" width="0.1166%" height="15" fill="rgb(220,193,23)" fg:x="17571" fg:w="21"/><text x="97.7691%" y="223.50"></text></g><g><title>toy`memcpy (2 samples, 0.01%)</title><rect x="97.6357%" y="213" width="0.0111%" height="15" fill="rgb(230,90,52)" fg:x="17592" fg:w="2"/><text x="97.8857%" y="223.50"></text></g><g><title>toy`hashbrown::raw::impl$13::clone&lt;tuple$&lt;usize,alloc::vec::Vec (4,223 samples, 23.44%)</title><rect x="74.6531%" y="229" width="23.4377%" height="15" fill="rgb(252,106,19)" fg:x="13451" fg:w="4223"/><text x="74.9031%" y="239.50">toy`hashbrown::raw::impl$13::clone&lt;tu..</text></g><g><title>toy`std::alloc::__default_lib_allocator::__rdl_alloc (80 samples, 0.44%)</title><rect x="97.6468%" y="213" width="0.4440%" height="15" fill="rgb(206,74,20)" fg:x="17594" fg:w="80"/><text x="97.8968%" y="223.50"></text></g><g><title>toy`memcpy (4 samples, 0.02%)</title><rect x="98.0908%" y="229" width="0.0222%" height="15" fill="rgb(230,138,44)" fg:x="17674" fg:w="4"/><text x="98.3408%" y="239.50"></text></g><g><title>ntdll`RtlFreeHeap (7 samples, 0.04%)</title><rect x="98.4293%" y="213" width="0.0389%" height="15" fill="rgb(235,182,43)" fg:x="17735" fg:w="7"/><text x="98.6793%" y="223.50"></text></g><g><title>ntdll`RtlGetCurrentServiceSessionId (6 samples, 0.03%)</title><rect x="98.4349%" y="197" width="0.0333%" height="15" fill="rgb(242,16,51)" fg:x="17736" fg:w="6"/><text x="98.6849%" y="207.50"></text></g><g><title>ntdll`RtlDeleteBoundaryDescriptor (6 samples, 0.03%)</title><rect x="98.4349%" y="181" width="0.0333%" height="15" fill="rgb(248,9,4)" fg:x="17736" fg:w="6"/><text x="98.6849%" y="191.50"></text></g><g><title>toy`alloc::collections::binary_heap::BinaryHeap&lt;petgraph::scored::MinScored&lt;i32,petgraph::graph_impl::NodeIndex&lt;u32&gt; &gt;,alloc::alloc::Global&gt;::pop&lt;petgraph::scored::MinScored&lt;i32,petgraph::graph_impl::NodeIndex (3 samples, 0.02%)</title><rect x="98.4682%" y="213" width="0.0167%" height="15" fill="rgb(210,31,22)" fg:x="17742" fg:w="3"/><text x="98.7182%" y="223.50"></text></g><g><title>ntdll`RtlAllocateHeap (6 samples, 0.03%)</title><rect x="98.4904%" y="133" width="0.0333%" height="15" fill="rgb(239,54,39)" fg:x="17746" fg:w="6"/><text x="98.7404%" y="143.50"></text></g><g><title>ntdll`RtlAllocateHeap (5 samples, 0.03%)</title><rect x="98.4959%" y="117" width="0.0278%" height="15" fill="rgb(230,99,41)" fg:x="17747" fg:w="5"/><text x="98.7459%" y="127.50"></text></g><g><title>toy`alloc::raw_vec::RawVec&lt;petgraph::graph_impl::NodeIndex&lt;u32&gt;,alloc::alloc::Global&gt;::reserve_for_push&lt;petgraph::graph_impl::NodeIndex (9 samples, 0.05%)</title><rect x="98.4848%" y="213" width="0.0500%" height="15" fill="rgb(253,106,12)" fg:x="17745" fg:w="9"/><text x="98.7348%" y="223.50"></text></g><g><title>toy`alloc::raw_vec::finish_grow (9 samples, 0.05%)</title><rect x="98.4848%" y="197" width="0.0500%" height="15" fill="rgb(213,46,41)" fg:x="17745" fg:w="9"/><text x="98.7348%" y="207.50"></text></g><g><title>ntdll`RtlReAllocateHeap (9 samples, 0.05%)</title><rect x="98.4848%" y="181" width="0.0500%" height="15" fill="rgb(215,133,35)" fg:x="17745" fg:w="9"/><text x="98.7348%" y="191.50"></text></g><g><title>ntdll`RtlReAllocateHeap (8 samples, 0.04%)</title><rect x="98.4904%" y="165" width="0.0444%" height="15" fill="rgb(213,28,5)" fg:x="17746" fg:w="8"/><text x="98.7404%" y="175.50"></text></g><g><title>ntdll`RtlReAllocateHeap (8 samples, 0.04%)</title><rect x="98.4904%" y="149" width="0.0444%" height="15" fill="rgb(215,77,49)" fg:x="17746" fg:w="8"/><text x="98.7404%" y="159.50"></text></g><g><title>ntdll`RtlFreeHeap (2 samples, 0.01%)</title><rect x="98.5237%" y="133" width="0.0111%" height="15" fill="rgb(248,100,22)" fg:x="17752" fg:w="2"/><text x="98.7737%" y="143.50"></text></g><g><title>ntdll`RtlAllocateHeap (5 samples, 0.03%)</title><rect x="98.5570%" y="181" width="0.0278%" height="15" fill="rgb(208,67,9)" fg:x="17758" fg:w="5"/><text x="98.8070%" y="191.50"></text></g><g><title>ntdll`RtlAllocateHeap (5 samples, 0.03%)</title><rect x="98.5570%" y="165" width="0.0278%" height="15" fill="rgb(219,133,21)" fg:x="17758" fg:w="5"/><text x="98.8070%" y="175.50"></text></g><g><title>ntdll`RtlAllocateHeap (8 samples, 0.04%)</title><rect x="98.5903%" y="133" width="0.0444%" height="15" fill="rgb(246,46,29)" fg:x="17764" fg:w="8"/><text x="98.8403%" y="143.50"></text></g><g><title>ntdll`RtlAllocateHeap (7 samples, 0.04%)</title><rect x="98.5958%" y="117" width="0.0389%" height="15" fill="rgb(246,185,52)" fg:x="17765" fg:w="7"/><text x="98.8458%" y="127.50"></text></g><g><title>toy`alloc::raw_vec::RawVec&lt;petgraph::scored::MinScored&lt;i32,petgraph::graph_impl::NodeIndex&lt;u32&gt; &gt;,alloc::alloc::Global&gt;::reserve_for_push&lt;petgraph::scored::MinScored&lt;i32,petgraph::graph_impl::NodeIndex (19 samples, 0.11%)</title><rect x="98.5348%" y="213" width="0.1055%" height="15" fill="rgb(252,136,11)" fg:x="17754" fg:w="19"/><text x="98.7848%" y="223.50"></text></g><g><title>toy`alloc::raw_vec::finish_grow (17 samples, 0.09%)</title><rect x="98.5459%" y="197" width="0.0944%" height="15" fill="rgb(219,138,53)" fg:x="17756" fg:w="17"/><text x="98.7959%" y="207.50"></text></g><g><title>ntdll`RtlReAllocateHeap (10 samples, 0.06%)</title><rect x="98.5847%" y="181" width="0.0555%" height="15" fill="rgb(211,51,23)" fg:x="17763" fg:w="10"/><text x="98.8347%" y="191.50"></text></g><g><title>ntdll`RtlReAllocateHeap (10 samples, 0.06%)</title><rect x="98.5847%" y="165" width="0.0555%" height="15" fill="rgb(247,221,28)" fg:x="17763" fg:w="10"/><text x="98.8347%" y="175.50"></text></g><g><title>ntdll`RtlReAllocateHeap (9 samples, 0.05%)</title><rect x="98.5903%" y="149" width="0.0500%" height="15" fill="rgb(251,222,45)" fg:x="17764" fg:w="9"/><text x="98.8403%" y="159.50"></text></g><g><title>toy`core::hash::BuildHasher::hash_one&lt;std::hash::random::RandomState,ref$&lt;petgraph::graph_impl::NodeIndex (2 samples, 0.01%)</title><rect x="98.6402%" y="213" width="0.0111%" height="15" fill="rgb(217,162,53)" fg:x="17773" fg:w="2"/><text x="98.8902%" y="223.50"></text></g><g><title>toy`core::hash::sip::impl$5::write (6 samples, 0.03%)</title><rect x="98.6513%" y="213" width="0.0333%" height="15" fill="rgb(229,93,14)" fg:x="17775" fg:w="6"/><text x="98.9013%" y="223.50"></text></g><g><title>toy`core::hash::BuildHasher::hash_one&lt;std::hash::random::RandomState,ref$&lt;petgraph::graph_impl::NodeIndex (11 samples, 0.06%)</title><rect x="98.7235%" y="197" width="0.0611%" height="15" fill="rgb(209,67,49)" fg:x="17788" fg:w="11"/><text x="98.9735%" y="207.50"></text></g><g><title>toy`core::hash::sip::impl$5::write (2 samples, 0.01%)</title><rect x="98.7734%" y="181" width="0.0111%" height="15" fill="rgb(213,87,29)" fg:x="17797" fg:w="2"/><text x="99.0234%" y="191.50"></text></g><g><title>ntdll`RtlAllocateHeap (12 samples, 0.07%)</title><rect x="98.9122%" y="149" width="0.0666%" height="15" fill="rgb(205,151,52)" fg:x="17822" fg:w="12"/><text x="99.1622%" y="159.50"></text></g><g><title>ntdll`RtlAllocateHeap (9 samples, 0.05%)</title><rect x="98.9288%" y="133" width="0.0500%" height="15" fill="rgb(253,215,39)" fg:x="17825" fg:w="9"/><text x="99.1788%" y="143.50"></text></g><g><title>ntdll`RtlAllocateHeap (25 samples, 0.14%)</title><rect x="98.8456%" y="181" width="0.1388%" height="15" fill="rgb(221,220,41)" fg:x="17810" fg:w="25"/><text x="99.0956%" y="191.50"></text></g><g><title>ntdll`RtlAllocateHeap (23 samples, 0.13%)</title><rect x="98.8567%" y="165" width="0.1277%" height="15" fill="rgb(218,133,21)" fg:x="17812" fg:w="23"/><text x="99.1067%" y="175.50"></text></g><g><title>ntdll`RtlFreeHeap (3 samples, 0.02%)</title><rect x="98.9843%" y="181" width="0.0167%" height="15" fill="rgb(221,193,43)" fg:x="17835" fg:w="3"/><text x="99.2343%" y="191.50"></text></g><g><title>ntdll`RtlCopyMemory (3 samples, 0.02%)</title><rect x="98.9843%" y="165" width="0.0167%" height="15" fill="rgb(240,128,52)" fg:x="17835" fg:w="3"/><text x="99.2343%" y="175.50"></text></g><g><title>toy`hashbrown::map::HashMap&lt;petgraph::graph_impl::NodeIndex&lt;u32&gt;,petgraph::graph_impl::NodeIndex&lt;u32&gt;,std::hash::random::RandomState,alloc::alloc::Global&gt;::insert&lt;petgraph::graph_impl::NodeIndex&lt;u32&gt;,petgraph::graph_impl::NodeIndex (70 samples, 0.39%)</title><rect x="98.6846%" y="213" width="0.3885%" height="15" fill="rgb(253,114,12)" fg:x="17781" fg:w="70"/><text x="98.9346%" y="223.50"></text></g><g><title>toy`hashbrown::raw::RawTable&lt;tuple$&lt;petgraph::graph_impl::NodeIndex&lt;u32&gt;,petgraph::graph_impl::NodeIndex&lt;u32&gt; &gt;,alloc::alloc::Global&gt;::reserve_rehash&lt;tuple$&lt;petgraph::graph_impl::NodeIndex&lt;u32&gt;,petgraph::graph_impl::NodeIndex&lt;u32&gt; &gt;,alloc::alloc::Global,hashbrown::map::make_hasher::closure_env$0&lt;petgraph::graph_impl::NodeIndex&lt;u32&gt;,petgraph::graph_impl::NodeIndex (52 samples, 0.29%)</title><rect x="98.7845%" y="197" width="0.2886%" height="15" fill="rgb(215,223,47)" fg:x="17799" fg:w="52"/><text x="99.0345%" y="207.50"></text></g><g><title>toy`core::hash::BuildHasher::hash_one&lt;std::hash::random::RandomState,ref$&lt;petgraph::graph_impl::NodeIndex (13 samples, 0.07%)</title><rect x="99.0010%" y="181" width="0.0722%" height="15" fill="rgb(248,225,23)" fg:x="17838" fg:w="13"/><text x="99.2510%" y="191.50"></text></g><g><title>toy`core::hash::sip::impl$5::write (2 samples, 0.01%)</title><rect x="99.0620%" y="165" width="0.0111%" height="15" fill="rgb(250,108,0)" fg:x="17849" fg:w="2"/><text x="99.3120%" y="175.50"></text></g><g><title>ntdll`RtlAllocateHeap (5 samples, 0.03%)</title><rect x="99.2119%" y="165" width="0.0278%" height="15" fill="rgb(228,208,7)" fg:x="17876" fg:w="5"/><text x="99.4619%" y="175.50"></text></g><g><title>ntdll`RtlAllocateHeap (5 samples, 0.03%)</title><rect x="99.2119%" y="149" width="0.0278%" height="15" fill="rgb(244,45,10)" fg:x="17876" fg:w="5"/><text x="99.4619%" y="159.50"></text></g><g><title>ntdll`RtlAllocateHeap (19 samples, 0.11%)</title><rect x="99.1508%" y="197" width="0.1055%" height="15" fill="rgb(207,125,25)" fg:x="17865" fg:w="19"/><text x="99.4008%" y="207.50"></text></g><g><title>ntdll`RtlAllocateHeap (18 samples, 0.10%)</title><rect x="99.1564%" y="181" width="0.0999%" height="15" fill="rgb(210,195,18)" fg:x="17866" fg:w="18"/><text x="99.4064%" y="191.50"></text></g><g><title>ntdll`RtlUnhandledExceptionFilter (2 samples, 0.01%)</title><rect x="99.2452%" y="165" width="0.0111%" height="15" fill="rgb(249,80,12)" fg:x="17882" fg:w="2"/><text x="99.4952%" y="175.50"></text></g><g><title>ntdll`RtlFreeHeap (2 samples, 0.01%)</title><rect x="99.2563%" y="197" width="0.0111%" height="15" fill="rgb(221,65,9)" fg:x="17884" fg:w="2"/><text x="99.5063%" y="207.50"></text></g><g><title>toy`hashbrown::raw::RawTable&lt;tuple$&lt;petgraph::graph_impl::NodeIndex&lt;u32&gt;,petgraph::graph_impl::NodeIndex&lt;u32&gt; &gt;,alloc::alloc::Global&gt;::reserve_rehash&lt;tuple$&lt;petgraph::graph_impl::NodeIndex&lt;u32&gt;,petgraph::graph_impl::NodeIndex&lt;u32&gt; &gt;,alloc::alloc::Global,hashbrown::map::make_hasher::closure_env$0&lt;petgraph::graph_impl::NodeIndex&lt;u32&gt;,petgraph::graph_impl::NodeIndex (49 samples, 0.27%)</title><rect x="99.0731%" y="213" width="0.2720%" height="15" fill="rgb(235,49,36)" fg:x="17851" fg:w="49"/><text x="99.3231%" y="223.50"></text></g><g><title>toy`core::hash::BuildHasher::hash_one&lt;std::hash::random::RandomState,ref$&lt;petgraph::graph_impl::NodeIndex (14 samples, 0.08%)</title><rect x="99.2674%" y="197" width="0.0777%" height="15" fill="rgb(225,32,20)" fg:x="17886" fg:w="14"/><text x="99.5174%" y="207.50"></text></g><g><title>toy`core::hash::sip::impl$5::write (4 samples, 0.02%)</title><rect x="99.3229%" y="181" width="0.0222%" height="15" fill="rgb(215,141,46)" fg:x="17896" fg:w="4"/><text x="99.5729%" y="191.50"></text></g><g><title>toy`petgraph::algo::astar::astar&lt;ref$&lt;petgraph::graph_impl::Graph&lt;enum2$&lt;aeg::aeg::Node&gt;,aeg::aeg::AegEdge,enum2$ (227 samples, 1.26%)</title><rect x="98.1130%" y="229" width="1.2599%" height="15" fill="rgb(250,160,47)" fg:x="17678" fg:w="227"/><text x="98.3630%" y="239.50"></text></g><g><title>toy`std::hash::random::impl$0::new::KEYS::__getit::__KEY (5 samples, 0.03%)</title><rect x="99.3451%" y="213" width="0.0278%" height="15" fill="rgb(216,222,40)" fg:x="17900" fg:w="5"/><text x="99.5951%" y="223.50"></text></g><g><title>toy`std::alloc::__default_lib_allocator::__rdl_alloc (23 samples, 0.13%)</title><rect x="99.3728%" y="229" width="0.1277%" height="15" fill="rgb(234,217,39)" fg:x="17905" fg:w="23"/><text x="99.6228%" y="239.50"></text></g><g><title>toy`aeg::aeg::AbstractEventGraph::find_critical_cycles (17,926 samples, 99.49%)</title><rect x="0.2720%" y="261" width="99.4894%" height="15" fill="rgb(207,178,40)" fg:x="49" fg:w="17926"/><text x="0.5220%" y="271.50">toy`aeg::aeg::AbstractEventGraph::find_critical_cycles</text></g><g><title>toy`aeg::critical_cycles::critical_cycles (17,926 samples, 99.49%)</title><rect x="0.2720%" y="245" width="99.4894%" height="15" fill="rgb(221,136,13)" fg:x="49" fg:w="17926"/><text x="0.5220%" y="255.50">toy`aeg::critical_cycles::critical_cycles</text></g><g><title>toy`std::alloc::__default_lib_allocator::__rdl_dealloc (47 samples, 0.26%)</title><rect x="99.5005%" y="229" width="0.2609%" height="15" fill="rgb(249,199,10)" fg:x="17928" fg:w="47"/><text x="99.7505%" y="239.50"></text></g><g><title>toy`aeg::aeg::AbstractEventGraph::with_config (3 samples, 0.02%)</title><rect x="99.7613%" y="261" width="0.0167%" height="15" fill="rgb(249,222,13)" fg:x="17975" fg:w="3"/><text x="100.0113%" y="271.50"></text></g><g><title>toy`aeg::aeg::create_aeg (3 samples, 0.02%)</title><rect x="99.7613%" y="245" width="0.0167%" height="15" fill="rgb(244,185,38)" fg:x="17975" fg:w="3"/><text x="100.0113%" y="255.50"></text></g><g><title>toy`std::sys::common::thread_local::fast_local::Key&lt;core::cell::Cell&lt;tuple$&lt;u64,u64&gt; &gt; &gt;::try_initialize&lt;core::cell::Cell&lt;tuple$ (2 samples, 0.01%)</title><rect x="99.7669%" y="229" width="0.0111%" height="15" fill="rgb(236,202,9)" fg:x="17976" fg:w="2"/><text x="100.0169%" y="239.50"></text></g><g><title>toy`std::sys::windows::rand::hashmap_random_keys (2 samples, 0.01%)</title><rect x="99.7669%" y="213" width="0.0111%" height="15" fill="rgb(250,229,37)" fg:x="17976" fg:w="2"/><text x="100.0169%" y="223.50"></text></g><g><title>bcrypt`BCryptGenRandom (2 samples, 0.01%)</title><rect x="99.7669%" y="197" width="0.0111%" height="15" fill="rgb(206,174,23)" fg:x="17976" fg:w="2"/><text x="100.0169%" y="207.50"></text></g><g><title>bcrypt`BCryptGenRandom (2 samples, 0.01%)</title><rect x="99.7669%" y="181" width="0.0111%" height="15" fill="rgb(211,33,43)" fg:x="17976" fg:w="2"/><text x="100.0169%" y="191.50"></text></g><g><title>bcrypt`BCryptOpenAlgorithmProvider (2 samples, 0.01%)</title><rect x="99.7669%" y="165" width="0.0111%" height="15" fill="rgb(245,58,50)" fg:x="17976" fg:w="2"/><text x="100.0169%" y="175.50"></text></g><g><title>toy`parser::parse (3 samples, 0.02%)</title><rect x="99.7835%" y="261" width="0.0167%" height="15" fill="rgb(244,68,36)" fg:x="17979" fg:w="3"/><text x="100.0335%" y="271.50"></text></g><g><title>toy`pest::parser_state::state (2 samples, 0.01%)</title><rect x="99.7891%" y="245" width="0.0111%" height="15" fill="rgb(232,229,15)" fg:x="17980" fg:w="2"/><text x="100.0391%" y="255.50"></text></g><g><title>toy`petgraph::graph_impl::serialization::impl$2::serialize&lt;u32,ref_mut$&lt;serde_json::ser::Serializer&lt;ref_mut$&lt;alloc::vec::Vec (8 samples, 0.04%)</title><rect x="99.8113%" y="213" width="0.0444%" height="15" fill="rgb(254,30,23)" fg:x="17984" fg:w="8"/><text x="100.0613%" y="223.50"></text></g><g><title>toy`serde::ser::Serializer::collect_seq&lt;ref_mut$&lt;serde_json::ser::Serializer&lt;ref_mut$&lt;alloc::vec::Vec&lt;u8,alloc::alloc::Global&gt; &gt;,serde_json::ser::CompactFormatter&gt; &gt;,ref$&lt;alloc::vec::Vec (13 samples, 0.07%)</title><rect x="99.8002%" y="261" width="0.0722%" height="15" fill="rgb(235,160,14)" fg:x="17982" fg:w="13"/><text x="100.0502%" y="271.50"></text></g><g><title>toy`aeg::critical_cycles::_::impl$0::serialize&lt;ref_mut$&lt;serde_json::ser::Serializer&lt;ref_mut$&lt;alloc::vec::Vec (13 samples, 0.07%)</title><rect x="99.8002%" y="245" width="0.0722%" height="15" fill="rgb(212,155,44)" fg:x="17982" fg:w="13"/><text x="100.0502%" y="255.50"></text></g><g><title>toy`serde::ser::SerializeMap::serialize_entry&lt;enum2$&lt;serde_json::ser::Compound&lt;ref_mut$&lt;alloc::vec::Vec&lt;u8,alloc::alloc::Global&gt; &gt;,serde_json::ser::CompactFormatter&gt; &gt;,str$,alloc::vec::Vec&lt;petgraph::graph_impl::NodeIndex (13 samples, 0.07%)</title><rect x="99.8002%" y="229" width="0.0722%" height="15" fill="rgb(226,2,50)" fg:x="17982" fg:w="13"/><text x="100.0502%" y="239.50"></text></g><g><title>toy`serde_json::ser::format_escaped_str&lt;ref_mut$&lt;alloc::vec::Vec (3 samples, 0.02%)</title><rect x="99.8557%" y="213" width="0.0167%" height="15" fill="rgb(234,177,6)" fg:x="17992" fg:w="3"/><text x="100.1057%" y="223.50"></text></g><g><title>KERNELBASE`GetConsoleMode (6 samples, 0.03%)</title><rect x="99.8779%" y="133" width="0.0333%" height="15" fill="rgb(217,24,9)" fg:x="17996" fg:w="6"/><text x="100.1279%" y="143.50"></text></g><g><title>KERNELBASE`GetConsoleScreenBufferInfoEx (6 samples, 0.03%)</title><rect x="99.8779%" y="117" width="0.0333%" height="15" fill="rgb(220,13,46)" fg:x="17996" fg:w="6"/><text x="100.1279%" y="127.50"></text></g><g><title>KERNELBASE`GetConsoleScreenBufferInfoEx (6 samples, 0.03%)</title><rect x="99.8779%" y="101" width="0.0333%" height="15" fill="rgb(239,221,27)" fg:x="17996" fg:w="6"/><text x="100.1279%" y="111.50"></text></g><g><title>ntdll`NtDeviceIoControlFile (6 samples, 0.03%)</title><rect x="99.8779%" y="85" width="0.0333%" height="15" fill="rgb(222,198,25)" fg:x="17996" fg:w="6"/><text x="100.1279%" y="95.50"></text></g><g><title>toy`std::io::Write::write_all (13 samples, 0.07%)</title><rect x="99.8779%" y="165" width="0.0722%" height="15" fill="rgb(211,99,13)" fg:x="17996" fg:w="13"/><text x="100.1279%" y="175.50"></text></g><g><title>toy`std::sys::windows::stdio::write (13 samples, 0.07%)</title><rect x="99.8779%" y="149" width="0.0722%" height="15" fill="rgb(232,111,31)" fg:x="17996" fg:w="13"/><text x="100.1279%" y="159.50"></text></g><g><title>toy`std::sys::windows::stdio::write_valid_utf8_to_console (7 samples, 0.04%)</title><rect x="99.9112%" y="133" width="0.0389%" height="15" fill="rgb(245,82,37)" fg:x="18002" fg:w="7"/><text x="100.1612%" y="143.50"></text></g><g><title>KERNELBASE`WriteConsoleW (6 samples, 0.03%)</title><rect x="99.9167%" y="117" width="0.0333%" height="15" fill="rgb(227,149,46)" fg:x="18003" fg:w="6"/><text x="100.1667%" y="127.50"></text></g><g><title>KERNELBASE`WriteConsoleW (6 samples, 0.03%)</title><rect x="99.9167%" y="101" width="0.0333%" height="15" fill="rgb(218,36,50)" fg:x="18003" fg:w="6"/><text x="100.1667%" y="111.50"></text></g><g><title>KERNELBASE`GetConsoleScreenBufferInfoEx (6 samples, 0.03%)</title><rect x="99.9167%" y="85" width="0.0333%" height="15" fill="rgb(226,80,48)" fg:x="18003" fg:w="6"/><text x="100.1667%" y="95.50"></text></g><g><title>ntdll`NtDeviceIoControlFile (6 samples, 0.03%)</title><rect x="99.9167%" y="69" width="0.0333%" height="15" fill="rgb(238,224,15)" fg:x="18003" fg:w="6"/><text x="100.1667%" y="79.50"></text></g><g><title>toy`std::io::stdio::_print (14 samples, 0.08%)</title><rect x="99.8779%" y="261" width="0.0777%" height="15" fill="rgb(241,136,10)" fg:x="17996" fg:w="14"/><text x="100.1279%" y="271.50"></text></g><g><title>toy`std::io::stdio::impl$12::write_fmt (14 samples, 0.08%)</title><rect x="99.8779%" y="245" width="0.0777%" height="15" fill="rgb(208,32,45)" fg:x="17996" fg:w="14"/><text x="100.1279%" y="255.50"></text></g><g><title>toy`core::fmt::write (14 samples, 0.08%)</title><rect x="99.8779%" y="229" width="0.0777%" height="15" fill="rgb(207,135,9)" fg:x="17996" fg:w="14"/><text x="100.1279%" y="239.50"></text></g><g><title>toy`std::io::Write::write_fmt::impl$0::write_str (14 samples, 0.08%)</title><rect x="99.8779%" y="213" width="0.0777%" height="15" fill="rgb(206,86,44)" fg:x="17996" fg:w="14"/><text x="100.1279%" y="223.50"></text></g><g><title>toy`std::io::stdio::impl$13::write_all (14 samples, 0.08%)</title><rect x="99.8779%" y="197" width="0.0777%" height="15" fill="rgb(245,177,15)" fg:x="17996" fg:w="14"/><text x="100.1279%" y="207.50"></text></g><g><title>toy`std::io::buffered::bufwriter::BufWriter::write_all_cold (14 samples, 0.08%)</title><rect x="99.8779%" y="181" width="0.0777%" height="15" fill="rgb(206,64,50)" fg:x="17996" fg:w="14"/><text x="100.1279%" y="191.50"></text></g><g><title>toy`main (17,975 samples, 99.76%)</title><rect x="0.1998%" y="341" width="99.7613%" height="15" fill="rgb(234,36,40)" fg:x="36" fg:w="17975"/><text x="0.4498%" y="351.50">toy`main</text></g><g><title>toy`std::rt::lang_start_internal (17,975 samples, 99.76%)</title><rect x="0.1998%" y="325" width="99.7613%" height="15" fill="rgb(213,64,8)" fg:x="36" fg:w="17975"/><text x="0.4498%" y="335.50">toy`std::rt::lang_start_internal</text></g><g><title>toy`core::ops::function::FnOnce::call_once&lt;std::rt::lang_start::closure_env$0&lt;tuple$&lt;&gt; &gt;,tuple$ (17,975 samples, 99.76%)</title><rect x="0.1998%" y="309" width="99.7613%" height="15" fill="rgb(210,75,36)" fg:x="36" fg:w="17975"/><text x="0.4498%" y="319.50">toy`core::ops::function::FnOnce::call_once&lt;std::rt::lang_start::closure_env$0&lt;tuple$&lt;&gt; &gt;,tuple$</text></g><g><title>toy`std::sys_common::backtrace::__rust_begin_short_backtrace&lt;void (*)(),tuple$ (17,975 samples, 99.76%)</title><rect x="0.1998%" y="293" width="99.7613%" height="15" fill="rgb(229,88,21)" fg:x="36" fg:w="17975"/><text x="0.4498%" y="303.50">toy`std::sys_common::backtrace::__rust_begin_short_backtrace&lt;void (*)(),tuple$</text></g><g><title>toy`toy::main (17,975 samples, 99.76%)</title><rect x="0.1998%" y="277" width="99.7613%" height="15" fill="rgb(252,204,47)" fg:x="36" fg:w="17975"/><text x="0.4498%" y="287.50">toy`toy::main</text></g><g><title>ntdll`LdrControlFlowGuardEnforced (2 samples, 0.01%)</title><rect x="99.9778%" y="165" width="0.0111%" height="15" fill="rgb(208,77,27)" fg:x="18014" fg:w="2"/><text x="100.2278%" y="175.50"></text></g><g><title>ntdll`RtlImageNtHeaderEx (2 samples, 0.01%)</title><rect x="99.9778%" y="149" width="0.0111%" height="15" fill="rgb(221,76,26)" fg:x="18014" fg:w="2"/><text x="100.2278%" y="159.50"></text></g><g><title>ucrtbase`exit (6 samples, 0.03%)</title><rect x="99.9611%" y="341" width="0.0333%" height="15" fill="rgb(225,139,18)" fg:x="18011" fg:w="6"/><text x="100.2111%" y="351.50"></text></g><g><title>ucrtbase`exit (6 samples, 0.03%)</title><rect x="99.9611%" y="325" width="0.0333%" height="15" fill="rgb(230,137,11)" fg:x="18011" fg:w="6"/><text x="100.2111%" y="335.50"></text></g><g><title>ucrtbase`mbsicmp_l (5 samples, 0.03%)</title><rect x="99.9667%" y="309" width="0.0278%" height="15" fill="rgb(212,28,1)" fg:x="18012" fg:w="5"/><text x="100.2167%" y="319.50"></text></g><g><title>ucrtbase`o_iswascii (5 samples, 0.03%)</title><rect x="99.9667%" y="293" width="0.0278%" height="15" fill="rgb(248,164,17)" fg:x="18012" fg:w="5"/><text x="100.2167%" y="303.50"></text></g><g><title>KERNELBASE`LoadLibraryExW (5 samples, 0.03%)</title><rect x="99.9667%" y="277" width="0.0278%" height="15" fill="rgb(222,171,42)" fg:x="18012" fg:w="5"/><text x="100.2167%" y="287.50"></text></g><g><title>ntdll`LdrLoadDll (5 samples, 0.03%)</title><rect x="99.9667%" y="261" width="0.0278%" height="15" fill="rgb(243,84,45)" fg:x="18012" fg:w="5"/><text x="100.2167%" y="271.50"></text></g><g><title>ntdll`RtlUnicodeToCustomCPN (5 samples, 0.03%)</title><rect x="99.9667%" y="245" width="0.0278%" height="15" fill="rgb(252,49,23)" fg:x="18012" fg:w="5"/><text x="100.2167%" y="255.50"></text></g><g><title>ntdll`RtlImageRvaToSection (5 samples, 0.03%)</title><rect x="99.9667%" y="229" width="0.0278%" height="15" fill="rgb(215,19,7)" fg:x="18012" fg:w="5"/><text x="100.2167%" y="239.50"></text></g><g><title>ntdll`RtlQueryPerformanceCounter (4 samples, 0.02%)</title><rect x="99.9722%" y="213" width="0.0222%" height="15" fill="rgb(238,81,41)" fg:x="18013" fg:w="4"/><text x="100.2222%" y="223.50"></text></g><g><title>ntdll`RtlQueryPerformanceCounter (4 samples, 0.02%)</title><rect x="99.9722%" y="197" width="0.0222%" height="15" fill="rgb(210,199,37)" fg:x="18013" fg:w="4"/><text x="100.2222%" y="207.50"></text></g><g><title>ntdll`RtlQueryPerformanceCounter (3 samples, 0.02%)</title><rect x="99.9778%" y="181" width="0.0167%" height="15" fill="rgb(244,192,49)" fg:x="18014" fg:w="3"/><text x="100.2278%" y="191.50"></text></g><g><title>all (18,018 samples, 100%)</title><rect x="0.0000%" y="405" width="100.0000%" height="15" fill="rgb(226,211,11)" fg:x="0" fg:w="18018"/><text x="0.2500%" y="415.50"></text></g><g><title>ntdll`RtlUserThreadStart (17,992 samples, 99.86%)</title><rect x="0.1443%" y="389" width="99.8557%" height="15" fill="rgb(236,162,54)" fg:x="26" fg:w="17992"/><text x="0.3943%" y="399.50">ntdll`RtlUserThreadStart</text></g><g><title>KERNEL32`BaseThreadInitThunk (17,990 samples, 99.84%)</title><rect x="0.1554%" y="373" width="99.8446%" height="15" fill="rgb(220,229,9)" fg:x="28" fg:w="17990"/><text x="0.4054%" y="383.50">KERNEL32`BaseThreadInitThunk</text></g><g><title>toy`__scrt_common_main_seh (17,982 samples, 99.80%)</title><rect x="0.1998%" y="357" width="99.8002%" height="15" fill="rgb(250,87,22)" fg:x="36" fg:w="17982"/><text x="0.4498%" y="367.50">toy`__scrt_common_main_seh</text></g></svg></svg>