<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="454" onload="init(evt)" viewBox="0 0 1200 454" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="454" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="437.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="437.00"> </text><svg id="frames" x="10" width="1180" total_samples="113531"><g><title>ntdll`LdrInitializeThunk (25 samples, 0.02%)</title><rect x="0.0000%" y="389" width="0.0220%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="25"/><text x="0.2500%" y="399.50"></text></g><g><title>ntdll`LdrInitializeThunk (24 samples, 0.02%)</title><rect x="0.0009%" y="373" width="0.0211%" height="15" fill="rgb(217,0,24)" fg:x="1" fg:w="24"/><text x="0.2509%" y="383.50"></text></g><g><title>ntdll`EtwLogTraceEvent (24 samples, 0.02%)</title><rect x="0.0009%" y="357" width="0.0211%" height="15" fill="rgb(221,193,54)" fg:x="1" fg:w="24"/><text x="0.2509%" y="367.50"></text></g><g><title>ntdll`LdrInitShimEngineDynamic (24 samples, 0.02%)</title><rect x="0.0009%" y="341" width="0.0211%" height="15" fill="rgb(248,212,6)" fg:x="1" fg:w="24"/><text x="0.2509%" y="351.50"></text></g><g><title>ntdll`NtFreeVirtualMemory (34 samples, 0.03%)</title><rect x="0.1462%" y="85" width="0.0299%" height="15" fill="rgb(208,68,35)" fg:x="166" fg:w="34"/><text x="0.3962%" y="95.50"></text></g><g><title>ntdll`RtlCopyMemory (152 samples, 0.13%)</title><rect x="0.0432%" y="245" width="0.1339%" height="15" fill="rgb(232,128,0)" fg:x="49" fg:w="152"/><text x="0.2932%" y="255.50"></text></g><g><title>ntdll`RtlTryAcquirePebLock (86 samples, 0.08%)</title><rect x="0.1013%" y="229" width="0.0758%" height="15" fill="rgb(207,160,47)" fg:x="115" fg:w="86"/><text x="0.3513%" y="239.50"></text></g><g><title>ntdll`RtlTryAcquirePebLock (85 samples, 0.07%)</title><rect x="0.1022%" y="213" width="0.0749%" height="15" fill="rgb(228,23,34)" fg:x="116" fg:w="85"/><text x="0.3522%" y="223.50"></text></g><g><title>ntdll`RtlFreeHeap (82 samples, 0.07%)</title><rect x="0.1048%" y="197" width="0.0722%" height="15" fill="rgb(218,30,26)" fg:x="119" fg:w="82"/><text x="0.3548%" y="207.50"></text></g><g><title>ntdll`RtlGetCurrentServiceSessionId (82 samples, 0.07%)</title><rect x="0.1048%" y="181" width="0.0722%" height="15" fill="rgb(220,122,19)" fg:x="119" fg:w="82"/><text x="0.3548%" y="191.50"></text></g><g><title>ntdll`RtlDeleteBoundaryDescriptor (82 samples, 0.07%)</title><rect x="0.1048%" y="165" width="0.0722%" height="15" fill="rgb(250,228,42)" fg:x="119" fg:w="82"/><text x="0.3548%" y="175.50"></text></g><g><title>ntdll`RtlTryEnterCriticalSection (81 samples, 0.07%)</title><rect x="0.1057%" y="149" width="0.0713%" height="15" fill="rgb(240,193,28)" fg:x="120" fg:w="81"/><text x="0.3557%" y="159.50"></text></g><g><title>ntdll`RtlTryEnterCriticalSection (73 samples, 0.06%)</title><rect x="0.1127%" y="133" width="0.0643%" height="15" fill="rgb(216,20,37)" fg:x="128" fg:w="73"/><text x="0.3627%" y="143.50"></text></g><g><title>ntdll`RtlTryEnterCriticalSection (57 samples, 0.05%)</title><rect x="0.1268%" y="117" width="0.0502%" height="15" fill="rgb(206,188,39)" fg:x="144" fg:w="57"/><text x="0.3768%" y="127.50"></text></g><g><title>ntdll`RtlTryEnterCriticalSection (57 samples, 0.05%)</title><rect x="0.1268%" y="101" width="0.0502%" height="15" fill="rgb(217,207,13)" fg:x="144" fg:w="57"/><text x="0.3768%" y="111.50"></text></g><g><title>ntdll`RtlFreeHeap (429 samples, 0.38%)</title><rect x="0.0388%" y="261" width="0.3779%" height="15" fill="rgb(231,73,38)" fg:x="44" fg:w="429"/><text x="0.2888%" y="271.50"></text></g><g><title>ntdll`RtlGetCurrentServiceSessionId (272 samples, 0.24%)</title><rect x="0.1770%" y="245" width="0.2396%" height="15" fill="rgb(225,20,46)" fg:x="201" fg:w="272"/><text x="0.4270%" y="255.50"></text></g><g><title>KERNEL32`HeapFree (32 samples, 0.03%)</title><rect x="19.4678%" y="229" width="0.0282%" height="15" fill="rgb(210,31,41)" fg:x="22102" fg:w="32"/><text x="19.7178%" y="239.50"></text></g><g><title>VCRUNTIME140`memcmp (17 samples, 0.01%)</title><rect x="19.4960%" y="229" width="0.0150%" height="15" fill="rgb(221,200,47)" fg:x="22134" fg:w="17"/><text x="19.7460%" y="239.50"></text></g><g><title>VCRUNTIME140`memmove (137 samples, 0.12%)</title><rect x="19.5163%" y="229" width="0.1207%" height="15" fill="rgb(226,26,5)" fg:x="22157" fg:w="137"/><text x="19.7663%" y="239.50"></text></g><g><title>ntdll`RtlAllocateHeap (210 samples, 0.18%)</title><rect x="21.4250%" y="197" width="0.1850%" height="15" fill="rgb(249,33,26)" fg:x="24324" fg:w="210"/><text x="21.6750%" y="207.50"></text></g><g><title>ntdll`RtlEnumerateGenericTableWithoutSplayingAvl (18 samples, 0.02%)</title><rect x="21.6100%" y="197" width="0.0159%" height="15" fill="rgb(235,183,28)" fg:x="24534" fg:w="18"/><text x="21.8600%" y="207.50"></text></g><g><title>ntdll`RtlEnumerateGenericTableWithoutSplayingAvl (18 samples, 0.02%)</title><rect x="21.6100%" y="181" width="0.0159%" height="15" fill="rgb(221,5,38)" fg:x="24534" fg:w="18"/><text x="21.8600%" y="191.50"></text></g><g><title>ntdll`RtlAllocateHeap (15 samples, 0.01%)</title><rect x="21.6126%" y="165" width="0.0132%" height="15" fill="rgb(247,18,42)" fg:x="24537" fg:w="15"/><text x="21.8626%" y="175.50"></text></g><g><title>ntdll`RtlAllocateHeap (15 samples, 0.01%)</title><rect x="21.6126%" y="149" width="0.0132%" height="15" fill="rgb(241,131,45)" fg:x="24537" fg:w="15"/><text x="21.8626%" y="159.50"></text></g><g><title>ntdll`RtlAllocateHeap (2,624 samples, 2.31%)</title><rect x="19.6369%" y="229" width="2.3113%" height="15" fill="rgb(249,31,29)" fg:x="22294" fg:w="2624"/><text x="19.8869%" y="239.50">n..</text></g><g><title>ntdll`RtlAllocateHeap (2,205 samples, 1.94%)</title><rect x="20.0060%" y="213" width="1.9422%" height="15" fill="rgb(225,111,53)" fg:x="22713" fg:w="2205"/><text x="20.2560%" y="223.50">n..</text></g><g><title>ntdll`RtlUnhandledExceptionFilter (365 samples, 0.32%)</title><rect x="21.6267%" y="197" width="0.3215%" height="15" fill="rgb(238,160,17)" fg:x="24553" fg:w="365"/><text x="21.8767%" y="207.50"></text></g><g><title>ntdll`RtlGetCurrentServiceSessionId (13 samples, 0.01%)</title><rect x="25.7639%" y="197" width="0.0115%" height="15" fill="rgb(214,148,48)" fg:x="29250" fg:w="13"/><text x="26.0139%" y="207.50"></text></g><g><title>ntdll`RtlLookupElementGenericTableAvl (12 samples, 0.01%)</title><rect x="25.7753%" y="197" width="0.0106%" height="15" fill="rgb(232,36,49)" fg:x="29263" fg:w="12"/><text x="26.0253%" y="207.50"></text></g><g><title>ntdll`NtProtectVirtualMemory (28 samples, 0.02%)</title><rect x="25.7912%" y="165" width="0.0247%" height="15" fill="rgb(209,103,24)" fg:x="29281" fg:w="28"/><text x="26.0412%" y="175.50"></text></g><g><title>ntdll`NtAllocateVirtualMemory (30 samples, 0.03%)</title><rect x="25.8299%" y="101" width="0.0264%" height="15" fill="rgb(229,88,8)" fg:x="29325" fg:w="30"/><text x="26.0799%" y="111.50"></text></g><g><title>ntdll`NtFreeVirtualMemory (45 samples, 0.04%)</title><rect x="25.9057%" y="85" width="0.0396%" height="15" fill="rgb(213,181,19)" fg:x="29411" fg:w="45"/><text x="26.1557%" y="95.50"></text></g><g><title>ntdll`RtlCopyMemory (4,903 samples, 4.32%)</title><rect x="22.2926%" y="213" width="4.3186%" height="15" fill="rgb(254,191,54)" fg:x="25309" fg:w="4903"/><text x="22.5426%" y="223.50">ntdll..</text></g><g><title>ntdll`RtlTryAcquirePebLock (937 samples, 0.83%)</title><rect x="25.7859%" y="197" width="0.8253%" height="15" fill="rgb(241,83,37)" fg:x="29275" fg:w="937"/><text x="26.0359%" y="207.50"></text></g><g><title>ntdll`RtlTryAcquirePebLock (932 samples, 0.82%)</title><rect x="25.7903%" y="181" width="0.8209%" height="15" fill="rgb(233,36,39)" fg:x="29280" fg:w="932"/><text x="26.0403%" y="191.50"></text></g><g><title>ntdll`RtlFreeHeap (903 samples, 0.80%)</title><rect x="25.8159%" y="165" width="0.7954%" height="15" fill="rgb(226,3,54)" fg:x="29309" fg:w="903"/><text x="26.0659%" y="175.50"></text></g><g><title>ntdll`RtlGetCurrentServiceSessionId (903 samples, 0.80%)</title><rect x="25.8159%" y="149" width="0.7954%" height="15" fill="rgb(245,192,40)" fg:x="29309" fg:w="903"/><text x="26.0659%" y="159.50"></text></g><g><title>ntdll`RtlDeleteBoundaryDescriptor (903 samples, 0.80%)</title><rect x="25.8159%" y="133" width="0.7954%" height="15" fill="rgb(238,167,29)" fg:x="29309" fg:w="903"/><text x="26.0659%" y="143.50"></text></g><g><title>ntdll`RtlTryEnterCriticalSection (892 samples, 0.79%)</title><rect x="25.8255%" y="117" width="0.7857%" height="15" fill="rgb(232,182,51)" fg:x="29320" fg:w="892"/><text x="26.0755%" y="127.50"></text></g><g><title>ntdll`RtlTryEnterCriticalSection (856 samples, 0.75%)</title><rect x="25.8573%" y="101" width="0.7540%" height="15" fill="rgb(231,60,39)" fg:x="29356" fg:w="856"/><text x="26.1073%" y="111.50"></text></g><g><title>ntdll`RtlTryEnterCriticalSection (756 samples, 0.67%)</title><rect x="25.9453%" y="85" width="0.6659%" height="15" fill="rgb(208,69,12)" fg:x="29456" fg:w="756"/><text x="26.1953%" y="95.50"></text></g><g><title>ntdll`RtlTryEnterCriticalSection (748 samples, 0.66%)</title><rect x="25.9524%" y="69" width="0.6589%" height="15" fill="rgb(235,93,37)" fg:x="29464" fg:w="748"/><text x="26.2024%" y="79.50"></text></g><g><title>ntdll`NtFreeVirtualMemory (651 samples, 0.57%)</title><rect x="26.0378%" y="53" width="0.5734%" height="15" fill="rgb(213,116,39)" fg:x="29561" fg:w="651"/><text x="26.2878%" y="63.50"></text></g><g><title>ntdll`RtlFreeHeap (6,280 samples, 5.53%)</title><rect x="21.9482%" y="229" width="5.5315%" height="15" fill="rgb(222,207,29)" fg:x="24918" fg:w="6280"/><text x="22.1982%" y="239.50">ntdll`R..</text></g><g><title>ntdll`RtlGetCurrentServiceSessionId (986 samples, 0.87%)</title><rect x="26.6112%" y="213" width="0.8685%" height="15" fill="rgb(206,96,30)" fg:x="30212" fg:w="986"/><text x="26.8612%" y="223.50"></text></g><g><title>ntdll`RtlFreeHeap (75 samples, 0.07%)</title><rect x="27.4137%" y="197" width="0.0661%" height="15" fill="rgb(218,138,4)" fg:x="31123" fg:w="75"/><text x="27.6637%" y="207.50"></text></g><g><title>toy`_rust_dealloc (18 samples, 0.02%)</title><rect x="27.4850%" y="229" width="0.0159%" height="15" fill="rgb(250,191,14)" fg:x="31204" fg:w="18"/><text x="27.7350%" y="239.50"></text></g><g><title>ntdll`RtlCopyMemory (133 samples, 0.12%)</title><rect x="29.0617%" y="197" width="0.1171%" height="15" fill="rgb(239,60,40)" fg:x="32994" fg:w="133"/><text x="29.3117%" y="207.50"></text></g><g><title>ntdll`RtlFreeHeap (212 samples, 0.19%)</title><rect x="29.0414%" y="213" width="0.1867%" height="15" fill="rgb(206,27,48)" fg:x="32971" fg:w="212"/><text x="29.2914%" y="223.50"></text></g><g><title>ntdll`RtlGetCurrentServiceSessionId (56 samples, 0.05%)</title><rect x="29.1788%" y="197" width="0.0493%" height="15" fill="rgb(225,35,8)" fg:x="33127" fg:w="56"/><text x="29.4288%" y="207.50"></text></g><g><title>ntdll`RtlAllocateHeap (40 samples, 0.04%)</title><rect x="29.4563%" y="101" width="0.0352%" height="15" fill="rgb(250,213,24)" fg:x="33442" fg:w="40"/><text x="29.7063%" y="111.50"></text></g><g><title>ntdll`RtlAllocateHeap (236 samples, 0.21%)</title><rect x="29.3180%" y="133" width="0.2079%" height="15" fill="rgb(247,123,22)" fg:x="33285" fg:w="236"/><text x="29.5680%" y="143.50"></text></g><g><title>ntdll`RtlAllocateHeap (205 samples, 0.18%)</title><rect x="29.3453%" y="117" width="0.1806%" height="15" fill="rgb(231,138,38)" fg:x="33316" fg:w="205"/><text x="29.5953%" y="127.50"></text></g><g><title>ntdll`RtlUnhandledExceptionFilter (36 samples, 0.03%)</title><rect x="29.4941%" y="101" width="0.0317%" height="15" fill="rgb(231,145,46)" fg:x="33485" fg:w="36"/><text x="29.7441%" y="111.50"></text></g><g><title>ntdll`RtlCopyMemory (66 samples, 0.06%)</title><rect x="29.5364%" y="117" width="0.0581%" height="15" fill="rgb(251,118,11)" fg:x="33533" fg:w="66"/><text x="29.7864%" y="127.50"></text></g><g><title>ntdll`RtlReAllocateHeap (380 samples, 0.33%)</title><rect x="29.2801%" y="149" width="0.3347%" height="15" fill="rgb(217,147,25)" fg:x="33242" fg:w="380"/><text x="29.5301%" y="159.50"></text></g><g><title>ntdll`RtlFreeHeap (97 samples, 0.09%)</title><rect x="29.5294%" y="133" width="0.0854%" height="15" fill="rgb(247,81,37)" fg:x="33525" fg:w="97"/><text x="29.7794%" y="143.50"></text></g><g><title>ntdll`RtlGetCurrentServiceSessionId (23 samples, 0.02%)</title><rect x="29.5946%" y="117" width="0.0203%" height="15" fill="rgb(209,12,38)" fg:x="33599" fg:w="23"/><text x="29.8446%" y="127.50"></text></g><g><title>ntdll`RtlReAllocateHeap (408 samples, 0.36%)</title><rect x="29.2572%" y="181" width="0.3594%" height="15" fill="rgb(227,1,9)" fg:x="33216" fg:w="408"/><text x="29.5072%" y="191.50"></text></g><g><title>ntdll`RtlReAllocateHeap (402 samples, 0.35%)</title><rect x="29.2625%" y="165" width="0.3541%" height="15" fill="rgb(248,47,43)" fg:x="33222" fg:w="402"/><text x="29.5125%" y="175.50"></text></g><g><title>toy`alloc::raw_vec::RawVec&lt;petgraph::graph_impl::NodeIndex&lt;u32&gt;,alloc::alloc::Global&gt;::reserve_for_push&lt;petgraph::graph_impl::NodeIndex (449 samples, 0.40%)</title><rect x="29.2290%" y="213" width="0.3955%" height="15" fill="rgb(221,10,30)" fg:x="33184" fg:w="449"/><text x="29.4790%" y="223.50"></text></g><g><title>toy`alloc::raw_vec::finish_grow (431 samples, 0.38%)</title><rect x="29.2449%" y="197" width="0.3796%" height="15" fill="rgb(210,229,1)" fg:x="33202" fg:w="431"/><text x="29.4949%" y="207.50"></text></g><g><title>ntdll`RtlAllocateHeap (20 samples, 0.02%)</title><rect x="29.9425%" y="165" width="0.0176%" height="15" fill="rgb(222,148,37)" fg:x="33994" fg:w="20"/><text x="30.1925%" y="175.50"></text></g><g><title>ntdll`RtlAllocateHeap (177 samples, 0.16%)</title><rect x="29.8333%" y="197" width="0.1559%" height="15" fill="rgb(234,67,33)" fg:x="33870" fg:w="177"/><text x="30.0833%" y="207.50"></text></g><g><title>ntdll`RtlAllocateHeap (154 samples, 0.14%)</title><rect x="29.8535%" y="181" width="0.1356%" height="15" fill="rgb(247,98,35)" fg:x="33893" fg:w="154"/><text x="30.1035%" y="191.50"></text></g><g><title>ntdll`RtlUnhandledExceptionFilter (33 samples, 0.03%)</title><rect x="29.9601%" y="165" width="0.0291%" height="15" fill="rgb(247,138,52)" fg:x="34014" fg:w="33"/><text x="30.2101%" y="175.50"></text></g><g><title>toy`alloc::vec::spec_from_iter::impl$0::from_iter&lt;petgraph::graph_impl::NodeIndex&lt;u32&gt;,core::iter::adapters::filter_map::FilterMap&lt;petgraph::graph_impl::Edges&lt;aeg::aeg::AegEdge,enum2$ (419 samples, 0.37%)</title><rect x="29.6245%" y="213" width="0.3691%" height="15" fill="rgb(213,79,30)" fg:x="33633" fg:w="419"/><text x="29.8745%" y="223.50"></text></g><g><title>ntdll`RtlAllocateHeap (35 samples, 0.03%)</title><rect x="30.1768%" y="149" width="0.0308%" height="15" fill="rgb(246,177,23)" fg:x="34260" fg:w="35"/><text x="30.4268%" y="159.50"></text></g><g><title>ntdll`RtlAllocateHeap (81 samples, 0.07%)</title><rect x="30.1380%" y="165" width="0.0713%" height="15" fill="rgb(230,62,27)" fg:x="34216" fg:w="81"/><text x="30.3880%" y="175.50"></text></g><g><title>ntdll`RtlAllocateHeap (277 samples, 0.24%)</title><rect x="30.0041%" y="197" width="0.2440%" height="15" fill="rgb(216,154,8)" fg:x="34064" fg:w="277"/><text x="30.2541%" y="207.50"></text></g><g><title>ntdll`RtlAllocateHeap (237 samples, 0.21%)</title><rect x="30.0394%" y="181" width="0.2088%" height="15" fill="rgb(244,35,45)" fg:x="34104" fg:w="237"/><text x="30.2894%" y="191.50"></text></g><g><title>ntdll`RtlUnhandledExceptionFilter (31 samples, 0.03%)</title><rect x="30.2208%" y="165" width="0.0273%" height="15" fill="rgb(251,115,12)" fg:x="34310" fg:w="31"/><text x="30.4708%" y="175.50"></text></g><g><title>toy`fixedbitset::FixedBitSet::with_capacity (293 samples, 0.26%)</title><rect x="29.9936%" y="213" width="0.2581%" height="15" fill="rgb(240,54,50)" fg:x="34052" fg:w="293"/><text x="30.2436%" y="223.50"></text></g><g><title>toy`aeg::aeg::AbstractEventGraph::is_po_connected (3,128 samples, 2.76%)</title><rect x="27.5009%" y="229" width="2.7552%" height="15" fill="rgb(233,84,52)" fg:x="31222" fg:w="3128"/><text x="27.7509%" y="239.50">to..</text></g><g><title>ntdll`RtlAllocateHeap (66 samples, 0.06%)</title><rect x="34.0876%" y="165" width="0.0581%" height="15" fill="rgb(207,117,47)" fg:x="38700" fg:w="66"/><text x="34.3376%" y="175.50"></text></g><g><title>ntdll`RtlAllocateHeap (3,314 samples, 2.92%)</title><rect x="31.3447%" y="197" width="2.9190%" height="15" fill="rgb(249,43,39)" fg:x="35586" fg:w="3314"/><text x="31.5947%" y="207.50">nt..</text></g><g><title>ntdll`RtlAllocateHeap (2,842 samples, 2.50%)</title><rect x="31.7605%" y="181" width="2.5033%" height="15" fill="rgb(209,38,44)" fg:x="36058" fg:w="2842"/><text x="32.0105%" y="191.50">nt..</text></g><g><title>ntdll`RtlUnhandledExceptionFilter (132 samples, 0.12%)</title><rect x="34.1475%" y="165" width="0.1163%" height="15" fill="rgb(236,212,23)" fg:x="38768" fg:w="132"/><text x="34.3975%" y="175.50"></text></g><g><title>toy`alloc::vec::spec_from_iter::impl$0::from_iter&lt;petgraph::graph_impl::NodeIndex&lt;u32&gt;,core::iter::adapters::filter_map::FilterMap&lt;petgraph::graph_impl::Edges&lt;aeg::aeg::AegEdge,enum2$ (4,250 samples, 3.74%)</title><rect x="30.7863%" y="213" width="3.7435%" height="15" fill="rgb(242,79,21)" fg:x="34952" fg:w="4250"/><text x="31.0363%" y="223.50">toy`..</text></g><g><title>toy`std::alloc::__default_lib_allocator::__rdl_alloc (296 samples, 0.26%)</title><rect x="34.2691%" y="197" width="0.2607%" height="15" fill="rgb(211,96,35)" fg:x="38906" fg:w="296"/><text x="34.5191%" y="207.50"></text></g><g><title>ntdll`RtlAllocateHeap (204 samples, 0.18%)</title><rect x="35.5365%" y="149" width="0.1797%" height="15" fill="rgb(253,215,40)" fg:x="40345" fg:w="204"/><text x="35.7865%" y="159.50"></text></g><g><title>ntdll`RtlAllocateHeap (330 samples, 0.29%)</title><rect x="35.4273%" y="165" width="0.2907%" height="15" fill="rgb(211,81,21)" fg:x="40221" fg:w="330"/><text x="35.6773%" y="175.50"></text></g><g><title>ntdll`RtlCopyMemory (28 samples, 0.02%)</title><rect x="35.7180%" y="165" width="0.0247%" height="15" fill="rgb(208,190,38)" fg:x="40551" fg:w="28"/><text x="35.9680%" y="175.50"></text></g><g><title>ntdll`RtlAllocateHeap (1,379 samples, 1.21%)</title><rect x="34.6478%" y="197" width="1.2146%" height="15" fill="rgb(235,213,38)" fg:x="39336" fg:w="1379"/><text x="34.8978%" y="207.50"></text></g><g><title>ntdll`RtlAllocateHeap (923 samples, 0.81%)</title><rect x="35.0495%" y="181" width="0.8130%" height="15" fill="rgb(237,122,38)" fg:x="39792" fg:w="923"/><text x="35.2995%" y="191.50"></text></g><g><title>ntdll`RtlUnhandledExceptionFilter (129 samples, 0.11%)</title><rect x="35.7488%" y="165" width="0.1136%" height="15" fill="rgb(244,218,35)" fg:x="40586" fg:w="129"/><text x="35.9988%" y="175.50"></text></g><g><title>toy`aeg::aeg::AbstractEventGraph::neighbors (6,401 samples, 5.64%)</title><rect x="30.2561%" y="229" width="5.6381%" height="15" fill="rgb(240,68,47)" fg:x="34350" fg:w="6401"/><text x="30.5061%" y="239.50">toy`aeg..</text></g><g><title>toy`fixedbitset::FixedBitSet::with_capacity (1,549 samples, 1.36%)</title><rect x="34.5298%" y="213" width="1.3644%" height="15" fill="rgb(210,16,53)" fg:x="39202" fg:w="1549"/><text x="34.7798%" y="223.50"></text></g><g><title>toy`std::alloc::__default_lib_allocator::__rdl_alloc_zeroed (33 samples, 0.03%)</title><rect x="35.8651%" y="197" width="0.0291%" height="15" fill="rgb(235,124,12)" fg:x="40718" fg:w="33"/><text x="36.1151%" y="207.50"></text></g><g><title>ntdll`RtlAllocateHeap (99 samples, 0.09%)</title><rect x="45.3480%" y="101" width="0.0872%" height="15" fill="rgb(224,169,11)" fg:x="51484" fg:w="99"/><text x="45.5980%" y="111.50"></text></g><g><title>ntdll`RtlAllocateHeap (1,216 samples, 1.07%)</title><rect x="44.5702%" y="133" width="1.0711%" height="15" fill="rgb(250,166,2)" fg:x="50601" fg:w="1216"/><text x="44.8202%" y="143.50"></text></g><g><title>ntdll`RtlAllocateHeap (1,051 samples, 0.93%)</title><rect x="44.7155%" y="117" width="0.9257%" height="15" fill="rgb(242,216,29)" fg:x="50766" fg:w="1051"/><text x="44.9655%" y="127.50"></text></g><g><title>ntdll`RtlUnhandledExceptionFilter (230 samples, 0.20%)</title><rect x="45.4387%" y="101" width="0.2026%" height="15" fill="rgb(230,116,27)" fg:x="51587" fg:w="230"/><text x="45.6887%" y="111.50"></text></g><g><title>ntdll`RtlCopyMemory (28 samples, 0.02%)</title><rect x="45.6413%" y="133" width="0.0247%" height="15" fill="rgb(228,99,48)" fg:x="51817" fg:w="28"/><text x="45.8913%" y="143.50"></text></g><g><title>ntdll`RtlCopyMemory (382 samples, 0.34%)</title><rect x="45.7082%" y="117" width="0.3365%" height="15" fill="rgb(253,11,6)" fg:x="51893" fg:w="382"/><text x="45.9582%" y="127.50"></text></g><g><title>ntdll`RtlReAllocateHeap (2,132 samples, 1.88%)</title><rect x="44.2954%" y="149" width="1.8779%" height="15" fill="rgb(247,143,39)" fg:x="50289" fg:w="2132"/><text x="44.5454%" y="159.50">n..</text></g><g><title>ntdll`RtlFreeHeap (576 samples, 0.51%)</title><rect x="45.6659%" y="133" width="0.5074%" height="15" fill="rgb(236,97,10)" fg:x="51845" fg:w="576"/><text x="45.9159%" y="143.50"></text></g><g><title>ntdll`RtlGetCurrentServiceSessionId (146 samples, 0.13%)</title><rect x="46.0447%" y="117" width="0.1286%" height="15" fill="rgb(233,208,19)" fg:x="52275" fg:w="146"/><text x="46.2947%" y="127.50"></text></g><g><title>ntdll`RtlFreeHeap (18 samples, 0.02%)</title><rect x="46.1574%" y="101" width="0.0159%" height="15" fill="rgb(216,164,2)" fg:x="52403" fg:w="18"/><text x="46.4074%" y="111.50"></text></g><g><title>ntdll`RtlReAllocateHeap (2,374 samples, 2.09%)</title><rect x="44.0928%" y="181" width="2.0911%" height="15" fill="rgb(220,129,5)" fg:x="50059" fg:w="2374"/><text x="44.3428%" y="191.50">n..</text></g><g><title>ntdll`RtlReAllocateHeap (2,305 samples, 2.03%)</title><rect x="44.1536%" y="165" width="2.0303%" height="15" fill="rgb(242,17,10)" fg:x="50128" fg:w="2305"/><text x="44.4036%" y="175.50">n..</text></g><g><title>ntdll`RtlRetrieveNtUserPfn (12 samples, 0.01%)</title><rect x="46.1733%" y="149" width="0.0106%" height="15" fill="rgb(242,107,0)" fg:x="52421" fg:w="12"/><text x="46.4233%" y="159.50"></text></g><g><title>toy`alloc::raw_vec::RawVec&lt;petgraph::graph_impl::NodeIndex&lt;u32&gt;,alloc::alloc::Global&gt;::reserve_for_push&lt;petgraph::graph_impl::NodeIndex (2,605 samples, 2.29%)</title><rect x="43.9281%" y="213" width="2.2945%" height="15" fill="rgb(251,28,31)" fg:x="49872" fg:w="2605"/><text x="44.1781%" y="223.50">t..</text></g><g><title>toy`alloc::raw_vec::finish_grow (2,496 samples, 2.20%)</title><rect x="44.0241%" y="197" width="2.1985%" height="15" fill="rgb(233,223,10)" fg:x="49981" fg:w="2496"/><text x="44.2741%" y="207.50">t..</text></g><g><title>toy`std::alloc::__default_lib_allocator::__rdl_realloc (43 samples, 0.04%)</title><rect x="46.1847%" y="181" width="0.0379%" height="15" fill="rgb(215,21,27)" fg:x="52434" fg:w="43"/><text x="46.4347%" y="191.50"></text></g><g><title>ntdll`RtlCopyMemory (32 samples, 0.03%)</title><rect x="46.4455%" y="181" width="0.0282%" height="15" fill="rgb(232,23,21)" fg:x="52730" fg:w="32"/><text x="46.6955%" y="191.50"></text></g><g><title>ntdll`RtlFreeHeap (50 samples, 0.04%)</title><rect x="46.4402%" y="197" width="0.0440%" height="15" fill="rgb(244,5,23)" fg:x="52724" fg:w="50"/><text x="46.6902%" y="207.50"></text></g><g><title>ntdll`RtlGetCurrentServiceSessionId (12 samples, 0.01%)</title><rect x="46.4737%" y="181" width="0.0106%" height="15" fill="rgb(226,81,46)" fg:x="52762" fg:w="12"/><text x="46.7237%" y="191.50"></text></g><g><title>ntdll`RtlAllocateHeap (200 samples, 0.18%)</title><rect x="46.5873%" y="149" width="0.1762%" height="15" fill="rgb(247,70,30)" fg:x="52891" fg:w="200"/><text x="46.8373%" y="159.50"></text></g><g><title>ntdll`RtlEnumerateGenericTableWithoutSplayingAvl (21 samples, 0.02%)</title><rect x="46.7634%" y="149" width="0.0185%" height="15" fill="rgb(212,68,19)" fg:x="53091" fg:w="21"/><text x="47.0134%" y="159.50"></text></g><g><title>ntdll`RtlEnumerateGenericTableWithoutSplayingAvl (21 samples, 0.02%)</title><rect x="46.7634%" y="133" width="0.0185%" height="15" fill="rgb(240,187,13)" fg:x="53091" fg:w="21"/><text x="47.0134%" y="143.50"></text></g><g><title>ntdll`RtlAllocateHeap (19 samples, 0.02%)</title><rect x="46.7652%" y="117" width="0.0167%" height="15" fill="rgb(223,113,26)" fg:x="53093" fg:w="19"/><text x="47.0152%" y="127.50"></text></g><g><title>ntdll`RtlAllocateHeap (19 samples, 0.02%)</title><rect x="46.7652%" y="101" width="0.0167%" height="15" fill="rgb(206,192,2)" fg:x="53093" fg:w="19"/><text x="47.0152%" y="111.50"></text></g><g><title>ntdll`RtlAllocateHeap (349 samples, 0.31%)</title><rect x="46.4966%" y="181" width="0.3074%" height="15" fill="rgb(241,108,4)" fg:x="52788" fg:w="349"/><text x="46.7466%" y="191.50"></text></g><g><title>ntdll`RtlAllocateHeap (326 samples, 0.29%)</title><rect x="46.5168%" y="165" width="0.2871%" height="15" fill="rgb(247,173,49)" fg:x="52811" fg:w="326"/><text x="46.7668%" y="175.50"></text></g><g><title>ntdll`RtlUnhandledExceptionFilter (25 samples, 0.02%)</title><rect x="46.7819%" y="149" width="0.0220%" height="15" fill="rgb(224,114,35)" fg:x="53112" fg:w="25"/><text x="47.0319%" y="159.50"></text></g><g><title>toy`hashbrown::raw::inner::RawTableInner::fallible_with_capacity (368 samples, 0.32%)</title><rect x="46.4842%" y="197" width="0.3241%" height="15" fill="rgb(245,159,27)" fg:x="52774" fg:w="368"/><text x="46.7342%" y="207.50"></text></g><g><title>toy`hashbrown::raw::inner::RawTable&lt;tuple$&lt;usize,smallvec::SmallVec&lt;array$&lt;usize,2&gt; &gt; &gt;,allocator_api2::stable::alloc::global::Global&gt;::reserve_rehash&lt;tuple$&lt;usize,smallvec::SmallVec&lt;array$&lt;usize,2&gt; &gt; &gt;,allocator_api2::stable::alloc::global::Global,hashbrown::map::make_hasher::closure_env$0&lt;usize,smallvec::SmallVec&lt;array$&lt;usize,2&gt; &gt;,core::hash::BuildHasherDefault (666 samples, 0.59%)</title><rect x="46.2226%" y="213" width="0.5866%" height="15" fill="rgb(245,172,44)" fg:x="52477" fg:w="666"/><text x="46.4726%" y="223.50"></text></g><g><title>ntdll`RtlCopyMemory (134 samples, 0.12%)</title><rect x="47.6619%" y="181" width="0.1180%" height="15" fill="rgb(236,23,11)" fg:x="54111" fg:w="134"/><text x="47.9119%" y="191.50"></text></g><g><title>ntdll`RtlFreeHeap (218 samples, 0.19%)</title><rect x="47.6469%" y="197" width="0.1920%" height="15" fill="rgb(205,117,38)" fg:x="54094" fg:w="218"/><text x="47.8969%" y="207.50"></text></g><g><title>ntdll`RtlGetCurrentServiceSessionId (67 samples, 0.06%)</title><rect x="47.7799%" y="181" width="0.0590%" height="15" fill="rgb(237,72,25)" fg:x="54245" fg:w="67"/><text x="48.0299%" y="191.50"></text></g><g><title>VCRUNTIME140`memset (27 samples, 0.02%)</title><rect x="47.8926%" y="181" width="0.0238%" height="15" fill="rgb(244,70,9)" fg:x="54373" fg:w="27"/><text x="48.1426%" y="191.50"></text></g><g><title>ntdll`RtlAllocateHeap (1,716 samples, 1.51%)</title><rect x="48.3137%" y="149" width="1.5115%" height="15" fill="rgb(217,125,39)" fg:x="54851" fg:w="1716"/><text x="48.5637%" y="159.50"></text></g><g><title>ntdll`NtProtectVirtualMemory (21 samples, 0.02%)</title><rect x="49.8287%" y="117" width="0.0185%" height="15" fill="rgb(235,36,10)" fg:x="56571" fg:w="21"/><text x="50.0787%" y="127.50"></text></g><g><title>ntdll`NtAllocateVirtualMemory (21 samples, 0.02%)</title><rect x="49.9538%" y="69" width="0.0185%" height="15" fill="rgb(251,123,47)" fg:x="56713" fg:w="21"/><text x="50.2038%" y="79.50"></text></g><g><title>ntdll`NtAllocateVirtualMemory (18 samples, 0.02%)</title><rect x="49.9802%" y="53" width="0.0159%" height="15" fill="rgb(221,13,13)" fg:x="56743" fg:w="18"/><text x="50.2302%" y="63.50"></text></g><g><title>ntdll`RtlAllocateHeap (181 samples, 0.16%)</title><rect x="49.8472%" y="117" width="0.1594%" height="15" fill="rgb(238,131,9)" fg:x="56592" fg:w="181"/><text x="50.0972%" y="127.50"></text></g><g><title>ntdll`RtlAllocateHeap (181 samples, 0.16%)</title><rect x="49.8472%" y="101" width="0.1594%" height="15" fill="rgb(211,50,8)" fg:x="56592" fg:w="181"/><text x="50.0972%" y="111.50"></text></g><g><title>ntdll`RtlTryEnterCriticalSection (62 samples, 0.05%)</title><rect x="49.9520%" y="85" width="0.0546%" height="15" fill="rgb(245,182,24)" fg:x="56711" fg:w="62"/><text x="50.2020%" y="95.50"></text></g><g><title>ntdll`RtlTryEnterCriticalSection (39 samples, 0.03%)</title><rect x="49.9723%" y="69" width="0.0344%" height="15" fill="rgb(242,14,37)" fg:x="56734" fg:w="39"/><text x="50.2223%" y="79.50"></text></g><g><title>ntdll`RtlTryEnterCriticalSection (12 samples, 0.01%)</title><rect x="49.9960%" y="53" width="0.0106%" height="15" fill="rgb(246,228,12)" fg:x="56761" fg:w="12"/><text x="50.2460%" y="63.50"></text></g><g><title>ntdll`RtlEnumerateGenericTableWithoutSplayingAvl (211 samples, 0.19%)</title><rect x="49.8252%" y="149" width="0.1859%" height="15" fill="rgb(213,55,15)" fg:x="56567" fg:w="211"/><text x="50.0752%" y="159.50"></text></g><g><title>ntdll`RtlEnumerateGenericTableWithoutSplayingAvl (209 samples, 0.18%)</title><rect x="49.8269%" y="133" width="0.1841%" height="15" fill="rgb(209,9,3)" fg:x="56569" fg:w="209"/><text x="50.0769%" y="143.50"></text></g><g><title>ntdll`RtlAllocateHeap (2,480 samples, 2.18%)</title><rect x="47.9164%" y="181" width="2.1844%" height="15" fill="rgb(230,59,30)" fg:x="54400" fg:w="2480"/><text x="48.1664%" y="191.50">n..</text></g><g><title>ntdll`RtlAllocateHeap (2,406 samples, 2.12%)</title><rect x="47.9816%" y="165" width="2.1192%" height="15" fill="rgb(209,121,21)" fg:x="54474" fg:w="2406"/><text x="48.2316%" y="175.50">n..</text></g><g><title>ntdll`RtlUnhandledExceptionFilter (101 samples, 0.09%)</title><rect x="50.0119%" y="149" width="0.0890%" height="15" fill="rgb(220,109,13)" fg:x="56779" fg:w="101"/><text x="50.2619%" y="159.50"></text></g><g><title>toy`hashbrown::raw::inner::RawTableInner::fallible_with_capacity (2,588 samples, 2.28%)</title><rect x="47.8407%" y="197" width="2.2796%" height="15" fill="rgb(232,18,1)" fg:x="54314" fg:w="2588"/><text x="48.0907%" y="207.50">t..</text></g><g><title>toy`std::alloc::__default_lib_allocator::__rdl_alloc (19 samples, 0.02%)</title><rect x="50.1035%" y="181" width="0.0167%" height="15" fill="rgb(215,41,42)" fg:x="56883" fg:w="19"/><text x="50.3535%" y="191.50"></text></g><g><title>toy`aeg::critical_cycles::IncompleteMinimalCycle (16,153 samples, 14.23%)</title><rect x="35.8942%" y="229" width="14.2278%" height="15" fill="rgb(224,123,36)" fg:x="40751" fg:w="16153"/><text x="36.1442%" y="239.50">toy`aeg::critical_cycl..</text></g><g><title>toy`hashbrown::raw::inner::RawTable&lt;tuple$&lt;usize,smallvec::SmallVec&lt;array$&lt;usize,3&gt; &gt; &gt;,allocator_api2::stable::alloc::global::Global&gt;::reserve_rehash&lt;tuple$&lt;usize,smallvec::SmallVec&lt;array$&lt;usize,3&gt; &gt; &gt;,allocator_api2::stable::alloc::global::Global,hashbrown::map::make_hasher::closure_env$0&lt;usize,smallvec::SmallVec&lt;array$&lt;usize,3&gt; &gt;,core::hash::BuildHasherDefault (3,761 samples, 3.31%)</title><rect x="46.8092%" y="213" width="3.3128%" height="15" fill="rgb(240,125,3)" fg:x="53143" fg:w="3761"/><text x="47.0592%" y="223.50">toy..</text></g><g><title>ntdll`RtlAllocateHeap (133 samples, 0.12%)</title><rect x="51.4036%" y="117" width="0.1171%" height="15" fill="rgb(205,98,50)" fg:x="58359" fg:w="133"/><text x="51.6536%" y="127.50"></text></g><g><title>ntdll`RtlEnumerateGenericTableWithoutSplayingAvl (15 samples, 0.01%)</title><rect x="51.5207%" y="117" width="0.0132%" height="15" fill="rgb(205,185,37)" fg:x="58492" fg:w="15"/><text x="51.7707%" y="127.50"></text></g><g><title>ntdll`RtlEnumerateGenericTableWithoutSplayingAvl (15 samples, 0.01%)</title><rect x="51.5207%" y="101" width="0.0132%" height="15" fill="rgb(238,207,15)" fg:x="58492" fg:w="15"/><text x="51.7707%" y="111.50"></text></g><g><title>ntdll`RtlAllocateHeap (14 samples, 0.01%)</title><rect x="51.5216%" y="85" width="0.0123%" height="15" fill="rgb(213,199,42)" fg:x="58493" fg:w="14"/><text x="51.7716%" y="95.50"></text></g><g><title>ntdll`RtlAllocateHeap (14 samples, 0.01%)</title><rect x="51.5216%" y="69" width="0.0123%" height="15" fill="rgb(235,201,11)" fg:x="58493" fg:w="14"/><text x="51.7716%" y="79.50"></text></g><g><title>ntdll`RtlAllocateHeap (1,127 samples, 0.99%)</title><rect x="50.6857%" y="149" width="0.9927%" height="15" fill="rgb(207,46,11)" fg:x="57544" fg:w="1127"/><text x="50.9357%" y="159.50"></text></g><g><title>ntdll`RtlAllocateHeap (964 samples, 0.85%)</title><rect x="50.8293%" y="133" width="0.8491%" height="15" fill="rgb(241,35,35)" fg:x="57707" fg:w="964"/><text x="51.0793%" y="143.50"></text></g><g><title>ntdll`RtlUnhandledExceptionFilter (162 samples, 0.14%)</title><rect x="51.5357%" y="117" width="0.1427%" height="15" fill="rgb(243,32,47)" fg:x="58509" fg:w="162"/><text x="51.7857%" y="127.50"></text></g><g><title>ntdll`RtlCopyMemory (308 samples, 0.27%)</title><rect x="51.7224%" y="133" width="0.2713%" height="15" fill="rgb(247,202,23)" fg:x="58721" fg:w="308"/><text x="51.9724%" y="143.50"></text></g><g><title>ntdll`RtlReAllocateHeap (1,802 samples, 1.59%)</title><rect x="50.4955%" y="165" width="1.5872%" height="15" fill="rgb(219,102,11)" fg:x="57328" fg:w="1802"/><text x="50.7455%" y="175.50"></text></g><g><title>ntdll`RtlFreeHeap (451 samples, 0.40%)</title><rect x="51.6854%" y="149" width="0.3972%" height="15" fill="rgb(243,110,44)" fg:x="58679" fg:w="451"/><text x="51.9354%" y="159.50"></text></g><g><title>ntdll`RtlGetCurrentServiceSessionId (101 samples, 0.09%)</title><rect x="51.9937%" y="133" width="0.0890%" height="15" fill="rgb(222,74,54)" fg:x="59029" fg:w="101"/><text x="52.2437%" y="143.50"></text></g><g><title>ntdll`RtlFreeHeap (15 samples, 0.01%)</title><rect x="52.0695%" y="117" width="0.0132%" height="15" fill="rgb(216,99,12)" fg:x="59115" fg:w="15"/><text x="52.3195%" y="127.50"></text></g><g><title>ntdll`RtlReAllocateHeap (1,990 samples, 1.75%)</title><rect x="50.3307%" y="197" width="1.7528%" height="15" fill="rgb(226,22,26)" fg:x="57141" fg:w="1990"/><text x="50.5807%" y="207.50"></text></g><g><title>ntdll`RtlReAllocateHeap (1,934 samples, 1.70%)</title><rect x="50.3801%" y="181" width="1.7035%" height="15" fill="rgb(217,163,10)" fg:x="57197" fg:w="1934"/><text x="50.6301%" y="191.50"></text></g><g><title>toy`alloc::raw_vec::RawVec&lt;petgraph::graph_impl::NodeIndex&lt;u32&gt;,alloc::alloc::Global&gt;::reserve_for_push&lt;petgraph::graph_impl::NodeIndex (2,261 samples, 1.99%)</title><rect x="50.1220%" y="229" width="1.9915%" height="15" fill="rgb(213,25,53)" fg:x="56904" fg:w="2261"/><text x="50.3720%" y="239.50">t..</text></g><g><title>toy`alloc::raw_vec::finish_grow (2,116 samples, 1.86%)</title><rect x="50.2497%" y="213" width="1.8638%" height="15" fill="rgb(252,105,26)" fg:x="57049" fg:w="2116"/><text x="50.4997%" y="223.50">t..</text></g><g><title>toy`std::alloc::__default_lib_allocator::__rdl_realloc (33 samples, 0.03%)</title><rect x="52.0845%" y="197" width="0.0291%" height="15" fill="rgb(220,39,43)" fg:x="59132" fg:w="33"/><text x="52.3345%" y="207.50"></text></g><g><title>ntdll`RtlCopyMemory (51 samples, 0.04%)</title><rect x="52.1144%" y="149" width="0.0449%" height="15" fill="rgb(229,68,48)" fg:x="59166" fg:w="51"/><text x="52.3644%" y="159.50"></text></g><g><title>toy`alloc::raw_vec::impl$2::reserve::do_reserve_and_handle (57 samples, 0.05%)</title><rect x="52.1135%" y="229" width="0.0502%" height="15" fill="rgb(252,8,32)" fg:x="59165" fg:w="57"/><text x="52.3635%" y="239.50"></text></g><g><title>toy`alloc::raw_vec::finish_grow (57 samples, 0.05%)</title><rect x="52.1135%" y="213" width="0.0502%" height="15" fill="rgb(223,20,43)" fg:x="59165" fg:w="57"/><text x="52.3635%" y="223.50"></text></g><g><title>ntdll`RtlReAllocateHeap (57 samples, 0.05%)</title><rect x="52.1135%" y="197" width="0.0502%" height="15" fill="rgb(229,81,49)" fg:x="59165" fg:w="57"/><text x="52.3635%" y="207.50"></text></g><g><title>ntdll`RtlReAllocateHeap (57 samples, 0.05%)</title><rect x="52.1135%" y="181" width="0.0502%" height="15" fill="rgb(236,28,36)" fg:x="59165" fg:w="57"/><text x="52.3635%" y="191.50"></text></g><g><title>ntdll`RtlReAllocateHeap (57 samples, 0.05%)</title><rect x="52.1135%" y="165" width="0.0502%" height="15" fill="rgb(249,185,26)" fg:x="59165" fg:w="57"/><text x="52.3635%" y="175.50"></text></g><g><title>ntdll`RtlAllocateHeap (103 samples, 0.09%)</title><rect x="52.1822%" y="213" width="0.0907%" height="15" fill="rgb(249,174,33)" fg:x="59243" fg:w="103"/><text x="52.4322%" y="223.50"></text></g><g><title>ntdll`RtlAllocateHeap (85 samples, 0.07%)</title><rect x="52.1981%" y="197" width="0.0749%" height="15" fill="rgb(233,201,37)" fg:x="59261" fg:w="85"/><text x="52.4481%" y="207.50"></text></g><g><title>ntdll`RtlUnhandledExceptionFilter (25 samples, 0.02%)</title><rect x="52.2509%" y="181" width="0.0220%" height="15" fill="rgb(221,78,26)" fg:x="59321" fg:w="25"/><text x="52.5009%" y="191.50"></text></g><g><title>ntdll`RtlCopyMemory (42 samples, 0.04%)</title><rect x="52.2774%" y="197" width="0.0370%" height="15" fill="rgb(250,127,30)" fg:x="59351" fg:w="42"/><text x="52.5274%" y="207.50"></text></g><g><title>ntdll`RtlFreeHeap (56 samples, 0.05%)</title><rect x="52.2729%" y="213" width="0.0493%" height="15" fill="rgb(230,49,44)" fg:x="59346" fg:w="56"/><text x="52.5229%" y="223.50"></text></g><g><title>toy`core::iter::adapters::map::impl$2::fold&lt;aeg::critical_cycles::CriticalCycle,alloc::vec::into_iter::IntoIter&lt;alloc::vec::Vec&lt;petgraph::graph_impl::EdgeIndex&lt;u32&gt;,alloc::alloc::Global&gt;,alloc::alloc::Global&gt;,aeg::critical_cycles::impl$3::complete::closure_env$0,tuple$&lt;&gt;,core::iter::traits::iterator::Iterator::for_each::call::closure_env$0&lt;aeg::critical_cycles::CriticalCycle,alloc::vec::impl$19::extend_trusted::closure_env$0&lt;aeg::critical_cycles::CriticalCycle,alloc::alloc::Global,core::iter::adapters::map::Map&lt;alloc::vec::into_iter::IntoIter&lt;alloc::vec::Vec&lt;petgraph::graph_impl::EdgeIndex (135 samples, 0.12%)</title><rect x="52.3223%" y="213" width="0.1189%" height="15" fill="rgb(229,67,23)" fg:x="59402" fg:w="135"/><text x="52.5723%" y="223.50"></text></g><g><title>ntdll`RtlAllocateHeap (108 samples, 0.10%)</title><rect x="52.3461%" y="197" width="0.0951%" height="15" fill="rgb(249,83,47)" fg:x="59429" fg:w="108"/><text x="52.5961%" y="207.50"></text></g><g><title>ntdll`RtlAllocateHeap (95 samples, 0.08%)</title><rect x="52.3575%" y="181" width="0.0837%" height="15" fill="rgb(215,43,3)" fg:x="59442" fg:w="95"/><text x="52.6075%" y="191.50"></text></g><g><title>ntdll`RtlUnhandledExceptionFilter (18 samples, 0.02%)</title><rect x="52.4253%" y="165" width="0.0159%" height="15" fill="rgb(238,154,13)" fg:x="59519" fg:w="18"/><text x="52.6753%" y="175.50"></text></g><g><title>toy`alloc::vec::in_place_collect::impl$1::from_iter&lt;aeg::critical_cycles::CriticalCycle,core::iter::adapters::map::Map&lt;alloc::vec::into_iter::IntoIter&lt;alloc::vec::Vec&lt;petgraph::graph_impl::EdgeIndex (318 samples, 0.28%)</title><rect x="52.1637%" y="229" width="0.2801%" height="15" fill="rgb(219,56,2)" fg:x="59222" fg:w="318"/><text x="52.4137%" y="239.50"></text></g><g><title>ntdll`RtlAllocateHeap (57 samples, 0.05%)</title><rect x="52.5381%" y="181" width="0.0502%" height="15" fill="rgb(233,0,4)" fg:x="59647" fg:w="57"/><text x="52.7881%" y="191.50"></text></g><g><title>ntdll`RtlAllocateHeap (47 samples, 0.04%)</title><rect x="52.5469%" y="165" width="0.0414%" height="15" fill="rgb(235,30,7)" fg:x="59657" fg:w="47"/><text x="52.7969%" y="175.50"></text></g><g><title>ntdll`RtlUnhandledExceptionFilter (13 samples, 0.01%)</title><rect x="52.5768%" y="149" width="0.0115%" height="15" fill="rgb(250,79,13)" fg:x="59691" fg:w="13"/><text x="52.8268%" y="159.50"></text></g><g><title>ntdll`RtlAllocateHeap (17 samples, 0.01%)</title><rect x="52.5900%" y="133" width="0.0150%" height="15" fill="rgb(211,146,34)" fg:x="59706" fg:w="17"/><text x="52.8400%" y="143.50"></text></g><g><title>ntdll`RtlAllocateHeap (16 samples, 0.01%)</title><rect x="52.5909%" y="117" width="0.0141%" height="15" fill="rgb(228,22,38)" fg:x="59707" fg:w="16"/><text x="52.8409%" y="127.50"></text></g><g><title>ntdll`RtlReAllocateHeap (24 samples, 0.02%)</title><rect x="52.5883%" y="181" width="0.0211%" height="15" fill="rgb(235,168,5)" fg:x="59704" fg:w="24"/><text x="52.8383%" y="191.50"></text></g><g><title>ntdll`RtlReAllocateHeap (23 samples, 0.02%)</title><rect x="52.5892%" y="165" width="0.0203%" height="15" fill="rgb(221,155,16)" fg:x="59705" fg:w="23"/><text x="52.8392%" y="175.50"></text></g><g><title>ntdll`RtlReAllocateHeap (22 samples, 0.02%)</title><rect x="52.5900%" y="149" width="0.0194%" height="15" fill="rgb(215,215,53)" fg:x="59706" fg:w="22"/><text x="52.8400%" y="159.50"></text></g><g><title>toy`alloc::vec::spec_extend::impl$1::spec_extend&lt;petgraph::graph_impl::EdgeIndex&lt;u32&gt;,core::iter::adapters::map::Map&lt;core::slice::iter::Windows&lt;petgraph::graph_impl::NodeIndex (190 samples, 0.17%)</title><rect x="52.4438%" y="229" width="0.1674%" height="15" fill="rgb(223,4,10)" fg:x="59540" fg:w="190"/><text x="52.6938%" y="239.50"></text></g><g><title>toy`alloc::raw_vec::impl$2::reserve::do_reserve_and_handle&lt;petgraph::graph_impl::EdgeIndex (95 samples, 0.08%)</title><rect x="52.5275%" y="213" width="0.0837%" height="15" fill="rgb(234,103,6)" fg:x="59635" fg:w="95"/><text x="52.7775%" y="223.50"></text></g><g><title>toy`alloc::raw_vec::finish_grow (85 samples, 0.07%)</title><rect x="52.5363%" y="197" width="0.0749%" height="15" fill="rgb(227,97,0)" fg:x="59645" fg:w="85"/><text x="52.7863%" y="207.50"></text></g><g><title>ntdll`NtProtectVirtualMemory (31 samples, 0.03%)</title><rect x="64.7391%" y="149" width="0.0273%" height="15" fill="rgb(234,150,53)" fg:x="73499" fg:w="31"/><text x="64.9891%" y="159.50"></text></g><g><title>ntdll`NtAllocateVirtualMemory (25 samples, 0.02%)</title><rect x="64.7823%" y="85" width="0.0220%" height="15" fill="rgb(228,201,54)" fg:x="73548" fg:w="25"/><text x="65.0323%" y="95.50"></text></g><g><title>ntdll`NtFreeVirtualMemory (61 samples, 0.05%)</title><rect x="64.8448%" y="69" width="0.0537%" height="15" fill="rgb(222,22,37)" fg:x="73619" fg:w="61"/><text x="65.0948%" y="79.50"></text></g><g><title>ntdll`NtFreeVirtualMemory (734 samples, 0.65%)</title><rect x="64.9963%" y="37" width="0.6465%" height="15" fill="rgb(237,53,32)" fg:x="73791" fg:w="734"/><text x="65.2463%" y="47.50"></text></g><g><title>ntdll`RtlCopyMemory (5,002 samples, 4.41%)</title><rect x="61.2397%" y="197" width="4.4058%" height="15" fill="rgb(233,25,53)" fg:x="69526" fg:w="5002"/><text x="61.4897%" y="207.50">ntdll..</text></g><g><title>ntdll`RtlTryAcquirePebLock (1,029 samples, 0.91%)</title><rect x="64.7391%" y="181" width="0.9064%" height="15" fill="rgb(210,40,34)" fg:x="73499" fg:w="1029"/><text x="64.9891%" y="191.50"></text></g><g><title>ntdll`RtlTryAcquirePebLock (1,029 samples, 0.91%)</title><rect x="64.7391%" y="165" width="0.9064%" height="15" fill="rgb(241,220,44)" fg:x="73499" fg:w="1029"/><text x="64.9891%" y="175.50"></text></g><g><title>ntdll`RtlFreeHeap (998 samples, 0.88%)</title><rect x="64.7665%" y="149" width="0.8791%" height="15" fill="rgb(235,28,35)" fg:x="73530" fg:w="998"/><text x="65.0165%" y="159.50"></text></g><g><title>ntdll`RtlGetCurrentServiceSessionId (997 samples, 0.88%)</title><rect x="64.7673%" y="133" width="0.8782%" height="15" fill="rgb(210,56,17)" fg:x="73531" fg:w="997"/><text x="65.0173%" y="143.50"></text></g><g><title>ntdll`RtlDeleteBoundaryDescriptor (997 samples, 0.88%)</title><rect x="64.7673%" y="117" width="0.8782%" height="15" fill="rgb(224,130,29)" fg:x="73531" fg:w="997"/><text x="65.0173%" y="127.50"></text></g><g><title>ntdll`RtlTryEnterCriticalSection (988 samples, 0.87%)</title><rect x="64.7753%" y="101" width="0.8702%" height="15" fill="rgb(235,212,8)" fg:x="73540" fg:w="988"/><text x="65.0253%" y="111.50"></text></g><g><title>ntdll`RtlTryEnterCriticalSection (955 samples, 0.84%)</title><rect x="64.8043%" y="85" width="0.8412%" height="15" fill="rgb(223,33,50)" fg:x="73573" fg:w="955"/><text x="65.0543%" y="95.50"></text></g><g><title>ntdll`RtlTryEnterCriticalSection (848 samples, 0.75%)</title><rect x="64.8986%" y="69" width="0.7469%" height="15" fill="rgb(219,149,13)" fg:x="73680" fg:w="848"/><text x="65.1486%" y="79.50"></text></g><g><title>ntdll`RtlTryEnterCriticalSection (841 samples, 0.74%)</title><rect x="64.9047%" y="53" width="0.7408%" height="15" fill="rgb(250,156,29)" fg:x="73687" fg:w="841"/><text x="65.1547%" y="63.50"></text></g><g><title>ntdll`RtlFreeHeap (9,980 samples, 8.79%)</title><rect x="61.1560%" y="213" width="8.7906%" height="15" fill="rgb(216,193,19)" fg:x="69431" fg:w="9980"/><text x="61.4060%" y="223.50">ntdll`RtlFre..</text></g><g><title>ntdll`RtlGetCurrentServiceSessionId (4,883 samples, 4.30%)</title><rect x="65.6455%" y="197" width="4.3010%" height="15" fill="rgb(216,135,14)" fg:x="74528" fg:w="4883"/><text x="65.8955%" y="207.50">ntdll..</text></g><g><title>ntdll`RtlFreeHeap (23 samples, 0.02%)</title><rect x="69.9263%" y="181" width="0.0203%" height="15" fill="rgb(241,47,5)" fg:x="79388" fg:w="23"/><text x="70.1763%" y="191.50"></text></g><g><title>toy`core::ptr::drop_in_place&lt;tuple$&lt;aeg::critical_cycles::IncompleteMinimalCycle&lt;usize,usize&gt;,tuple$ (19,704 samples, 17.36%)</title><rect x="52.6112%" y="229" width="17.3556%" height="15" fill="rgb(233,42,35)" fg:x="59730" fg:w="19704"/><text x="52.8612%" y="239.50">toy`core::ptr::drop_in_plac..</text></g><g><title>toy`std::alloc::__default_lib_allocator::__rdl_dealloc (18 samples, 0.02%)</title><rect x="69.9509%" y="213" width="0.0159%" height="15" fill="rgb(231,13,6)" fg:x="79416" fg:w="18"/><text x="70.2009%" y="223.50"></text></g><g><title>toy`hashbrown::raw::inner::RawTable&lt;tuple$&lt;aeg::critical_cycles::IncompleteMinimalCycle&lt;usize,usize&gt;,tuple$&lt;&gt; &gt;,allocator_api2::stable::alloc::global::Global&gt;::reserve_rehash&lt;tuple$&lt;aeg::critical_cycles::IncompleteMinimalCycle&lt;usize,usize&gt;,tuple$&lt;&gt; &gt;,allocator_api2::stable::alloc::global::Global,hashbrown::map::make_hasher::closure_env$0&lt;aeg::critical_cycles::IncompleteMinimalCycle&lt;usize,usize&gt;,tuple$&lt;&gt;,core::hash::BuildHasherDefault (1,225 samples, 1.08%)</title><rect x="69.9668%" y="229" width="1.0790%" height="15" fill="rgb(207,181,40)" fg:x="79434" fg:w="1225"/><text x="70.2168%" y="239.50"></text></g><g><title>VCRUNTIME140`memcpy (13 samples, 0.01%)</title><rect x="78.7644%" y="213" width="0.0115%" height="15" fill="rgb(254,173,49)" fg:x="89422" fg:w="13"/><text x="79.0144%" y="223.50"></text></g><g><title>VCRUNTIME140`memmove (303 samples, 0.27%)</title><rect x="78.7758%" y="213" width="0.2669%" height="15" fill="rgb(221,1,38)" fg:x="89435" fg:w="303"/><text x="79.0258%" y="223.50"></text></g><g><title>ntdll`ExpInterlockedPopEntrySListResume (13 samples, 0.01%)</title><rect x="82.4057%" y="181" width="0.0115%" height="15" fill="rgb(206,124,46)" fg:x="93556" fg:w="13"/><text x="82.6557%" y="191.50"></text></g><g><title>ntdll`RtlAllocateHeap (74 samples, 0.07%)</title><rect x="88.3142%" y="165" width="0.0652%" height="15" fill="rgb(249,21,11)" fg:x="100264" fg:w="74"/><text x="88.5642%" y="175.50"></text></g><g><title>ntdll`RtlAllocateHeap (6,771 samples, 5.96%)</title><rect x="82.4171%" y="181" width="5.9640%" height="15" fill="rgb(222,201,40)" fg:x="93569" fg:w="6771"/><text x="82.6671%" y="191.50">ntdll`Rt..</text></g><g><title>ntdll`NtProtectVirtualMemory (67 samples, 0.06%)</title><rect x="88.3882%" y="149" width="0.0590%" height="15" fill="rgb(235,61,29)" fg:x="100348" fg:w="67"/><text x="88.6382%" y="159.50"></text></g><g><title>ntdll`NtAllocateVirtualMemory (83 samples, 0.07%)</title><rect x="88.7951%" y="101" width="0.0731%" height="15" fill="rgb(219,207,3)" fg:x="100810" fg:w="83"/><text x="89.0451%" y="111.50"></text></g><g><title>ntdll`NtAllocateVirtualMemory (40 samples, 0.04%)</title><rect x="88.9158%" y="85" width="0.0352%" height="15" fill="rgb(222,56,46)" fg:x="100947" fg:w="40"/><text x="89.1658%" y="95.50"></text></g><g><title>ntdll`RtlAllocateHeap (624 samples, 0.55%)</title><rect x="88.4472%" y="149" width="0.5496%" height="15" fill="rgb(239,76,54)" fg:x="100415" fg:w="624"/><text x="88.6972%" y="159.50"></text></g><g><title>ntdll`RtlAllocateHeap (622 samples, 0.55%)</title><rect x="88.4490%" y="133" width="0.5479%" height="15" fill="rgb(231,124,27)" fg:x="100417" fg:w="622"/><text x="88.6990%" y="143.50"></text></g><g><title>ntdll`RtlTryEnterCriticalSection (234 samples, 0.21%)</title><rect x="88.7907%" y="117" width="0.2061%" height="15" fill="rgb(249,195,6)" fg:x="100805" fg:w="234"/><text x="89.0407%" y="127.50"></text></g><g><title>ntdll`RtlTryEnterCriticalSection (141 samples, 0.12%)</title><rect x="88.8726%" y="101" width="0.1242%" height="15" fill="rgb(237,174,47)" fg:x="100898" fg:w="141"/><text x="89.1226%" y="111.50"></text></g><g><title>ntdll`RtlTryEnterCriticalSection (52 samples, 0.05%)</title><rect x="88.9510%" y="85" width="0.0458%" height="15" fill="rgb(206,201,31)" fg:x="100987" fg:w="52"/><text x="89.2010%" y="95.50"></text></g><g><title>ntdll`RtlEnumerateGenericTableWithoutSplayingAvl (730 samples, 0.64%)</title><rect x="88.3811%" y="181" width="0.6430%" height="15" fill="rgb(231,57,52)" fg:x="100340" fg:w="730"/><text x="88.6311%" y="191.50"></text></g><g><title>ntdll`RtlEnumerateGenericTableWithoutSplayingAvl (725 samples, 0.64%)</title><rect x="88.3856%" y="165" width="0.6386%" height="15" fill="rgb(248,177,22)" fg:x="100345" fg:w="725"/><text x="88.6356%" y="175.50"></text></g><g><title>ntdll`RtlReAllocateHeap (29 samples, 0.03%)</title><rect x="88.9986%" y="149" width="0.0255%" height="15" fill="rgb(215,211,37)" fg:x="101041" fg:w="29"/><text x="89.2486%" y="159.50"></text></g><g><title>ntdll`RtlReAllocateHeap (28 samples, 0.02%)</title><rect x="88.9995%" y="133" width="0.0247%" height="15" fill="rgb(241,128,51)" fg:x="101042" fg:w="28"/><text x="89.2495%" y="143.50"></text></g><g><title>ntdll`RtlReAllocateHeap (26 samples, 0.02%)</title><rect x="89.0012%" y="117" width="0.0229%" height="15" fill="rgb(227,165,31)" fg:x="101044" fg:w="26"/><text x="89.2512%" y="127.50"></text></g><g><title>ntdll`RtlTryEnterCriticalSection (22 samples, 0.02%)</title><rect x="89.0048%" y="101" width="0.0194%" height="15" fill="rgb(228,167,24)" fg:x="101048" fg:w="22"/><text x="89.2548%" y="111.50"></text></g><g><title>ntdll`RtlTryEnterCriticalSection (16 samples, 0.01%)</title><rect x="89.0101%" y="85" width="0.0141%" height="15" fill="rgb(228,143,12)" fg:x="101054" fg:w="16"/><text x="89.2601%" y="95.50"></text></g><g><title>ntdll`RtlTryEnterCriticalSection (15 samples, 0.01%)</title><rect x="89.0109%" y="69" width="0.0132%" height="15" fill="rgb(249,149,8)" fg:x="101055" fg:w="15"/><text x="89.2609%" y="79.50"></text></g><g><title>ntdll`RtlAllocateHeap (12,126 samples, 10.68%)</title><rect x="79.0427%" y="213" width="10.6808%" height="15" fill="rgb(243,35,44)" fg:x="89738" fg:w="12126"/><text x="79.2927%" y="223.50">ntdll`RtlAllocat..</text></g><g><title>ntdll`RtlAllocateHeap (11,405 samples, 10.05%)</title><rect x="79.6778%" y="197" width="10.0457%" height="15" fill="rgb(246,89,9)" fg:x="90459" fg:w="11405"/><text x="79.9278%" y="207.50">ntdll`RtlAlloca..</text></g><g><title>ntdll`RtlUnhandledExceptionFilter (791 samples, 0.70%)</title><rect x="89.0268%" y="181" width="0.6967%" height="15" fill="rgb(233,213,13)" fg:x="101073" fg:w="791"/><text x="89.2768%" y="191.50"></text></g><g><title>toy`smallvec::impl$30::extend&lt;array$&lt;usize,2&gt;,core::iter::adapters::cloned::Cloned&lt;core::slice::iter::Iter (624 samples, 0.55%)</title><rect x="89.7376%" y="213" width="0.5496%" height="15" fill="rgb(233,141,41)" fg:x="101880" fg:w="624"/><text x="89.9876%" y="223.50"></text></g><g><title>toy`smallvec::impl$30::extend&lt;array$&lt;usize,3&gt;,core::iter::adapters::cloned::Cloned&lt;core::slice::iter::Iter (806 samples, 0.71%)</title><rect x="90.2872%" y="213" width="0.7099%" height="15" fill="rgb(239,167,4)" fg:x="102504" fg:w="806"/><text x="90.5372%" y="223.50"></text></g><g><title>toy`hashbrown::raw::inner::impl$13::clone&lt;tuple$&lt;usize,smallvec::SmallVec&lt;array$ (22,817 samples, 20.10%)</title><rect x="71.0458%" y="229" width="20.0976%" height="15" fill="rgb(209,217,16)" fg:x="80659" fg:w="22817"/><text x="71.2958%" y="239.50">toy`hashbrown::raw::inner::impl$..</text></g><g><title>toy`std::alloc::__default_lib_allocator::__rdl_alloc (166 samples, 0.15%)</title><rect x="90.9972%" y="213" width="0.1462%" height="15" fill="rgb(219,88,35)" fg:x="103310" fg:w="166"/><text x="91.2472%" y="223.50"></text></g><g><title>ntdll`RtlAllocateHeap (54 samples, 0.05%)</title><rect x="93.1006%" y="213" width="0.0476%" height="15" fill="rgb(220,193,23)" fg:x="105698" fg:w="54"/><text x="93.3506%" y="223.50"></text></g><g><title>ntdll`RtlAllocateHeap (44 samples, 0.04%)</title><rect x="93.1094%" y="197" width="0.0388%" height="15" fill="rgb(230,90,52)" fg:x="105708" fg:w="44"/><text x="93.3594%" y="207.50"></text></g><g><title>ntdll`RtlUnhandledExceptionFilter (13 samples, 0.01%)</title><rect x="93.1367%" y="181" width="0.0115%" height="15" fill="rgb(252,106,19)" fg:x="105739" fg:w="13"/><text x="93.3867%" y="191.50"></text></g><g><title>ntdll`RtlCopyMemory (78 samples, 0.07%)</title><rect x="93.1605%" y="197" width="0.0687%" height="15" fill="rgb(206,74,20)" fg:x="105766" fg:w="78"/><text x="93.4105%" y="207.50"></text></g><g><title>ntdll`RtlFreeHeap (116 samples, 0.10%)</title><rect x="93.1481%" y="213" width="0.1022%" height="15" fill="rgb(230,138,44)" fg:x="105752" fg:w="116"/><text x="93.3981%" y="223.50"></text></g><g><title>ntdll`RtlGetCurrentServiceSessionId (24 samples, 0.02%)</title><rect x="93.2292%" y="197" width="0.0211%" height="15" fill="rgb(235,182,43)" fg:x="105844" fg:w="24"/><text x="93.4792%" y="207.50"></text></g><g><title>toy`alloc::collections::binary_heap::BinaryHeap&lt;petgraph::scored::MinScored&lt;i32,petgraph::graph_impl::NodeIndex&lt;u32&gt; &gt;,alloc::alloc::Global&gt;::pop&lt;petgraph::scored::MinScored&lt;i32,petgraph::graph_impl::NodeIndex (216 samples, 0.19%)</title><rect x="93.2503%" y="213" width="0.1903%" height="15" fill="rgb(242,16,51)" fg:x="105868" fg:w="216"/><text x="93.5003%" y="223.50"></text></g><g><title>ntdll`RtlAllocateHeap (125 samples, 0.11%)</title><rect x="93.4934%" y="133" width="0.1101%" height="15" fill="rgb(248,9,4)" fg:x="106144" fg:w="125"/><text x="93.7434%" y="143.50"></text></g><g><title>ntdll`RtlAllocateHeap (104 samples, 0.09%)</title><rect x="93.5119%" y="117" width="0.0916%" height="15" fill="rgb(210,31,22)" fg:x="106165" fg:w="104"/><text x="93.7619%" y="127.50"></text></g><g><title>ntdll`RtlUnhandledExceptionFilter (19 samples, 0.02%)</title><rect x="93.5868%" y="101" width="0.0167%" height="15" fill="rgb(239,54,39)" fg:x="106250" fg:w="19"/><text x="93.8368%" y="111.50"></text></g><g><title>ntdll`RtlCopyMemory (32 samples, 0.03%)</title><rect x="93.6114%" y="117" width="0.0282%" height="15" fill="rgb(230,99,41)" fg:x="106278" fg:w="32"/><text x="93.8614%" y="127.50"></text></g><g><title>ntdll`RtlReAllocateHeap (196 samples, 0.17%)</title><rect x="93.4767%" y="149" width="0.1726%" height="15" fill="rgb(253,106,12)" fg:x="106125" fg:w="196"/><text x="93.7267%" y="159.50"></text></g><g><title>ntdll`RtlFreeHeap (45 samples, 0.04%)</title><rect x="93.6097%" y="133" width="0.0396%" height="15" fill="rgb(213,46,41)" fg:x="106276" fg:w="45"/><text x="93.8597%" y="143.50"></text></g><g><title>ntdll`RtlReAllocateHeap (220 samples, 0.19%)</title><rect x="93.4564%" y="181" width="0.1938%" height="15" fill="rgb(215,133,35)" fg:x="106102" fg:w="220"/><text x="93.7064%" y="191.50"></text></g><g><title>ntdll`RtlReAllocateHeap (212 samples, 0.19%)</title><rect x="93.4635%" y="165" width="0.1867%" height="15" fill="rgb(213,28,5)" fg:x="106110" fg:w="212"/><text x="93.7135%" y="175.50"></text></g><g><title>toy`alloc::raw_vec::RawVec&lt;petgraph::graph_impl::NodeIndex&lt;u32&gt;,alloc::alloc::Global&gt;::reserve_for_push&lt;petgraph::graph_impl::NodeIndex (242 samples, 0.21%)</title><rect x="93.4406%" y="213" width="0.2132%" height="15" fill="rgb(215,77,49)" fg:x="106084" fg:w="242"/><text x="93.6906%" y="223.50"></text></g><g><title>toy`alloc::raw_vec::finish_grow (233 samples, 0.21%)</title><rect x="93.4485%" y="197" width="0.2052%" height="15" fill="rgb(248,100,22)" fg:x="106093" fg:w="233"/><text x="93.6985%" y="207.50"></text></g><g><title>ntdll`RtlAllocateHeap (53 samples, 0.05%)</title><rect x="93.7154%" y="181" width="0.0467%" height="15" fill="rgb(208,67,9)" fg:x="106396" fg:w="53"/><text x="93.9654%" y="191.50"></text></g><g><title>ntdll`RtlAllocateHeap (44 samples, 0.04%)</title><rect x="93.7233%" y="165" width="0.0388%" height="15" fill="rgb(219,133,21)" fg:x="106405" fg:w="44"/><text x="93.9733%" y="175.50"></text></g><g><title>ntdll`RtlAllocateHeap (22 samples, 0.02%)</title><rect x="93.9911%" y="101" width="0.0194%" height="15" fill="rgb(246,46,29)" fg:x="106709" fg:w="22"/><text x="94.2411%" y="111.50"></text></g><g><title>ntdll`RtlAllocateHeap (268 samples, 0.24%)</title><rect x="93.8369%" y="133" width="0.2361%" height="15" fill="rgb(246,185,52)" fg:x="106534" fg:w="268"/><text x="94.0869%" y="143.50"></text></g><g><title>ntdll`RtlAllocateHeap (236 samples, 0.21%)</title><rect x="93.8651%" y="117" width="0.2079%" height="15" fill="rgb(252,136,11)" fg:x="106566" fg:w="236"/><text x="94.1151%" y="127.50"></text></g><g><title>ntdll`RtlUnhandledExceptionFilter (69 samples, 0.06%)</title><rect x="94.0122%" y="101" width="0.0608%" height="15" fill="rgb(219,138,53)" fg:x="106733" fg:w="69"/><text x="94.2622%" y="111.50"></text></g><g><title>ntdll`RtlCopyMemory (14 samples, 0.01%)</title><rect x="94.0730%" y="133" width="0.0123%" height="15" fill="rgb(211,51,23)" fg:x="106802" fg:w="14"/><text x="94.3230%" y="143.50"></text></g><g><title>ntdll`RtlCopyMemory (51 samples, 0.04%)</title><rect x="94.0880%" y="117" width="0.0449%" height="15" fill="rgb(247,221,28)" fg:x="106819" fg:w="51"/><text x="94.3380%" y="127.50"></text></g><g><title>ntdll`RtlReAllocateHeap (443 samples, 0.39%)</title><rect x="93.7621%" y="181" width="0.3902%" height="15" fill="rgb(251,222,45)" fg:x="106449" fg:w="443"/><text x="94.0121%" y="191.50"></text></g><g><title>ntdll`RtlReAllocateHeap (430 samples, 0.38%)</title><rect x="93.7735%" y="165" width="0.3788%" height="15" fill="rgb(217,162,53)" fg:x="106462" fg:w="430"/><text x="94.0235%" y="175.50"></text></g><g><title>ntdll`RtlReAllocateHeap (407 samples, 0.36%)</title><rect x="93.7938%" y="149" width="0.3585%" height="15" fill="rgb(229,93,14)" fg:x="106485" fg:w="407"/><text x="94.0438%" y="159.50"></text></g><g><title>ntdll`RtlFreeHeap (76 samples, 0.07%)</title><rect x="94.0853%" y="133" width="0.0669%" height="15" fill="rgb(209,67,49)" fg:x="106816" fg:w="76"/><text x="94.3353%" y="143.50"></text></g><g><title>ntdll`RtlGetCurrentServiceSessionId (22 samples, 0.02%)</title><rect x="94.1329%" y="117" width="0.0194%" height="15" fill="rgb(213,87,29)" fg:x="106870" fg:w="22"/><text x="94.3829%" y="127.50"></text></g><g><title>toy`alloc::raw_vec::RawVec&lt;petgraph::scored::MinScored&lt;i32,petgraph::graph_impl::NodeIndex&lt;u32&gt; &gt;,alloc::alloc::Global&gt;::reserve_for_push&lt;petgraph::scored::MinScored&lt;i32,petgraph::graph_impl::NodeIndex (581 samples, 0.51%)</title><rect x="93.6537%" y="213" width="0.5118%" height="15" fill="rgb(205,151,52)" fg:x="106326" fg:w="581"/><text x="93.9037%" y="223.50"></text></g><g><title>toy`alloc::raw_vec::finish_grow (551 samples, 0.49%)</title><rect x="93.6801%" y="197" width="0.4853%" height="15" fill="rgb(253,215,39)" fg:x="106356" fg:w="551"/><text x="93.9301%" y="207.50"></text></g><g><title>toy`core::hash::BuildHasher::hash_one&lt;std::hash::random::RandomState,ref$&lt;petgraph::graph_impl::NodeIndex (318 samples, 0.28%)</title><rect x="94.1655%" y="213" width="0.2801%" height="15" fill="rgb(221,220,41)" fg:x="106907" fg:w="318"/><text x="94.4155%" y="223.50"></text></g><g><title>toy`core::hash::sip::impl$5::write (55 samples, 0.05%)</title><rect x="94.3971%" y="197" width="0.0484%" height="15" fill="rgb(218,133,21)" fg:x="107170" fg:w="55"/><text x="94.6471%" y="207.50"></text></g><g><title>toy`core::hash::sip::impl$5::write (132 samples, 0.12%)</title><rect x="94.4456%" y="213" width="0.1163%" height="15" fill="rgb(221,193,43)" fg:x="107225" fg:w="132"/><text x="94.6956%" y="223.50"></text></g><g><title>toy`core::hash::BuildHasher::hash_one&lt;std::hash::random::RandomState,ref$&lt;petgraph::graph_impl::NodeIndex (472 samples, 0.42%)</title><rect x="95.0304%" y="197" width="0.4157%" height="15" fill="rgb(240,128,52)" fg:x="107889" fg:w="472"/><text x="95.2804%" y="207.50"></text></g><g><title>toy`core::hash::sip::impl$5::write (84 samples, 0.07%)</title><rect x="95.3722%" y="181" width="0.0740%" height="15" fill="rgb(253,114,12)" fg:x="108277" fg:w="84"/><text x="95.6222%" y="191.50"></text></g><g><title>VCRUNTIME140`memset (17 samples, 0.01%)</title><rect x="95.9174%" y="181" width="0.0150%" height="15" fill="rgb(215,223,47)" fg:x="108896" fg:w="17"/><text x="96.1674%" y="191.50"></text></g><g><title>ntdll`RtlAllocateHeap (20 samples, 0.02%)</title><rect x="96.1033%" y="149" width="0.0176%" height="15" fill="rgb(248,225,23)" fg:x="109107" fg:w="20"/><text x="96.3533%" y="159.50"></text></g><g><title>ntdll`RtlAllocateHeap (264 samples, 0.23%)</title><rect x="95.9324%" y="181" width="0.2325%" height="15" fill="rgb(250,108,0)" fg:x="108913" fg:w="264"/><text x="96.1824%" y="191.50"></text></g><g><title>ntdll`RtlAllocateHeap (215 samples, 0.19%)</title><rect x="95.9755%" y="165" width="0.1894%" height="15" fill="rgb(228,208,7)" fg:x="108962" fg:w="215"/><text x="96.2255%" y="175.50"></text></g><g><title>ntdll`RtlUnhandledExceptionFilter (50 samples, 0.04%)</title><rect x="96.1209%" y="149" width="0.0440%" height="15" fill="rgb(244,45,10)" fg:x="109127" fg:w="50"/><text x="96.3709%" y="159.50"></text></g><g><title>ntdll`RtlCopyMemory (56 samples, 0.05%)</title><rect x="96.1720%" y="165" width="0.0493%" height="15" fill="rgb(207,125,25)" fg:x="109185" fg:w="56"/><text x="96.4220%" y="175.50"></text></g><g><title>ntdll`RtlFreeHeap (105 samples, 0.09%)</title><rect x="96.1649%" y="181" width="0.0925%" height="15" fill="rgb(210,195,18)" fg:x="109177" fg:w="105"/><text x="96.4149%" y="191.50"></text></g><g><title>ntdll`RtlGetCurrentServiceSessionId (41 samples, 0.04%)</title><rect x="96.2213%" y="165" width="0.0361%" height="15" fill="rgb(249,80,12)" fg:x="109241" fg:w="41"/><text x="96.4713%" y="175.50"></text></g><g><title>toy`core::hash::BuildHasher::hash_one&lt;std::hash::random::RandomState,ref$&lt;petgraph::graph_impl::NodeIndex (416 samples, 0.37%)</title><rect x="96.2592%" y="181" width="0.3664%" height="15" fill="rgb(221,65,9)" fg:x="109284" fg:w="416"/><text x="96.5092%" y="191.50"></text></g><g><title>toy`core::hash::sip::impl$5::write (84 samples, 0.07%)</title><rect x="96.5516%" y="165" width="0.0740%" height="15" fill="rgb(235,49,36)" fg:x="109616" fg:w="84"/><text x="96.8016%" y="175.50"></text></g><g><title>toy`hashbrown::map::HashMap&lt;petgraph::graph_impl::NodeIndex&lt;u32&gt;,i32,std::hash::random::RandomState,alloc::alloc::Global&gt;::insert&lt;petgraph::graph_impl::NodeIndex (2,350 samples, 2.07%)</title><rect x="94.5618%" y="213" width="2.0699%" height="15" fill="rgb(225,32,20)" fg:x="107357" fg:w="2350"/><text x="94.8118%" y="223.50">t..</text></g><g><title>toy`hashbrown::raw::RawTable&lt;tuple$&lt;petgraph::graph_impl::NodeIndex&lt;u32&gt;,i32&gt;,alloc::alloc::Global&gt;::reserve_rehash&lt;tuple$&lt;petgraph::graph_impl::NodeIndex&lt;u32&gt;,i32&gt;,alloc::alloc::Global,hashbrown::map::make_hasher::closure_env$0&lt;petgraph::graph_impl::NodeIndex (1,346 samples, 1.19%)</title><rect x="95.4462%" y="197" width="1.1856%" height="15" fill="rgb(215,141,46)" fg:x="108361" fg:w="1346"/><text x="95.6962%" y="207.50"></text></g><g><title>VCRUNTIME140`memset (23 samples, 0.02%)</title><rect x="97.2008%" y="197" width="0.0203%" height="15" fill="rgb(250,160,47)" fg:x="110353" fg:w="23"/><text x="97.4508%" y="207.50"></text></g><g><title>ntdll`RtlAllocateHeap (50 samples, 0.04%)</title><rect x="97.4782%" y="165" width="0.0440%" height="15" fill="rgb(216,222,40)" fg:x="110668" fg:w="50"/><text x="97.7282%" y="175.50"></text></g><g><title>ntdll`RtlAllocateHeap (434 samples, 0.38%)</title><rect x="97.2210%" y="197" width="0.3823%" height="15" fill="rgb(234,217,39)" fg:x="110376" fg:w="434"/><text x="97.4710%" y="207.50"></text></g><g><title>ntdll`RtlAllocateHeap (377 samples, 0.33%)</title><rect x="97.2712%" y="181" width="0.3321%" height="15" fill="rgb(207,178,40)" fg:x="110433" fg:w="377"/><text x="97.5212%" y="191.50"></text></g><g><title>ntdll`RtlUnhandledExceptionFilter (89 samples, 0.08%)</title><rect x="97.5249%" y="165" width="0.0784%" height="15" fill="rgb(221,136,13)" fg:x="110721" fg:w="89"/><text x="97.7749%" y="175.50"></text></g><g><title>ntdll`RtlCopyMemory (109 samples, 0.10%)</title><rect x="97.6147%" y="181" width="0.0960%" height="15" fill="rgb(249,199,10)" fg:x="110823" fg:w="109"/><text x="97.8647%" y="191.50"></text></g><g><title>ntdll`RtlFreeHeap (160 samples, 0.14%)</title><rect x="97.6033%" y="197" width="0.1409%" height="15" fill="rgb(249,222,13)" fg:x="110810" fg:w="160"/><text x="97.8533%" y="207.50"></text></g><g><title>ntdll`RtlGetCurrentServiceSessionId (38 samples, 0.03%)</title><rect x="97.7108%" y="181" width="0.0335%" height="15" fill="rgb(244,185,38)" fg:x="110932" fg:w="38"/><text x="97.9608%" y="191.50"></text></g><g><title>toy`core::hash::BuildHasher::hash_one&lt;std::hash::random::RandomState,ref$&lt;petgraph::graph_impl::NodeIndex (502 samples, 0.44%)</title><rect x="97.7451%" y="197" width="0.4422%" height="15" fill="rgb(236,202,9)" fg:x="110971" fg:w="502"/><text x="97.9951%" y="207.50"></text></g><g><title>toy`core::hash::sip::impl$5::write (117 samples, 0.10%)</title><rect x="98.0842%" y="181" width="0.1031%" height="15" fill="rgb(250,229,37)" fg:x="111356" fg:w="117"/><text x="98.3342%" y="191.50"></text></g><g><title>toy`std::alloc::__default_lib_allocator::__rdl_alloc (12 samples, 0.01%)</title><rect x="98.1873%" y="197" width="0.0106%" height="15" fill="rgb(206,174,23)" fg:x="111473" fg:w="12"/><text x="98.4373%" y="207.50"></text></g><g><title>toy`hashbrown::raw::RawTable&lt;tuple$&lt;petgraph::graph_impl::NodeIndex&lt;u32&gt;,i32&gt;,alloc::alloc::Global&gt;::reserve_rehash&lt;tuple$&lt;petgraph::graph_impl::NodeIndex&lt;u32&gt;,i32&gt;,alloc::alloc::Global,hashbrown::map::make_hasher::closure_env$0&lt;petgraph::graph_impl::NodeIndex (1,780 samples, 1.57%)</title><rect x="96.6318%" y="213" width="1.5679%" height="15" fill="rgb(211,33,43)" fg:x="109707" fg:w="1780"/><text x="96.8818%" y="223.50"></text></g><g><title>toy`petgraph::algo::astar::astar&lt;ref$&lt;petgraph::graph_impl::Graph&lt;enum2$&lt;aeg::aeg::Node&gt;,aeg::aeg::AegEdge,enum2$ (8,019 samples, 7.06%)</title><rect x="91.1531%" y="229" width="7.0633%" height="15" fill="rgb(245,58,50)" fg:x="103487" fg:w="8019"/><text x="91.4031%" y="239.50">toy`petgr..</text></g><g><title>toy`std::hash::random::impl$0::new::KEYS::__getit::__KEY (18 samples, 0.02%)</title><rect x="98.2005%" y="213" width="0.0159%" height="15" fill="rgb(244,68,36)" fg:x="111488" fg:w="18"/><text x="98.4505%" y="223.50"></text></g><g><title>toy`std::alloc::__default_lib_allocator::__rdl_alloc (111 samples, 0.10%)</title><rect x="98.2163%" y="229" width="0.0978%" height="15" fill="rgb(232,229,15)" fg:x="111506" fg:w="111"/><text x="98.4663%" y="239.50"></text></g><g><title>toy`aeg::aeg::AbstractEventGraph::find_critical_cycles (111,220 samples, 97.96%)</title><rect x="0.4166%" y="261" width="97.9644%" height="15" fill="rgb(254,30,23)" fg:x="473" fg:w="111220"/><text x="0.6666%" y="271.50">toy`aeg::aeg::AbstractEventGraph::find_critical_cycles</text></g><g><title>toy`aeg::critical_cycles::critical_cycles (111,220 samples, 97.96%)</title><rect x="0.4166%" y="245" width="97.9644%" height="15" fill="rgb(235,160,14)" fg:x="473" fg:w="111220"/><text x="0.6666%" y="255.50">toy`aeg::critical_cycles::critical_cycles</text></g><g><title>toy`std::alloc::__default_lib_allocator::__rdl_dealloc (76 samples, 0.07%)</title><rect x="98.3141%" y="229" width="0.0669%" height="15" fill="rgb(212,155,44)" fg:x="111617" fg:w="76"/><text x="98.5641%" y="239.50"></text></g><g><title>ntdll`RtlCopyMemory (14 samples, 0.01%)</title><rect x="98.4163%" y="149" width="0.0123%" height="15" fill="rgb(226,2,50)" fg:x="111733" fg:w="14"/><text x="98.6663%" y="159.50"></text></g><g><title>toy`alloc::raw_vec::impl$2::reserve::do_reserve_and_handle (16 samples, 0.01%)</title><rect x="98.4154%" y="229" width="0.0141%" height="15" fill="rgb(234,177,6)" fg:x="111732" fg:w="16"/><text x="98.6654%" y="239.50"></text></g><g><title>toy`alloc::raw_vec::finish_grow (16 samples, 0.01%)</title><rect x="98.4154%" y="213" width="0.0141%" height="15" fill="rgb(217,24,9)" fg:x="111732" fg:w="16"/><text x="98.6654%" y="223.50"></text></g><g><title>ntdll`RtlReAllocateHeap (16 samples, 0.01%)</title><rect x="98.4154%" y="197" width="0.0141%" height="15" fill="rgb(220,13,46)" fg:x="111732" fg:w="16"/><text x="98.6654%" y="207.50"></text></g><g><title>ntdll`RtlReAllocateHeap (16 samples, 0.01%)</title><rect x="98.4154%" y="181" width="0.0141%" height="15" fill="rgb(239,221,27)" fg:x="111732" fg:w="16"/><text x="98.6654%" y="191.50"></text></g><g><title>ntdll`RtlReAllocateHeap (16 samples, 0.01%)</title><rect x="98.4154%" y="165" width="0.0141%" height="15" fill="rgb(222,198,25)" fg:x="111732" fg:w="16"/><text x="98.6654%" y="175.50"></text></g><g><title>VCRUNTIME140`memmove (45 samples, 0.04%)</title><rect x="99.0117%" y="197" width="0.0396%" height="15" fill="rgb(211,99,13)" fg:x="112409" fg:w="45"/><text x="99.2617%" y="207.50"></text></g><g><title>ntdll`RtlCopyMemory (24 samples, 0.02%)</title><rect x="99.0514%" y="117" width="0.0211%" height="15" fill="rgb(232,111,31)" fg:x="112454" fg:w="24"/><text x="99.3014%" y="127.50"></text></g><g><title>toy`alloc::raw_vec::impl$2::reserve::do_reserve_and_handle (25 samples, 0.02%)</title><rect x="99.0514%" y="197" width="0.0220%" height="15" fill="rgb(245,82,37)" fg:x="112454" fg:w="25"/><text x="99.3014%" y="207.50"></text></g><g><title>toy`alloc::raw_vec::finish_grow (25 samples, 0.02%)</title><rect x="99.0514%" y="181" width="0.0220%" height="15" fill="rgb(227,149,46)" fg:x="112454" fg:w="25"/><text x="99.3014%" y="191.50"></text></g><g><title>ntdll`RtlReAllocateHeap (25 samples, 0.02%)</title><rect x="99.0514%" y="165" width="0.0220%" height="15" fill="rgb(218,36,50)" fg:x="112454" fg:w="25"/><text x="99.3014%" y="175.50"></text></g><g><title>ntdll`RtlReAllocateHeap (25 samples, 0.02%)</title><rect x="99.0514%" y="149" width="0.0220%" height="15" fill="rgb(226,80,48)" fg:x="112454" fg:w="25"/><text x="99.3014%" y="159.50"></text></g><g><title>ntdll`RtlReAllocateHeap (25 samples, 0.02%)</title><rect x="99.0514%" y="133" width="0.0220%" height="15" fill="rgb(238,224,15)" fg:x="112454" fg:w="25"/><text x="99.3014%" y="143.50"></text></g><g><title>toy`petgraph::graph_impl::serialization::impl$2::serialize&lt;u32,ref_mut$&lt;serde_json::ser::Serializer&lt;ref_mut$&lt;alloc::vec::Vec (612 samples, 0.54%)</title><rect x="98.5352%" y="213" width="0.5391%" height="15" fill="rgb(241,136,10)" fg:x="111868" fg:w="612"/><text x="98.7852%" y="223.50"></text></g><g><title>VCRUNTIME140`memmove (13 samples, 0.01%)</title><rect x="99.1483%" y="197" width="0.0115%" height="15" fill="rgb(208,32,45)" fg:x="112564" fg:w="13"/><text x="99.3983%" y="207.50"></text></g><g><title>toy`serde::ser::Serializer::collect_seq&lt;ref_mut$&lt;serde_json::ser::Serializer&lt;ref_mut$&lt;alloc::vec::Vec&lt;u8,alloc::alloc::Global&gt; &gt;,serde_json::ser::CompactFormatter&gt; &gt;,ref$&lt;alloc::vec::Vec (882 samples, 0.78%)</title><rect x="98.3890%" y="261" width="0.7769%" height="15" fill="rgb(207,135,9)" fg:x="111702" fg:w="882"/><text x="98.6390%" y="271.50"></text></g><g><title>toy`aeg::critical_cycles::_::impl$0::serialize&lt;ref_mut$&lt;serde_json::ser::Serializer&lt;ref_mut$&lt;alloc::vec::Vec (874 samples, 0.77%)</title><rect x="98.3960%" y="245" width="0.7698%" height="15" fill="rgb(206,86,44)" fg:x="111710" fg:w="874"/><text x="98.6460%" y="255.50"></text></g><g><title>toy`serde::ser::SerializeMap::serialize_entry&lt;enum2$&lt;serde_json::ser::Compound&lt;ref_mut$&lt;alloc::vec::Vec&lt;u8,alloc::alloc::Global&gt; &gt;,serde_json::ser::CompactFormatter&gt; &gt;,str$,alloc::vec::Vec&lt;petgraph::graph_impl::NodeIndex (836 samples, 0.74%)</title><rect x="98.4295%" y="229" width="0.7364%" height="15" fill="rgb(245,177,15)" fg:x="111748" fg:w="836"/><text x="98.6795%" y="239.50"></text></g><g><title>toy`serde_json::ser::format_escaped_str&lt;ref_mut$&lt;alloc::vec::Vec (104 samples, 0.09%)</title><rect x="99.0743%" y="213" width="0.0916%" height="15" fill="rgb(206,64,50)" fg:x="112480" fg:w="104"/><text x="99.3243%" y="223.50"></text></g><g><title>toy`core::slice::memchr::memrchr (20 samples, 0.02%)</title><rect x="99.1676%" y="181" width="0.0176%" height="15" fill="rgb(234,36,40)" fg:x="112586" fg:w="20"/><text x="99.4176%" y="191.50"></text></g><g><title>KERNELBASE`GetConsoleMode (378 samples, 0.33%)</title><rect x="99.1914%" y="133" width="0.3329%" height="15" fill="rgb(213,64,8)" fg:x="112613" fg:w="378"/><text x="99.4414%" y="143.50"></text></g><g><title>KERNELBASE`GetConsoleScreenBufferInfoEx (374 samples, 0.33%)</title><rect x="99.1949%" y="117" width="0.3294%" height="15" fill="rgb(210,75,36)" fg:x="112617" fg:w="374"/><text x="99.4449%" y="127.50"></text></g><g><title>KERNELBASE`GetConsoleScreenBufferInfoEx (373 samples, 0.33%)</title><rect x="99.1958%" y="101" width="0.3285%" height="15" fill="rgb(229,88,21)" fg:x="112618" fg:w="373"/><text x="99.4458%" y="111.50"></text></g><g><title>ntdll`NtDeviceIoControlFile (363 samples, 0.32%)</title><rect x="99.2046%" y="85" width="0.3197%" height="15" fill="rgb(252,204,47)" fg:x="112628" fg:w="363"/><text x="99.4546%" y="95.50"></text></g><g><title>KERNELBASE`GetStdHandle (17 samples, 0.01%)</title><rect x="99.5244%" y="133" width="0.0150%" height="15" fill="rgb(208,77,27)" fg:x="112991" fg:w="17"/><text x="99.7744%" y="143.50"></text></g><g><title>toy`core::str::converts::from_utf8 (17 samples, 0.01%)</title><rect x="99.5393%" y="133" width="0.0150%" height="15" fill="rgb(221,76,26)" fg:x="113008" fg:w="17"/><text x="99.7893%" y="143.50"></text></g><g><title>KERNELBASE`MultiByteToWideChar (83 samples, 0.07%)</title><rect x="99.5578%" y="117" width="0.0731%" height="15" fill="rgb(225,139,18)" fg:x="113029" fg:w="83"/><text x="99.8078%" y="127.50"></text></g><g><title>ntdll`RtlUTF8ToUnicodeN (78 samples, 0.07%)</title><rect x="99.5622%" y="101" width="0.0687%" height="15" fill="rgb(230,137,11)" fg:x="113034" fg:w="78"/><text x="99.8122%" y="111.50"></text></g><g><title>KERNELBASE`WriteConsoleW (404 samples, 0.36%)</title><rect x="99.6309%" y="117" width="0.3558%" height="15" fill="rgb(212,28,1)" fg:x="113112" fg:w="404"/><text x="99.8809%" y="127.50"></text></g><g><title>KERNELBASE`WriteConsoleW (403 samples, 0.35%)</title><rect x="99.6318%" y="101" width="0.3550%" height="15" fill="rgb(248,164,17)" fg:x="113113" fg:w="403"/><text x="99.8818%" y="111.50"></text></g><g><title>KERNELBASE`GetConsoleScreenBufferInfoEx (399 samples, 0.35%)</title><rect x="99.6353%" y="85" width="0.3514%" height="15" fill="rgb(222,171,42)" fg:x="113117" fg:w="399"/><text x="99.8853%" y="95.50"></text></g><g><title>ntdll`NtDeviceIoControlFile (385 samples, 0.34%)</title><rect x="99.6477%" y="69" width="0.3391%" height="15" fill="rgb(243,84,45)" fg:x="113131" fg:w="385"/><text x="99.8977%" y="79.50"></text></g><g><title>toy`std::io::Write::write_all (915 samples, 0.81%)</title><rect x="99.1861%" y="165" width="0.8059%" height="15" fill="rgb(252,49,23)" fg:x="112607" fg:w="915"/><text x="99.4361%" y="175.50"></text></g><g><title>toy`std::sys::windows::stdio::write (914 samples, 0.81%)</title><rect x="99.1870%" y="149" width="0.8051%" height="15" fill="rgb(215,19,7)" fg:x="112608" fg:w="914"/><text x="99.4370%" y="159.50"></text></g><g><title>toy`std::sys::windows::stdio::write_valid_utf8_to_console (497 samples, 0.44%)</title><rect x="99.5543%" y="133" width="0.4378%" height="15" fill="rgb(238,81,41)" fg:x="113025" fg:w="497"/><text x="99.8043%" y="143.50"></text></g><g><title>toy`std::io::stdio::impl$12::write_fmt (937 samples, 0.83%)</title><rect x="99.1676%" y="245" width="0.8253%" height="15" fill="rgb(210,199,37)" fg:x="112586" fg:w="937"/><text x="99.4176%" y="255.50"></text></g><g><title>toy`core::fmt::write (937 samples, 0.83%)</title><rect x="99.1676%" y="229" width="0.8253%" height="15" fill="rgb(244,192,49)" fg:x="112586" fg:w="937"/><text x="99.4176%" y="239.50"></text></g><g><title>toy`std::io::Write::write_fmt::impl$0::write_str (937 samples, 0.83%)</title><rect x="99.1676%" y="213" width="0.8253%" height="15" fill="rgb(226,211,11)" fg:x="112586" fg:w="937"/><text x="99.4176%" y="223.50"></text></g><g><title>toy`std::io::stdio::impl$13::write_all (937 samples, 0.83%)</title><rect x="99.1676%" y="197" width="0.8253%" height="15" fill="rgb(236,162,54)" fg:x="112586" fg:w="937"/><text x="99.4176%" y="207.50"></text></g><g><title>toy`std::io::buffered::bufwriter::BufWriter::write_all_cold (916 samples, 0.81%)</title><rect x="99.1861%" y="181" width="0.8068%" height="15" fill="rgb(220,229,9)" fg:x="112607" fg:w="916"/><text x="99.4361%" y="191.50"></text></g><g><title>toy`std::io::stdio::_print (938 samples, 0.83%)</title><rect x="99.1676%" y="261" width="0.8262%" height="15" fill="rgb(250,87,22)" fg:x="112586" fg:w="938"/><text x="99.4176%" y="271.50"></text></g><g><title>toy`main (113,491 samples, 99.96%)</title><rect x="0.0299%" y="341" width="99.9648%" height="15" fill="rgb(239,43,17)" fg:x="34" fg:w="113491"/><text x="0.2799%" y="351.50">toy`main</text></g><g><title>toy`std::rt::lang_start_internal (113,491 samples, 99.96%)</title><rect x="0.0299%" y="325" width="99.9648%" height="15" fill="rgb(231,177,25)" fg:x="34" fg:w="113491"/><text x="0.2799%" y="335.50">toy`std::rt::lang_start_internal</text></g><g><title>toy`core::ops::function::FnOnce::call_once&lt;std::rt::lang_start::closure_env$0&lt;tuple$&lt;&gt; &gt;,tuple$ (113,491 samples, 99.96%)</title><rect x="0.0299%" y="309" width="99.9648%" height="15" fill="rgb(219,179,1)" fg:x="34" fg:w="113491"/><text x="0.2799%" y="319.50">toy`core::ops::function::FnOnce::call_once&lt;std::rt::lang_start::closure_env$0&lt;tuple$&lt;&gt; &gt;,tuple$</text></g><g><title>toy`std::sys_common::backtrace::__rust_begin_short_backtrace&lt;void (*)(),tuple$ (113,491 samples, 99.96%)</title><rect x="0.0299%" y="293" width="99.9648%" height="15" fill="rgb(238,219,53)" fg:x="34" fg:w="113491"/><text x="0.2799%" y="303.50">toy`std::sys_common::backtrace::__rust_begin_short_backtrace&lt;void (*)(),tuple$</text></g><g><title>toy`toy::main (113,491 samples, 99.96%)</title><rect x="0.0299%" y="277" width="99.9648%" height="15" fill="rgb(232,167,36)" fg:x="34" fg:w="113491"/><text x="0.2799%" y="287.50">toy`toy::main</text></g><g><title>all (113,531 samples, 100%)</title><rect x="0.0000%" y="405" width="100.0000%" height="15" fill="rgb(244,19,51)" fg:x="0" fg:w="113531"/><text x="0.2500%" y="415.50"></text></g><g><title>ntdll`RtlUserThreadStart (113,506 samples, 99.98%)</title><rect x="0.0220%" y="389" width="99.9780%" height="15" fill="rgb(224,6,22)" fg:x="25" fg:w="113506"/><text x="0.2720%" y="399.50">ntdll`RtlUserThreadStart</text></g><g><title>KERNEL32`BaseThreadInitThunk (113,505 samples, 99.98%)</title><rect x="0.0229%" y="373" width="99.9771%" height="15" fill="rgb(224,145,5)" fg:x="26" fg:w="113505"/><text x="0.2729%" y="383.50">KERNEL32`BaseThreadInitThunk</text></g><g><title>toy`__scrt_common_main_seh (113,497 samples, 99.97%)</title><rect x="0.0299%" y="357" width="99.9701%" height="15" fill="rgb(234,130,49)" fg:x="34" fg:w="113497"/><text x="0.2799%" y="367.50">toy`__scrt_common_main_seh</text></g></svg></svg>