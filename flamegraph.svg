<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="470" onload="init(evt)" viewBox="0 0 1200 470" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="470" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="453.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="453.00"> </text><svg id="frames" x="10" width="1180" total_samples="23092"><g><title>ntdll`LdrGetDllHandleByMapping (5 samples, 0.02%)</title><rect x="0.0087%" y="293" width="0.0217%" height="15" fill="rgb(227,0,7)" fg:x="2" fg:w="5"/><text x="0.2587%" y="303.50"></text></g><g><title>ntdll`LdrAddRefDll (5 samples, 0.02%)</title><rect x="0.0087%" y="277" width="0.0217%" height="15" fill="rgb(217,0,24)" fg:x="2" fg:w="5"/><text x="0.2587%" y="287.50"></text></g><g><title>ntdll`LdrControlFlowGuardEnforced (5 samples, 0.02%)</title><rect x="0.0087%" y="261" width="0.0217%" height="15" fill="rgb(221,193,54)" fg:x="2" fg:w="5"/><text x="0.2587%" y="271.50"></text></g><g><title>ntdll`RtlImageNtHeaderEx (4 samples, 0.02%)</title><rect x="0.0130%" y="245" width="0.0173%" height="15" fill="rgb(248,212,6)" fg:x="3" fg:w="4"/><text x="0.2630%" y="255.50"></text></g><g><title>ntdll`LdrLoadDll (9 samples, 0.04%)</title><rect x="0.0087%" y="341" width="0.0390%" height="15" fill="rgb(208,68,35)" fg:x="2" fg:w="9"/><text x="0.2587%" y="351.50"></text></g><g><title>ntdll`RtlUnicodeToCustomCPN (9 samples, 0.04%)</title><rect x="0.0087%" y="325" width="0.0390%" height="15" fill="rgb(232,128,0)" fg:x="2" fg:w="9"/><text x="0.2587%" y="335.50"></text></g><g><title>ntdll`RtlImageRvaToSection (9 samples, 0.04%)</title><rect x="0.0087%" y="309" width="0.0390%" height="15" fill="rgb(207,160,47)" fg:x="2" fg:w="9"/><text x="0.2587%" y="319.50"></text></g><g><title>ntdll`RtlCopyUnicodeString (4 samples, 0.02%)</title><rect x="0.0303%" y="293" width="0.0173%" height="15" fill="rgb(228,23,34)" fg:x="7" fg:w="4"/><text x="0.2803%" y="303.50"></text></g><g><title>ntdll`RtlEnumerateEntryHashTable (4 samples, 0.02%)</title><rect x="0.0303%" y="277" width="0.0173%" height="15" fill="rgb(218,30,26)" fg:x="7" fg:w="4"/><text x="0.2803%" y="287.50"></text></g><g><title>ntdll`RtlEnumerateEntryHashTable (4 samples, 0.02%)</title><rect x="0.0303%" y="261" width="0.0173%" height="15" fill="rgb(220,122,19)" fg:x="7" fg:w="4"/><text x="0.2803%" y="271.50"></text></g><g><title>ntdll`RtlEnumerateEntryHashTable (4 samples, 0.02%)</title><rect x="0.0303%" y="245" width="0.0173%" height="15" fill="rgb(250,228,42)" fg:x="7" fg:w="4"/><text x="0.2803%" y="255.50"></text></g><g><title>ntdll`RtlActivateActivationContextUnsafeFast (4 samples, 0.02%)</title><rect x="0.0303%" y="229" width="0.0173%" height="15" fill="rgb(240,193,28)" fg:x="7" fg:w="4"/><text x="0.2803%" y="239.50"></text></g><g><title>KERNELBASE`TestCreate (4 samples, 0.02%)</title><rect x="0.0303%" y="213" width="0.0173%" height="15" fill="rgb(216,20,37)" fg:x="7" fg:w="4"/><text x="0.2803%" y="223.50"></text></g><g><title>KERNELBASE`TestCreate (4 samples, 0.02%)</title><rect x="0.0303%" y="197" width="0.0173%" height="15" fill="rgb(206,188,39)" fg:x="7" fg:w="4"/><text x="0.2803%" y="207.50"></text></g><g><title>ntdll`RtlEnumerateEntryHashTable (5 samples, 0.02%)</title><rect x="0.0476%" y="341" width="0.0217%" height="15" fill="rgb(217,207,13)" fg:x="11" fg:w="5"/><text x="0.2976%" y="351.50"></text></g><g><title>ntdll`RtlEnumerateEntryHashTable (5 samples, 0.02%)</title><rect x="0.0476%" y="325" width="0.0217%" height="15" fill="rgb(231,73,38)" fg:x="11" fg:w="5"/><text x="0.2976%" y="335.50"></text></g><g><title>ntdll`RtlEnumerateEntryHashTable (5 samples, 0.02%)</title><rect x="0.0476%" y="309" width="0.0217%" height="15" fill="rgb(225,20,46)" fg:x="11" fg:w="5"/><text x="0.2976%" y="319.50"></text></g><g><title>ntdll`RtlEnumerateEntryHashTable (4 samples, 0.02%)</title><rect x="0.0520%" y="293" width="0.0173%" height="15" fill="rgb(210,31,41)" fg:x="12" fg:w="4"/><text x="0.3020%" y="303.50"></text></g><g><title>ntdll`RtlActivateActivationContextUnsafeFast (4 samples, 0.02%)</title><rect x="0.0520%" y="277" width="0.0173%" height="15" fill="rgb(221,200,47)" fg:x="12" fg:w="4"/><text x="0.3020%" y="287.50"></text></g><g><title>ntdll`RtlImageNtHeaderEx (3 samples, 0.01%)</title><rect x="0.0779%" y="245" width="0.0130%" height="15" fill="rgb(226,26,5)" fg:x="18" fg:w="3"/><text x="0.3279%" y="255.50"></text></g><g><title>ntdll`RtlAnsiStringToUnicodeString (3 samples, 0.01%)</title><rect x="0.0779%" y="229" width="0.0130%" height="15" fill="rgb(249,33,26)" fg:x="18" fg:w="3"/><text x="0.3279%" y="239.50"></text></g><g><title>ntdll`LdrAddRefDll (3 samples, 0.01%)</title><rect x="0.0779%" y="213" width="0.0130%" height="15" fill="rgb(235,183,28)" fg:x="18" fg:w="3"/><text x="0.3279%" y="223.50"></text></g><g><title>ntdll`LdrControlFlowGuardEnforced (3 samples, 0.01%)</title><rect x="0.0779%" y="197" width="0.0130%" height="15" fill="rgb(221,5,38)" fg:x="18" fg:w="3"/><text x="0.3279%" y="207.50"></text></g><g><title>ntdll`RtlImageNtHeaderEx (6 samples, 0.03%)</title><rect x="0.0693%" y="341" width="0.0260%" height="15" fill="rgb(247,18,42)" fg:x="16" fg:w="6"/><text x="0.3193%" y="351.50"></text></g><g><title>ntdll`RtlImageNtHeaderEx (5 samples, 0.02%)</title><rect x="0.0736%" y="325" width="0.0217%" height="15" fill="rgb(241,131,45)" fg:x="17" fg:w="5"/><text x="0.3236%" y="335.50"></text></g><g><title>ntdll`RtlAnsiStringToUnicodeString (5 samples, 0.02%)</title><rect x="0.0736%" y="309" width="0.0217%" height="15" fill="rgb(249,31,29)" fg:x="17" fg:w="5"/><text x="0.3236%" y="319.50"></text></g><g><title>ntdll`LdrAddRefDll (5 samples, 0.02%)</title><rect x="0.0736%" y="293" width="0.0217%" height="15" fill="rgb(225,111,53)" fg:x="17" fg:w="5"/><text x="0.3236%" y="303.50"></text></g><g><title>ntdll`LdrControlFlowGuardEnforced (5 samples, 0.02%)</title><rect x="0.0736%" y="277" width="0.0217%" height="15" fill="rgb(238,160,17)" fg:x="17" fg:w="5"/><text x="0.3236%" y="287.50"></text></g><g><title>ntdll`RtlImageNtHeaderEx (4 samples, 0.02%)</title><rect x="0.0779%" y="261" width="0.0173%" height="15" fill="rgb(214,148,48)" fg:x="18" fg:w="4"/><text x="0.3279%" y="271.50"></text></g><g><title>ntdll`LdrInitializeThunk (26 samples, 0.11%)</title><rect x="0.0000%" y="389" width="0.1126%" height="15" fill="rgb(232,36,49)" fg:x="0" fg:w="26"/><text x="0.2500%" y="399.50"></text></g><g><title>ntdll`EtwLogTraceEvent (26 samples, 0.11%)</title><rect x="0.0000%" y="373" width="0.1126%" height="15" fill="rgb(209,103,24)" fg:x="0" fg:w="26"/><text x="0.2500%" y="383.50"></text></g><g><title>ntdll`LdrInitShimEngineDynamic (26 samples, 0.11%)</title><rect x="0.0000%" y="357" width="0.1126%" height="15" fill="rgb(229,88,8)" fg:x="0" fg:w="26"/><text x="0.2500%" y="367.50"></text></g><g><title>ntdll`LdrInitializeThunk (27 samples, 0.12%)</title><rect x="0.0000%" y="405" width="0.1169%" height="15" fill="rgb(213,181,19)" fg:x="0" fg:w="27"/><text x="0.2500%" y="415.50"></text></g><g><title>ntdll`LdrpResGetMappingSize (4 samples, 0.02%)</title><rect x="0.1256%" y="309" width="0.0173%" height="15" fill="rgb(254,191,54)" fg:x="29" fg:w="4"/><text x="0.3756%" y="319.50"></text></g><g><title>ntdll`RtlQueryPerformanceCounter (9 samples, 0.04%)</title><rect x="0.1256%" y="341" width="0.0390%" height="15" fill="rgb(241,83,37)" fg:x="29" fg:w="9"/><text x="0.3756%" y="351.50"></text></g><g><title>ntdll`RtlQueryPerformanceCounter (9 samples, 0.04%)</title><rect x="0.1256%" y="325" width="0.0390%" height="15" fill="rgb(233,36,39)" fg:x="29" fg:w="9"/><text x="0.3756%" y="335.50"></text></g><g><title>ntdll`RtlQueryPerformanceCounter (5 samples, 0.02%)</title><rect x="0.1429%" y="309" width="0.0217%" height="15" fill="rgb(226,3,54)" fg:x="33" fg:w="5"/><text x="0.3929%" y="319.50"></text></g><g><title>ntdll`RtlQueryPerformanceCounter (3 samples, 0.01%)</title><rect x="0.1516%" y="293" width="0.0130%" height="15" fill="rgb(245,192,40)" fg:x="35" fg:w="3"/><text x="0.4016%" y="303.50"></text></g><g><title>ntdll`RtlHashUnicodeString (10 samples, 0.04%)</title><rect x="0.1256%" y="357" width="0.0433%" height="15" fill="rgb(238,167,29)" fg:x="29" fg:w="10"/><text x="0.3756%" y="367.50"></text></g><g><title>ntdll`RtlClearThreadWorkOnBehalfTicket (12 samples, 0.05%)</title><rect x="0.1213%" y="373" width="0.0520%" height="15" fill="rgb(232,182,51)" fg:x="28" fg:w="12"/><text x="0.3713%" y="383.50"></text></g><g><title>ntdll`RtlCopyMemory (4 samples, 0.02%)</title><rect x="0.1776%" y="261" width="0.0173%" height="15" fill="rgb(231,60,39)" fg:x="41" fg:w="4"/><text x="0.4276%" y="271.50"></text></g><g><title>ntdll`RtlTryAcquirePebLock (4 samples, 0.02%)</title><rect x="0.1776%" y="245" width="0.0173%" height="15" fill="rgb(208,69,12)" fg:x="41" fg:w="4"/><text x="0.4276%" y="255.50"></text></g><g><title>ntdll`RtlTryAcquirePebLock (4 samples, 0.02%)</title><rect x="0.1776%" y="229" width="0.0173%" height="15" fill="rgb(235,93,37)" fg:x="41" fg:w="4"/><text x="0.4276%" y="239.50"></text></g><g><title>ntdll`RtlFreeHeap (4 samples, 0.02%)</title><rect x="0.1776%" y="213" width="0.0173%" height="15" fill="rgb(213,116,39)" fg:x="41" fg:w="4"/><text x="0.4276%" y="223.50"></text></g><g><title>ntdll`RtlGetCurrentServiceSessionId (4 samples, 0.02%)</title><rect x="0.1776%" y="197" width="0.0173%" height="15" fill="rgb(222,207,29)" fg:x="41" fg:w="4"/><text x="0.4276%" y="207.50"></text></g><g><title>ntdll`RtlDeleteBoundaryDescriptor (4 samples, 0.02%)</title><rect x="0.1776%" y="181" width="0.0173%" height="15" fill="rgb(206,96,30)" fg:x="41" fg:w="4"/><text x="0.4276%" y="191.50"></text></g><g><title>ntdll`RtlTryEnterCriticalSection (4 samples, 0.02%)</title><rect x="0.1776%" y="165" width="0.0173%" height="15" fill="rgb(218,138,4)" fg:x="41" fg:w="4"/><text x="0.4276%" y="175.50"></text></g><g><title>ntdll`RtlFreeHeap (9 samples, 0.04%)</title><rect x="0.1776%" y="277" width="0.0390%" height="15" fill="rgb(250,191,14)" fg:x="41" fg:w="9"/><text x="0.4276%" y="287.50"></text></g><g><title>ntdll`RtlGetCurrentServiceSessionId (5 samples, 0.02%)</title><rect x="0.1949%" y="261" width="0.0217%" height="15" fill="rgb(239,60,40)" fg:x="45" fg:w="5"/><text x="0.4449%" y="271.50"></text></g><g><title>KERNEL32`HeapFree (8 samples, 0.03%)</title><rect x="38.1561%" y="245" width="0.0346%" height="15" fill="rgb(206,27,48)" fg:x="8811" fg:w="8"/><text x="38.4061%" y="255.50"></text></g><g><title>VCRUNTIME140`memmove (11 samples, 0.05%)</title><rect x="38.2080%" y="245" width="0.0476%" height="15" fill="rgb(225,35,8)" fg:x="8823" fg:w="11"/><text x="38.4580%" y="255.50"></text></g><g><title>ntdll`RtlAllocateHeap (24 samples, 0.10%)</title><rect x="39.8363%" y="213" width="0.1039%" height="15" fill="rgb(250,213,24)" fg:x="9199" fg:w="24"/><text x="40.0863%" y="223.50"></text></g><g><title>ntdll`RtlAllocateHeap (452 samples, 1.96%)</title><rect x="38.2557%" y="245" width="1.9574%" height="15" fill="rgb(247,123,22)" fg:x="8834" fg:w="452"/><text x="38.5057%" y="255.50">n..</text></g><g><title>ntdll`RtlAllocateHeap (334 samples, 1.45%)</title><rect x="38.7667%" y="229" width="1.4464%" height="15" fill="rgb(231,138,38)" fg:x="8952" fg:w="334"/><text x="39.0167%" y="239.50"></text></g><g><title>ntdll`RtlUnhandledExceptionFilter (63 samples, 0.27%)</title><rect x="39.9402%" y="213" width="0.2728%" height="15" fill="rgb(231,145,46)" fg:x="9223" fg:w="63"/><text x="40.1902%" y="223.50"></text></g><g><title>ntdll`RtlCopyMemory (575 samples, 2.49%)</title><rect x="40.5552%" y="229" width="2.4900%" height="15" fill="rgb(251,118,11)" fg:x="9365" fg:w="575"/><text x="40.8052%" y="239.50">nt..</text></g><g><title>ntdll`RtlLookupElementGenericTableAvl (3 samples, 0.01%)</title><rect x="43.0322%" y="213" width="0.0130%" height="15" fill="rgb(217,147,25)" fg:x="9937" fg:w="3"/><text x="43.2822%" y="223.50"></text></g><g><title>ntdll`RtlFreeHeap (839 samples, 3.63%)</title><rect x="40.2131%" y="245" width="3.6333%" height="15" fill="rgb(247,81,37)" fg:x="9286" fg:w="839"/><text x="40.4631%" y="255.50">ntdl..</text></g><g><title>ntdll`RtlGetCurrentServiceSessionId (185 samples, 0.80%)</title><rect x="43.0452%" y="229" width="0.8011%" height="15" fill="rgb(209,12,38)" fg:x="9940" fg:w="185"/><text x="43.2952%" y="239.50"></text></g><g><title>ntdll`RtlFreeHeap (15 samples, 0.06%)</title><rect x="43.7814%" y="213" width="0.0650%" height="15" fill="rgb(227,1,9)" fg:x="10110" fg:w="15"/><text x="44.0314%" y="223.50"></text></g><g><title>toy`alloc::vec::spec_from_iter::impl$0::from_iter&lt;petgraph::graph_impl::NodeIndex&lt;u32&gt;,core::iter::adapters::filter_map::FilterMap&lt;petgraph::graph_impl::Edges&lt;aeg::aeg::AegEdge,enum2$ (5 samples, 0.02%)</title><rect x="43.9156%" y="229" width="0.0217%" height="15" fill="rgb(248,47,43)" fg:x="10141" fg:w="5"/><text x="44.1656%" y="239.50"></text></g><g><title>toy`aeg::aeg::AbstractEventGraph::is_po_connected (23 samples, 0.10%)</title><rect x="43.8507%" y="245" width="0.0996%" height="15" fill="rgb(221,10,30)" fg:x="10126" fg:w="23"/><text x="44.1007%" y="255.50"></text></g><g><title>toy`fixedbitset::FixedBitSet::with_capacity (3 samples, 0.01%)</title><rect x="43.9373%" y="229" width="0.0130%" height="15" fill="rgb(210,229,1)" fg:x="10146" fg:w="3"/><text x="44.1873%" y="239.50"></text></g><g><title>ntdll`RtlAllocateHeap (3 samples, 0.01%)</title><rect x="43.9373%" y="213" width="0.0130%" height="15" fill="rgb(222,148,37)" fg:x="10146" fg:w="3"/><text x="44.1873%" y="223.50"></text></g><g><title>ntdll`RtlAllocateHeap (3 samples, 0.01%)</title><rect x="43.9373%" y="197" width="0.0130%" height="15" fill="rgb(234,67,33)" fg:x="10146" fg:w="3"/><text x="44.1873%" y="207.50"></text></g><g><title>VCRUNTIME140`memcmp (22 samples, 0.10%)</title><rect x="44.7125%" y="229" width="0.0953%" height="15" fill="rgb(247,98,35)" fg:x="10325" fg:w="22"/><text x="44.9625%" y="239.50"></text></g><g><title>ntdll`RtlCopyMemory (173 samples, 0.75%)</title><rect x="44.9766%" y="213" width="0.7492%" height="15" fill="rgb(247,138,52)" fg:x="10386" fg:w="173"/><text x="45.2266%" y="223.50"></text></g><g><title>ntdll`RtlFreeHeap (298 samples, 1.29%)</title><rect x="44.8077%" y="229" width="1.2905%" height="15" fill="rgb(213,79,30)" fg:x="10347" fg:w="298"/><text x="45.0577%" y="239.50"></text></g><g><title>ntdll`RtlGetCurrentServiceSessionId (86 samples, 0.37%)</title><rect x="45.7258%" y="213" width="0.3724%" height="15" fill="rgb(246,177,23)" fg:x="10559" fg:w="86"/><text x="45.9758%" y="223.50"></text></g><g><title>ntdll`RtlFreeHeap (8 samples, 0.03%)</title><rect x="46.0636%" y="197" width="0.0346%" height="15" fill="rgb(230,62,27)" fg:x="10637" fg:w="8"/><text x="46.3136%" y="207.50"></text></g><g><title>ntdll`RtlCopyMemory (14 samples, 0.06%)</title><rect x="46.7002%" y="197" width="0.0606%" height="15" fill="rgb(216,154,8)" fg:x="10784" fg:w="14"/><text x="46.9502%" y="207.50"></text></g><g><title>ntdll`RtlFreeHeap (25 samples, 0.11%)</title><rect x="46.6872%" y="213" width="0.1083%" height="15" fill="rgb(244,35,45)" fg:x="10781" fg:w="25"/><text x="46.9372%" y="223.50"></text></g><g><title>ntdll`RtlGetCurrentServiceSessionId (8 samples, 0.03%)</title><rect x="46.7608%" y="197" width="0.0346%" height="15" fill="rgb(251,115,12)" fg:x="10798" fg:w="8"/><text x="47.0108%" y="207.50"></text></g><g><title>ntdll`RtlAllocateHeap (3 samples, 0.01%)</title><rect x="46.8474%" y="101" width="0.0130%" height="15" fill="rgb(240,54,50)" fg:x="10818" fg:w="3"/><text x="47.0974%" y="111.50"></text></g><g><title>ntdll`RtlAllocateHeap (14 samples, 0.06%)</title><rect x="46.8127%" y="133" width="0.0606%" height="15" fill="rgb(233,84,52)" fg:x="10810" fg:w="14"/><text x="47.0627%" y="143.50"></text></g><g><title>ntdll`RtlAllocateHeap (11 samples, 0.05%)</title><rect x="46.8257%" y="117" width="0.0476%" height="15" fill="rgb(207,117,47)" fg:x="10813" fg:w="11"/><text x="47.0757%" y="127.50"></text></g><g><title>ntdll`RtlCopyMemory (3 samples, 0.01%)</title><rect x="46.8777%" y="117" width="0.0130%" height="15" fill="rgb(249,43,39)" fg:x="10825" fg:w="3"/><text x="47.1277%" y="127.50"></text></g><g><title>ntdll`RtlReAllocateHeap (24 samples, 0.10%)</title><rect x="46.7954%" y="181" width="0.1039%" height="15" fill="rgb(209,38,44)" fg:x="10806" fg:w="24"/><text x="47.0454%" y="191.50"></text></g><g><title>ntdll`RtlReAllocateHeap (22 samples, 0.10%)</title><rect x="46.8041%" y="165" width="0.0953%" height="15" fill="rgb(236,212,23)" fg:x="10808" fg:w="22"/><text x="47.0541%" y="175.50"></text></g><g><title>ntdll`RtlReAllocateHeap (20 samples, 0.09%)</title><rect x="46.8127%" y="149" width="0.0866%" height="15" fill="rgb(242,79,21)" fg:x="10810" fg:w="20"/><text x="47.0627%" y="159.50"></text></g><g><title>ntdll`RtlFreeHeap (6 samples, 0.03%)</title><rect x="46.8734%" y="133" width="0.0260%" height="15" fill="rgb(211,96,35)" fg:x="10824" fg:w="6"/><text x="47.1234%" y="143.50"></text></g><g><title>toy`alloc::raw_vec::RawVec&lt;petgraph::graph_impl::NodeIndex&lt;u32&gt;,alloc::alloc::Global&gt;::reserve_for_push&lt;petgraph::graph_impl::NodeIndex (25 samples, 0.11%)</title><rect x="46.7954%" y="213" width="0.1083%" height="15" fill="rgb(253,215,40)" fg:x="10806" fg:w="25"/><text x="47.0454%" y="223.50"></text></g><g><title>toy`alloc::raw_vec::finish_grow (25 samples, 0.11%)</title><rect x="46.7954%" y="197" width="0.1083%" height="15" fill="rgb(211,81,21)" fg:x="10806" fg:w="25"/><text x="47.0454%" y="207.50"></text></g><g><title>ntdll`RtlAllocateHeap (3 samples, 0.01%)</title><rect x="47.0466%" y="165" width="0.0130%" height="15" fill="rgb(208,190,38)" fg:x="10864" fg:w="3"/><text x="47.2966%" y="175.50"></text></g><g><title>ntdll`RtlAllocateHeap (22 samples, 0.10%)</title><rect x="46.9730%" y="197" width="0.0953%" height="15" fill="rgb(235,213,38)" fg:x="10847" fg:w="22"/><text x="47.2230%" y="207.50"></text></g><g><title>ntdll`RtlAllocateHeap (19 samples, 0.08%)</title><rect x="46.9860%" y="181" width="0.0823%" height="15" fill="rgb(237,122,38)" fg:x="10850" fg:w="19"/><text x="47.2360%" y="191.50"></text></g><g><title>toy`alloc::vec::spec_from_iter::impl$0::from_iter&lt;petgraph::graph_impl::NodeIndex&lt;u32&gt;,core::iter::adapters::filter_map::FilterMap&lt;petgraph::graph_impl::Edges&lt;aeg::aeg::AegEdge,enum2$ (41 samples, 0.18%)</title><rect x="46.9037%" y="213" width="0.1776%" height="15" fill="rgb(244,218,35)" fg:x="10831" fg:w="41"/><text x="47.1537%" y="223.50"></text></g><g><title>toy`std::alloc::__default_lib_allocator::__rdl_alloc (3 samples, 0.01%)</title><rect x="47.0682%" y="197" width="0.0130%" height="15" fill="rgb(240,68,47)" fg:x="10869" fg:w="3"/><text x="47.3182%" y="207.50"></text></g><g><title>toy`aeg::aeg::AbstractEventGraph::is_po_connected (249 samples, 1.08%)</title><rect x="46.0982%" y="229" width="1.0783%" height="15" fill="rgb(210,16,53)" fg:x="10645" fg:w="249"/><text x="46.3482%" y="239.50"></text></g><g><title>toy`fixedbitset::FixedBitSet::with_capacity (22 samples, 0.10%)</title><rect x="47.0812%" y="213" width="0.0953%" height="15" fill="rgb(235,124,12)" fg:x="10872" fg:w="22"/><text x="47.3312%" y="223.50"></text></g><g><title>ntdll`RtlAllocateHeap (21 samples, 0.09%)</title><rect x="47.0856%" y="197" width="0.0909%" height="15" fill="rgb(224,169,11)" fg:x="10873" fg:w="21"/><text x="47.3356%" y="207.50"></text></g><g><title>ntdll`RtlAllocateHeap (17 samples, 0.07%)</title><rect x="47.1029%" y="181" width="0.0736%" height="15" fill="rgb(250,166,2)" fg:x="10877" fg:w="17"/><text x="47.3529%" y="191.50"></text></g><g><title>ntdll`RtlAllocateHeap (29 samples, 0.13%)</title><rect x="47.2415%" y="149" width="0.1256%" height="15" fill="rgb(242,216,29)" fg:x="10909" fg:w="29"/><text x="47.4915%" y="159.50"></text></g><g><title>ntdll`RtlAllocateHeap (24 samples, 0.10%)</title><rect x="47.2631%" y="133" width="0.1039%" height="15" fill="rgb(230,116,27)" fg:x="10914" fg:w="24"/><text x="47.5131%" y="143.50"></text></g><g><title>ntdll`RtlUnhandledExceptionFilter (5 samples, 0.02%)</title><rect x="47.3454%" y="117" width="0.0217%" height="15" fill="rgb(228,99,48)" fg:x="10933" fg:w="5"/><text x="47.5954%" y="127.50"></text></g><g><title>ntdll`RtlCopyMemory (4 samples, 0.02%)</title><rect x="47.3671%" y="133" width="0.0173%" height="15" fill="rgb(253,11,6)" fg:x="10938" fg:w="4"/><text x="47.6171%" y="143.50"></text></g><g><title>ntdll`RtlReAllocateHeap (49 samples, 0.21%)</title><rect x="47.1852%" y="197" width="0.2122%" height="15" fill="rgb(247,143,39)" fg:x="10896" fg:w="49"/><text x="47.4352%" y="207.50"></text></g><g><title>ntdll`RtlReAllocateHeap (49 samples, 0.21%)</title><rect x="47.1852%" y="181" width="0.2122%" height="15" fill="rgb(236,97,10)" fg:x="10896" fg:w="49"/><text x="47.4352%" y="191.50"></text></g><g><title>ntdll`RtlReAllocateHeap (43 samples, 0.19%)</title><rect x="47.2112%" y="165" width="0.1862%" height="15" fill="rgb(233,208,19)" fg:x="10902" fg:w="43"/><text x="47.4612%" y="175.50"></text></g><g><title>ntdll`RtlFreeHeap (7 samples, 0.03%)</title><rect x="47.3671%" y="149" width="0.0303%" height="15" fill="rgb(216,164,2)" fg:x="10938" fg:w="7"/><text x="47.6171%" y="159.50"></text></g><g><title>ntdll`RtlGetCurrentServiceSessionId (3 samples, 0.01%)</title><rect x="47.3844%" y="133" width="0.0130%" height="15" fill="rgb(220,129,5)" fg:x="10942" fg:w="3"/><text x="47.6344%" y="143.50"></text></g><g><title>toy`alloc::raw_vec::RawVec&lt;petgraph::graph_impl::NodeIndex&lt;u32&gt;,alloc::alloc::Global&gt;::reserve_for_push&lt;petgraph::graph_impl::NodeIndex (52 samples, 0.23%)</title><rect x="47.1765%" y="229" width="0.2252%" height="15" fill="rgb(242,17,10)" fg:x="10894" fg:w="52"/><text x="47.4265%" y="239.50"></text></g><g><title>toy`alloc::raw_vec::finish_grow (51 samples, 0.22%)</title><rect x="47.1808%" y="213" width="0.2209%" height="15" fill="rgb(242,107,0)" fg:x="10895" fg:w="51"/><text x="47.4308%" y="223.50"></text></g><g><title>ntdll`RtlAllocateHeap (18 samples, 0.08%)</title><rect x="47.4710%" y="197" width="0.0779%" height="15" fill="rgb(251,28,31)" fg:x="10962" fg:w="18"/><text x="47.7210%" y="207.50"></text></g><g><title>ntdll`RtlAllocateHeap (18 samples, 0.08%)</title><rect x="47.4710%" y="181" width="0.0779%" height="15" fill="rgb(233,223,10)" fg:x="10962" fg:w="18"/><text x="47.7210%" y="191.50"></text></g><g><title>ntdll`RtlAllocateHeap (4 samples, 0.02%)</title><rect x="47.8391%" y="117" width="0.0173%" height="15" fill="rgb(215,21,27)" fg:x="11047" fg:w="4"/><text x="48.0891%" y="127.50"></text></g><g><title>ntdll`RtlAllocateHeap (56 samples, 0.24%)</title><rect x="47.6485%" y="149" width="0.2425%" height="15" fill="rgb(232,23,21)" fg:x="11003" fg:w="56"/><text x="47.8985%" y="159.50"></text></g><g><title>ntdll`RtlAllocateHeap (46 samples, 0.20%)</title><rect x="47.6918%" y="133" width="0.1992%" height="15" fill="rgb(244,5,23)" fg:x="11013" fg:w="46"/><text x="47.9418%" y="143.50"></text></g><g><title>ntdll`RtlUnhandledExceptionFilter (7 samples, 0.03%)</title><rect x="47.8607%" y="117" width="0.0303%" height="15" fill="rgb(226,81,46)" fg:x="11052" fg:w="7"/><text x="48.1107%" y="127.50"></text></g><g><title>ntdll`RtlCopyMemory (7 samples, 0.03%)</title><rect x="47.8997%" y="133" width="0.0303%" height="15" fill="rgb(247,70,30)" fg:x="11061" fg:w="7"/><text x="48.1497%" y="143.50"></text></g><g><title>ntdll`RtlReAllocateHeap (85 samples, 0.37%)</title><rect x="47.5836%" y="165" width="0.3681%" height="15" fill="rgb(212,68,19)" fg:x="10988" fg:w="85"/><text x="47.8336%" y="175.50"></text></g><g><title>ntdll`RtlFreeHeap (14 samples, 0.06%)</title><rect x="47.8910%" y="149" width="0.0606%" height="15" fill="rgb(240,187,13)" fg:x="11059" fg:w="14"/><text x="48.1410%" y="159.50"></text></g><g><title>ntdll`RtlGetCurrentServiceSessionId (5 samples, 0.02%)</title><rect x="47.9300%" y="133" width="0.0217%" height="15" fill="rgb(223,113,26)" fg:x="11068" fg:w="5"/><text x="48.1800%" y="143.50"></text></g><g><title>ntdll`RtlReAllocateHeap (94 samples, 0.41%)</title><rect x="47.5489%" y="197" width="0.4071%" height="15" fill="rgb(206,192,2)" fg:x="10980" fg:w="94"/><text x="47.7989%" y="207.50"></text></g><g><title>ntdll`RtlReAllocateHeap (92 samples, 0.40%)</title><rect x="47.5576%" y="181" width="0.3984%" height="15" fill="rgb(241,108,4)" fg:x="10982" fg:w="92"/><text x="47.8076%" y="191.50"></text></g><g><title>toy`alloc::raw_vec::RawVec&lt;usize,alloc::alloc::Global&gt;::reserve_for_push (131 samples, 0.57%)</title><rect x="47.4017%" y="229" width="0.5673%" height="15" fill="rgb(247,173,49)" fg:x="10946" fg:w="131"/><text x="47.6517%" y="239.50"></text></g><g><title>toy`alloc::raw_vec::finish_grow (119 samples, 0.52%)</title><rect x="47.4537%" y="213" width="0.5153%" height="15" fill="rgb(224,114,35)" fg:x="10958" fg:w="119"/><text x="47.7037%" y="223.50"></text></g><g><title>toy`std::alloc::__default_lib_allocator::__rdl_realloc (3 samples, 0.01%)</title><rect x="47.9560%" y="197" width="0.0130%" height="15" fill="rgb(245,159,27)" fg:x="11074" fg:w="3"/><text x="48.2060%" y="207.50"></text></g><g><title>VCRUNTIME140`memmove (69 samples, 0.30%)</title><rect x="48.1162%" y="213" width="0.2988%" height="15" fill="rgb(245,172,44)" fg:x="11111" fg:w="69"/><text x="48.3662%" y="223.50"></text></g><g><title>ntdll`RtlAllocateHeap (80 samples, 0.35%)</title><rect x="50.2642%" y="181" width="0.3464%" height="15" fill="rgb(236,23,11)" fg:x="11607" fg:w="80"/><text x="50.5142%" y="191.50"></text></g><g><title>ntdll`RtlAllocateHeap (10 samples, 0.04%)</title><rect x="50.5673%" y="165" width="0.0433%" height="15" fill="rgb(205,117,38)" fg:x="11677" fg:w="10"/><text x="50.8173%" y="175.50"></text></g><g><title>ntdll`RtlEnumerateGenericTableWithoutSplayingAvl (4 samples, 0.02%)</title><rect x="50.6106%" y="181" width="0.0173%" height="15" fill="rgb(237,72,25)" fg:x="11687" fg:w="4"/><text x="50.8606%" y="191.50"></text></g><g><title>ntdll`RtlEnumerateGenericTableWithoutSplayingAvl (4 samples, 0.02%)</title><rect x="50.6106%" y="165" width="0.0173%" height="15" fill="rgb(244,70,9)" fg:x="11687" fg:w="4"/><text x="50.8606%" y="175.50"></text></g><g><title>ntdll`RtlAllocateHeap (605 samples, 2.62%)</title><rect x="48.4150%" y="213" width="2.6200%" height="15" fill="rgb(217,125,39)" fg:x="11180" fg:w="605"/><text x="48.6650%" y="223.50">nt..</text></g><g><title>ntdll`RtlAllocateHeap (466 samples, 2.02%)</title><rect x="49.0170%" y="197" width="2.0180%" height="15" fill="rgb(235,36,10)" fg:x="11319" fg:w="466"/><text x="49.2670%" y="207.50">n..</text></g><g><title>ntdll`RtlUnhandledExceptionFilter (93 samples, 0.40%)</title><rect x="50.6323%" y="181" width="0.4027%" height="15" fill="rgb(251,123,47)" fg:x="11692" fg:w="93"/><text x="50.8823%" y="191.50"></text></g><g><title>toy`_rust_alloc (6 samples, 0.03%)</title><rect x="51.0350%" y="213" width="0.0260%" height="15" fill="rgb(221,13,13)" fg:x="11785" fg:w="6"/><text x="51.2850%" y="223.50"></text></g><g><title>toy`memcpy (5 samples, 0.02%)</title><rect x="51.0610%" y="213" width="0.0217%" height="15" fill="rgb(238,131,9)" fg:x="11791" fg:w="5"/><text x="51.3110%" y="223.50"></text></g><g><title>toy`alloc::string::impl$6::clone (736 samples, 3.19%)</title><rect x="47.9690%" y="229" width="3.1873%" height="15" fill="rgb(211,50,8)" fg:x="11077" fg:w="736"/><text x="48.2190%" y="239.50">toy..</text></g><g><title>toy`std::alloc::__default_lib_allocator::__rdl_alloc (17 samples, 0.07%)</title><rect x="51.0826%" y="213" width="0.0736%" height="15" fill="rgb(245,182,24)" fg:x="11796" fg:w="17"/><text x="51.3326%" y="223.50"></text></g><g><title>VCRUNTIME140`memcmp (43 samples, 0.19%)</title><rect x="52.2215%" y="213" width="0.1862%" height="15" fill="rgb(242,14,37)" fg:x="12059" fg:w="43"/><text x="52.4715%" y="223.50"></text></g><g><title>toy`core::hash::BuildHasher::hash_one&lt;std::hash::random::RandomState,ref$ (361 samples, 1.56%)</title><rect x="52.4078%" y="213" width="1.5633%" height="15" fill="rgb(246,228,12)" fg:x="12102" fg:w="361"/><text x="52.6578%" y="223.50"></text></g><g><title>toy`core::hash::sip::impl$5::write (141 samples, 0.61%)</title><rect x="53.3605%" y="197" width="0.6106%" height="15" fill="rgb(213,55,15)" fg:x="12322" fg:w="141"/><text x="53.6105%" y="207.50"></text></g><g><title>VCRUNTIME140`memset (3 samples, 0.01%)</title><rect x="54.3392%" y="197" width="0.0130%" height="15" fill="rgb(209,9,3)" fg:x="12548" fg:w="3"/><text x="54.5892%" y="207.50"></text></g><g><title>ntdll`RtlAllocateHeap (18 samples, 0.08%)</title><rect x="54.6033%" y="165" width="0.0779%" height="15" fill="rgb(230,59,30)" fg:x="12609" fg:w="18"/><text x="54.8533%" y="175.50"></text></g><g><title>ntdll`RtlAllocateHeap (3 samples, 0.01%)</title><rect x="54.6683%" y="149" width="0.0130%" height="15" fill="rgb(209,121,21)" fg:x="12624" fg:w="3"/><text x="54.9183%" y="159.50"></text></g><g><title>ntdll`RtlEnumerateGenericTableWithoutSplayingAvl (5 samples, 0.02%)</title><rect x="54.6813%" y="165" width="0.0217%" height="15" fill="rgb(220,109,13)" fg:x="12627" fg:w="5"/><text x="54.9313%" y="175.50"></text></g><g><title>ntdll`RtlEnumerateGenericTableWithoutSplayingAvl (5 samples, 0.02%)</title><rect x="54.6813%" y="149" width="0.0217%" height="15" fill="rgb(232,18,1)" fg:x="12627" fg:w="5"/><text x="54.9313%" y="159.50"></text></g><g><title>ntdll`RtlAllocateHeap (5 samples, 0.02%)</title><rect x="54.6813%" y="133" width="0.0217%" height="15" fill="rgb(215,41,42)" fg:x="12627" fg:w="5"/><text x="54.9313%" y="143.50"></text></g><g><title>ntdll`RtlAllocateHeap (5 samples, 0.02%)</title><rect x="54.6813%" y="117" width="0.0217%" height="15" fill="rgb(224,123,36)" fg:x="12627" fg:w="5"/><text x="54.9313%" y="127.50"></text></g><g><title>ntdll`RtlTryEnterCriticalSection (3 samples, 0.01%)</title><rect x="54.6899%" y="101" width="0.0130%" height="15" fill="rgb(240,125,3)" fg:x="12629" fg:w="3"/><text x="54.9399%" y="111.50"></text></g><g><title>ntdll`NtAllocateVirtualMemory (3 samples, 0.01%)</title><rect x="54.6899%" y="85" width="0.0130%" height="15" fill="rgb(205,98,50)" fg:x="12629" fg:w="3"/><text x="54.9399%" y="95.50"></text></g><g><title>ntdll`RtlAllocateHeap (92 samples, 0.40%)</title><rect x="54.3522%" y="197" width="0.3984%" height="15" fill="rgb(205,185,37)" fg:x="12551" fg:w="92"/><text x="54.6022%" y="207.50"></text></g><g><title>ntdll`RtlAllocateHeap (85 samples, 0.37%)</title><rect x="54.3825%" y="181" width="0.3681%" height="15" fill="rgb(238,207,15)" fg:x="12558" fg:w="85"/><text x="54.6325%" y="191.50"></text></g><g><title>ntdll`RtlUnhandledExceptionFilter (11 samples, 0.05%)</title><rect x="54.7029%" y="165" width="0.0476%" height="15" fill="rgb(213,199,42)" fg:x="12632" fg:w="11"/><text x="54.9529%" y="175.50"></text></g><g><title>ntdll`RtlCopyMemory (12 samples, 0.05%)</title><rect x="54.7549%" y="181" width="0.0520%" height="15" fill="rgb(235,201,11)" fg:x="12644" fg:w="12"/><text x="55.0049%" y="191.50"></text></g><g><title>ntdll`RtlFreeHeap (22 samples, 0.10%)</title><rect x="54.7506%" y="197" width="0.0953%" height="15" fill="rgb(207,46,11)" fg:x="12643" fg:w="22"/><text x="55.0006%" y="207.50"></text></g><g><title>ntdll`RtlGetCurrentServiceSessionId (9 samples, 0.04%)</title><rect x="54.8069%" y="181" width="0.0390%" height="15" fill="rgb(241,35,35)" fg:x="12656" fg:w="9"/><text x="55.0569%" y="191.50"></text></g><g><title>toy`core::hash::BuildHasher::hash_one&lt;std::hash::random::RandomState,ref$ (59 samples, 0.26%)</title><rect x="54.8458%" y="197" width="0.2555%" height="15" fill="rgb(243,32,47)" fg:x="12665" fg:w="59"/><text x="55.0958%" y="207.50"></text></g><g><title>toy`core::hash::sip::impl$5::write (22 samples, 0.10%)</title><rect x="55.0061%" y="181" width="0.0953%" height="15" fill="rgb(247,202,23)" fg:x="12702" fg:w="22"/><text x="55.2561%" y="191.50"></text></g><g><title>toy`hashbrown::map::HashMap&lt;alloc::string::String,alloc::vec::Vec&lt;usize,alloc::alloc::Global&gt;,std::hash::random::RandomState,alloc::alloc::Global&gt;::rustc_entry&lt;alloc::string::String,alloc::vec::Vec (913 samples, 3.95%)</title><rect x="51.1562%" y="229" width="3.9538%" height="15" fill="rgb(219,102,11)" fg:x="11813" fg:w="913"/><text x="51.4062%" y="239.50">toy`..</text></g><g><title>toy`hashbrown::raw::RawTable&lt;tuple$&lt;alloc::string::String,alloc::vec::Vec&lt;usize,alloc::alloc::Global&gt; &gt;,alloc::alloc::Global&gt;::reserve_rehash&lt;tuple$&lt;alloc::string::String,alloc::vec::Vec&lt;usize,alloc::alloc::Global&gt; &gt;,alloc::alloc::Global,hashbrown::map::make_hasher::closure_env$0&lt;alloc::string::String,alloc::vec::Vec (263 samples, 1.14%)</title><rect x="53.9711%" y="213" width="1.1389%" height="15" fill="rgb(243,110,44)" fg:x="12463" fg:w="263"/><text x="54.2211%" y="223.50"></text></g><g><title>toy`aeg::critical_cycles::IncompleteMinimalCycle (2,585 samples, 11.19%)</title><rect x="43.9503%" y="245" width="11.1944%" height="15" fill="rgb(222,74,54)" fg:x="10149" fg:w="2585"/><text x="44.2003%" y="255.50">toy`aeg::critica..</text></g><g><title>toy`std::alloc::__default_lib_allocator::__rdl_dealloc (7 samples, 0.03%)</title><rect x="55.1143%" y="229" width="0.0303%" height="15" fill="rgb(216,99,12)" fg:x="12727" fg:w="7"/><text x="55.3643%" y="239.50"></text></g><g><title>toy`alloc::raw_vec::RawVec&lt;aeg::critical_cycles::IncompleteMinimalCycle&lt;alloc::string::String,alloc::string::String&gt;,alloc::alloc::Global&gt;::reserve_for_push&lt;aeg::critical_cycles::IncompleteMinimalCycle (5 samples, 0.02%)</title><rect x="55.1446%" y="245" width="0.0217%" height="15" fill="rgb(226,22,26)" fg:x="12734" fg:w="5"/><text x="55.3946%" y="255.50"></text></g><g><title>toy`alloc::raw_vec::finish_grow (5 samples, 0.02%)</title><rect x="55.1446%" y="229" width="0.0217%" height="15" fill="rgb(217,163,10)" fg:x="12734" fg:w="5"/><text x="55.3946%" y="239.50"></text></g><g><title>ntdll`RtlReAllocateHeap (5 samples, 0.02%)</title><rect x="55.1446%" y="213" width="0.0217%" height="15" fill="rgb(213,25,53)" fg:x="12734" fg:w="5"/><text x="55.3946%" y="223.50"></text></g><g><title>ntdll`RtlReAllocateHeap (5 samples, 0.02%)</title><rect x="55.1446%" y="197" width="0.0217%" height="15" fill="rgb(252,105,26)" fg:x="12734" fg:w="5"/><text x="55.3946%" y="207.50"></text></g><g><title>ntdll`RtlReAllocateHeap (5 samples, 0.02%)</title><rect x="55.1446%" y="181" width="0.0217%" height="15" fill="rgb(220,39,43)" fg:x="12734" fg:w="5"/><text x="55.3946%" y="191.50"></text></g><g><title>ntdll`RtlCopyMemory (4 samples, 0.02%)</title><rect x="55.1490%" y="165" width="0.0173%" height="15" fill="rgb(229,68,48)" fg:x="12735" fg:w="4"/><text x="55.3990%" y="175.50"></text></g><g><title>ntdll`RtlAllocateHeap (31 samples, 0.13%)</title><rect x="55.2616%" y="165" width="0.1342%" height="15" fill="rgb(252,8,32)" fg:x="12761" fg:w="31"/><text x="55.5116%" y="175.50"></text></g><g><title>ntdll`RtlAllocateHeap (28 samples, 0.12%)</title><rect x="55.2746%" y="149" width="0.1213%" height="15" fill="rgb(223,20,43)" fg:x="12764" fg:w="28"/><text x="55.5246%" y="159.50"></text></g><g><title>ntdll`RtlUnhandledExceptionFilter (8 samples, 0.03%)</title><rect x="55.3612%" y="133" width="0.0346%" height="15" fill="rgb(229,81,49)" fg:x="12784" fg:w="8"/><text x="55.6112%" y="143.50"></text></g><g><title>ntdll`RtlCopyMemory (5 samples, 0.02%)</title><rect x="55.4045%" y="149" width="0.0217%" height="15" fill="rgb(236,28,36)" fg:x="12794" fg:w="5"/><text x="55.6545%" y="159.50"></text></g><g><title>ntdll`RtlReAllocateHeap (47 samples, 0.20%)</title><rect x="55.2312%" y="181" width="0.2035%" height="15" fill="rgb(249,185,26)" fg:x="12754" fg:w="47"/><text x="55.4812%" y="191.50"></text></g><g><title>ntdll`RtlFreeHeap (8 samples, 0.03%)</title><rect x="55.4001%" y="165" width="0.0346%" height="15" fill="rgb(249,174,33)" fg:x="12793" fg:w="8"/><text x="55.6501%" y="175.50"></text></g><g><title>ntdll`RtlReAllocateHeap (55 samples, 0.24%)</title><rect x="55.2009%" y="213" width="0.2382%" height="15" fill="rgb(233,201,37)" fg:x="12747" fg:w="55"/><text x="55.4509%" y="223.50"></text></g><g><title>ntdll`RtlReAllocateHeap (55 samples, 0.24%)</title><rect x="55.2009%" y="197" width="0.2382%" height="15" fill="rgb(221,78,26)" fg:x="12747" fg:w="55"/><text x="55.4509%" y="207.50"></text></g><g><title>toy`alloc::raw_vec::RawVec&lt;petgraph::graph_impl::NodeIndex&lt;u32&gt;,alloc::alloc::Global&gt;::reserve_for_push&lt;petgraph::graph_impl::NodeIndex (64 samples, 0.28%)</title><rect x="55.1663%" y="245" width="0.2772%" height="15" fill="rgb(250,127,30)" fg:x="12739" fg:w="64"/><text x="55.4163%" y="255.50"></text></g><g><title>toy`alloc::raw_vec::finish_grow (58 samples, 0.25%)</title><rect x="55.1923%" y="229" width="0.2512%" height="15" fill="rgb(230,49,44)" fg:x="12745" fg:w="58"/><text x="55.4423%" y="239.50"></text></g><g><title>ntdll`RtlAllocateHeap (3 samples, 0.01%)</title><rect x="55.4608%" y="229" width="0.0130%" height="15" fill="rgb(229,67,23)" fg:x="12807" fg:w="3"/><text x="55.7108%" y="239.50"></text></g><g><title>toy`alloc::vec::in_place_collect::impl$1::from_iter&lt;aeg::critical_cycles::CriticalCycle,core::iter::adapters::map::Map&lt;alloc::vec::into_iter::IntoIter&lt;alloc::vec::Vec&lt;petgraph::graph_impl::EdgeIndex (6 samples, 0.03%)</title><rect x="55.4564%" y="245" width="0.0260%" height="15" fill="rgb(249,83,47)" fg:x="12806" fg:w="6"/><text x="55.7064%" y="255.50"></text></g><g><title>ntdll`RtlAllocateHeap (28 samples, 0.12%)</title><rect x="55.7033%" y="229" width="0.1213%" height="15" fill="rgb(215,43,3)" fg:x="12863" fg:w="28"/><text x="55.9533%" y="239.50"></text></g><g><title>ntdll`RtlAllocateHeap (23 samples, 0.10%)</title><rect x="55.7249%" y="213" width="0.0996%" height="15" fill="rgb(238,154,13)" fg:x="12868" fg:w="23"/><text x="55.9749%" y="223.50"></text></g><g><title>toy`alloc::vec::spec_from_iter::impl$0::from_iter&lt;petgraph::graph_impl::NodeIndex&lt;u32&gt;,core::iter::adapters::filter_map::FilterMap&lt;petgraph::graph_impl::Edges&lt;aeg::aeg::AegEdge,enum2$ (81 samples, 0.35%)</title><rect x="55.4824%" y="245" width="0.3508%" height="15" fill="rgb(219,56,2)" fg:x="12812" fg:w="81"/><text x="55.7324%" y="255.50"></text></g><g><title>ntdll`RtlCopyMemory (70 samples, 0.30%)</title><rect x="55.8635%" y="213" width="0.3031%" height="15" fill="rgb(233,0,4)" fg:x="12900" fg:w="70"/><text x="56.1135%" y="223.50"></text></g><g><title>ntdll`RtlTryAcquirePebLock (38 samples, 0.16%)</title><rect x="56.0021%" y="197" width="0.1646%" height="15" fill="rgb(235,30,7)" fg:x="12932" fg:w="38"/><text x="56.2521%" y="207.50"></text></g><g><title>ntdll`RtlTryAcquirePebLock (38 samples, 0.16%)</title><rect x="56.0021%" y="181" width="0.1646%" height="15" fill="rgb(250,79,13)" fg:x="12932" fg:w="38"/><text x="56.2521%" y="191.50"></text></g><g><title>ntdll`RtlFreeHeap (36 samples, 0.16%)</title><rect x="56.0107%" y="165" width="0.1559%" height="15" fill="rgb(211,146,34)" fg:x="12934" fg:w="36"/><text x="56.2607%" y="175.50"></text></g><g><title>ntdll`RtlGetCurrentServiceSessionId (36 samples, 0.16%)</title><rect x="56.0107%" y="149" width="0.1559%" height="15" fill="rgb(228,22,38)" fg:x="12934" fg:w="36"/><text x="56.2607%" y="159.50"></text></g><g><title>ntdll`RtlDeleteBoundaryDescriptor (36 samples, 0.16%)</title><rect x="56.0107%" y="133" width="0.1559%" height="15" fill="rgb(235,168,5)" fg:x="12934" fg:w="36"/><text x="56.2607%" y="143.50"></text></g><g><title>ntdll`RtlTryEnterCriticalSection (34 samples, 0.15%)</title><rect x="56.0194%" y="117" width="0.1472%" height="15" fill="rgb(221,155,16)" fg:x="12936" fg:w="34"/><text x="56.2694%" y="127.50"></text></g><g><title>ntdll`RtlTryEnterCriticalSection (34 samples, 0.15%)</title><rect x="56.0194%" y="101" width="0.1472%" height="15" fill="rgb(215,215,53)" fg:x="12936" fg:w="34"/><text x="56.2694%" y="111.50"></text></g><g><title>ntdll`RtlTryEnterCriticalSection (33 samples, 0.14%)</title><rect x="56.0237%" y="85" width="0.1429%" height="15" fill="rgb(223,4,10)" fg:x="12937" fg:w="33"/><text x="56.2737%" y="95.50"></text></g><g><title>ntdll`RtlTryEnterCriticalSection (33 samples, 0.14%)</title><rect x="56.0237%" y="69" width="0.1429%" height="15" fill="rgb(234,103,6)" fg:x="12937" fg:w="33"/><text x="56.2737%" y="79.50"></text></g><g><title>ntdll`NtFreeVirtualMemory (33 samples, 0.14%)</title><rect x="56.0237%" y="53" width="0.1429%" height="15" fill="rgb(227,97,0)" fg:x="12937" fg:w="33"/><text x="56.2737%" y="63.50"></text></g><g><title>ntdll`RtlFreeHeap (92 samples, 0.40%)</title><rect x="55.8418%" y="229" width="0.3984%" height="15" fill="rgb(234,150,53)" fg:x="12895" fg:w="92"/><text x="56.0918%" y="239.50"></text></g><g><title>ntdll`RtlGetCurrentServiceSessionId (17 samples, 0.07%)</title><rect x="56.1666%" y="213" width="0.0736%" height="15" fill="rgb(228,201,54)" fg:x="12970" fg:w="17"/><text x="56.4166%" y="223.50"></text></g><g><title>ntdll`RtlCopyMemory (132 samples, 0.57%)</title><rect x="56.9375%" y="197" width="0.5716%" height="15" fill="rgb(222,22,37)" fg:x="13148" fg:w="132"/><text x="57.1875%" y="207.50"></text></g><g><title>ntdll`RtlTryAcquirePebLock (17 samples, 0.07%)</title><rect x="57.4355%" y="181" width="0.0736%" height="15" fill="rgb(237,53,32)" fg:x="13263" fg:w="17"/><text x="57.6855%" y="191.50"></text></g><g><title>ntdll`RtlTryAcquirePebLock (16 samples, 0.07%)</title><rect x="57.4398%" y="165" width="0.0693%" height="15" fill="rgb(233,25,53)" fg:x="13264" fg:w="16"/><text x="57.6898%" y="175.50"></text></g><g><title>ntdll`RtlFreeHeap (14 samples, 0.06%)</title><rect x="57.4485%" y="149" width="0.0606%" height="15" fill="rgb(210,40,34)" fg:x="13266" fg:w="14"/><text x="57.6985%" y="159.50"></text></g><g><title>ntdll`RtlGetCurrentServiceSessionId (14 samples, 0.06%)</title><rect x="57.4485%" y="133" width="0.0606%" height="15" fill="rgb(241,220,44)" fg:x="13266" fg:w="14"/><text x="57.6985%" y="143.50"></text></g><g><title>ntdll`RtlDeleteBoundaryDescriptor (14 samples, 0.06%)</title><rect x="57.4485%" y="117" width="0.0606%" height="15" fill="rgb(235,28,35)" fg:x="13266" fg:w="14"/><text x="57.6985%" y="127.50"></text></g><g><title>ntdll`RtlTryEnterCriticalSection (14 samples, 0.06%)</title><rect x="57.4485%" y="101" width="0.0606%" height="15" fill="rgb(210,56,17)" fg:x="13266" fg:w="14"/><text x="57.6985%" y="111.50"></text></g><g><title>ntdll`RtlTryEnterCriticalSection (13 samples, 0.06%)</title><rect x="57.4528%" y="85" width="0.0563%" height="15" fill="rgb(224,130,29)" fg:x="13267" fg:w="13"/><text x="57.7028%" y="95.50"></text></g><g><title>ntdll`RtlTryEnterCriticalSection (12 samples, 0.05%)</title><rect x="57.4571%" y="69" width="0.0520%" height="15" fill="rgb(235,212,8)" fg:x="13268" fg:w="12"/><text x="57.7071%" y="79.50"></text></g><g><title>ntdll`RtlTryEnterCriticalSection (12 samples, 0.05%)</title><rect x="57.4571%" y="53" width="0.0520%" height="15" fill="rgb(223,33,50)" fg:x="13268" fg:w="12"/><text x="57.7071%" y="63.50"></text></g><g><title>ntdll`NtFreeVirtualMemory (12 samples, 0.05%)</title><rect x="57.4571%" y="37" width="0.0520%" height="15" fill="rgb(219,149,13)" fg:x="13268" fg:w="12"/><text x="57.7071%" y="47.50"></text></g><g><title>toy`hashbrown::raw::impl$18::drop&lt;tuple$&lt;alloc::string::String,alloc::vec::Vec (416 samples, 1.80%)</title><rect x="56.2403%" y="229" width="1.8015%" height="15" fill="rgb(250,156,29)" fg:x="12987" fg:w="416"/><text x="56.4903%" y="239.50">t..</text></g><g><title>ntdll`RtlFreeHeap (270 samples, 1.17%)</title><rect x="56.8725%" y="213" width="1.1692%" height="15" fill="rgb(216,193,19)" fg:x="13133" fg:w="270"/><text x="57.1225%" y="223.50"></text></g><g><title>ntdll`RtlGetCurrentServiceSessionId (123 samples, 0.53%)</title><rect x="57.5091%" y="197" width="0.5327%" height="15" fill="rgb(216,135,14)" fg:x="13280" fg:w="123"/><text x="57.7591%" y="207.50"></text></g><g><title>toy`core::ptr::drop_in_place&lt;slice2$&lt;aeg::critical_cycles::IncompleteMinimalCycle (511 samples, 2.21%)</title><rect x="55.8332%" y="245" width="2.2129%" height="15" fill="rgb(241,47,5)" fg:x="12893" fg:w="511"/><text x="56.0832%" y="255.50">t..</text></g><g><title>ntdll`RtlAllocateHeap (21 samples, 0.09%)</title><rect x="58.0591%" y="229" width="0.0909%" height="15" fill="rgb(233,42,35)" fg:x="13407" fg:w="21"/><text x="58.3091%" y="239.50"></text></g><g><title>ntdll`RtlAllocateHeap (14 samples, 0.06%)</title><rect x="58.0894%" y="213" width="0.0606%" height="15" fill="rgb(231,13,6)" fg:x="13414" fg:w="14"/><text x="58.3394%" y="223.50"></text></g><g><title>ntdll`RtlUnhandledExceptionFilter (3 samples, 0.01%)</title><rect x="58.1370%" y="197" width="0.0130%" height="15" fill="rgb(207,181,40)" fg:x="13425" fg:w="3"/><text x="58.3870%" y="207.50"></text></g><g><title>toy`fixedbitset::FixedBitSet::with_capacity (26 samples, 0.11%)</title><rect x="58.0461%" y="245" width="0.1126%" height="15" fill="rgb(254,173,49)" fg:x="13404" fg:w="26"/><text x="58.2961%" y="255.50"></text></g><g><title>VCRUNTIME140`memcpy (4 samples, 0.02%)</title><rect x="61.8179%" y="229" width="0.0173%" height="15" fill="rgb(221,1,38)" fg:x="14275" fg:w="4"/><text x="62.0679%" y="239.50"></text></g><g><title>VCRUNTIME140`memmove (129 samples, 0.56%)</title><rect x="61.8353%" y="229" width="0.5586%" height="15" fill="rgb(206,124,46)" fg:x="14279" fg:w="129"/><text x="62.0853%" y="239.50"></text></g><g><title>ntdll`RtlAllocateHeap (418 samples, 1.81%)</title><rect x="71.9427%" y="197" width="1.8102%" height="15" fill="rgb(249,21,11)" fg:x="16613" fg:w="418"/><text x="72.1927%" y="207.50">n..</text></g><g><title>ntdll`RtlAllocateHeap (44 samples, 0.19%)</title><rect x="73.5623%" y="181" width="0.1905%" height="15" fill="rgb(222,201,40)" fg:x="16987" fg:w="44"/><text x="73.8123%" y="191.50"></text></g><g><title>ntdll`NtAllocateVirtualMemory (6 samples, 0.03%)</title><rect x="73.7918%" y="117" width="0.0260%" height="15" fill="rgb(235,61,29)" fg:x="17040" fg:w="6"/><text x="74.0418%" y="127.50"></text></g><g><title>ntdll`RtlAllocateHeap (16 samples, 0.07%)</title><rect x="73.7658%" y="165" width="0.0693%" height="15" fill="rgb(219,207,3)" fg:x="17034" fg:w="16"/><text x="74.0158%" y="175.50"></text></g><g><title>ntdll`RtlAllocateHeap (16 samples, 0.07%)</title><rect x="73.7658%" y="149" width="0.0693%" height="15" fill="rgb(222,56,46)" fg:x="17034" fg:w="16"/><text x="74.0158%" y="159.50"></text></g><g><title>ntdll`RtlTryEnterCriticalSection (10 samples, 0.04%)</title><rect x="73.7918%" y="133" width="0.0433%" height="15" fill="rgb(239,76,54)" fg:x="17040" fg:w="10"/><text x="74.0418%" y="143.50"></text></g><g><title>ntdll`RtlTryEnterCriticalSection (3 samples, 0.01%)</title><rect x="73.8221%" y="117" width="0.0130%" height="15" fill="rgb(231,124,27)" fg:x="17047" fg:w="3"/><text x="74.0721%" y="127.50"></text></g><g><title>ntdll`RtlEnumerateGenericTableWithoutSplayingAvl (21 samples, 0.09%)</title><rect x="73.7528%" y="197" width="0.0909%" height="15" fill="rgb(249,195,6)" fg:x="17031" fg:w="21"/><text x="74.0028%" y="207.50"></text></g><g><title>ntdll`RtlEnumerateGenericTableWithoutSplayingAvl (20 samples, 0.09%)</title><rect x="73.7571%" y="181" width="0.0866%" height="15" fill="rgb(237,174,47)" fg:x="17032" fg:w="20"/><text x="74.0071%" y="191.50"></text></g><g><title>ntdll`RtlAllocateHeap (3,171 samples, 13.73%)</title><rect x="62.3939%" y="229" width="13.7320%" height="15" fill="rgb(206,201,31)" fg:x="14408" fg:w="3171"/><text x="62.6439%" y="239.50">ntdll`RtlAllocateHeap</text></g><g><title>ntdll`RtlAllocateHeap (2,591 samples, 11.22%)</title><rect x="64.9056%" y="213" width="11.2203%" height="15" fill="rgb(231,57,52)" fg:x="14988" fg:w="2591"/><text x="65.1556%" y="223.50">ntdll`RtlAllocate..</text></g><g><title>ntdll`RtlUnhandledExceptionFilter (527 samples, 2.28%)</title><rect x="73.8438%" y="197" width="2.2822%" height="15" fill="rgb(248,177,22)" fg:x="17052" fg:w="527"/><text x="74.0938%" y="207.50">n..</text></g><g><title>toy`_rust_alloc (4 samples, 0.02%)</title><rect x="76.1259%" y="229" width="0.0173%" height="15" fill="rgb(215,211,37)" fg:x="17579" fg:w="4"/><text x="76.3759%" y="239.50"></text></g><g><title>VCRUNTIME140`memcpy (3 samples, 0.01%)</title><rect x="76.8015%" y="213" width="0.0130%" height="15" fill="rgb(241,128,51)" fg:x="17735" fg:w="3"/><text x="77.0515%" y="223.50"></text></g><g><title>VCRUNTIME140`memmove (84 samples, 0.36%)</title><rect x="76.8145%" y="213" width="0.3638%" height="15" fill="rgb(227,165,31)" fg:x="17738" fg:w="84"/><text x="77.0645%" y="223.50"></text></g><g><title>ntdll`RtlAllocateHeap (313 samples, 1.36%)</title><rect x="83.1933%" y="181" width="1.3554%" height="15" fill="rgb(228,167,24)" fg:x="19211" fg:w="313"/><text x="83.4433%" y="191.50"></text></g><g><title>ntdll`RtlAllocateHeap (50 samples, 0.22%)</title><rect x="84.3322%" y="165" width="0.2165%" height="15" fill="rgb(228,143,12)" fg:x="19474" fg:w="50"/><text x="84.5822%" y="175.50"></text></g><g><title>ntdll`NtProtectVirtualMemory (3 samples, 0.01%)</title><rect x="84.5488%" y="149" width="0.0130%" height="15" fill="rgb(249,149,8)" fg:x="19524" fg:w="3"/><text x="84.7988%" y="159.50"></text></g><g><title>ntdll`RtlAllocateHeap (3 samples, 0.01%)</title><rect x="84.5618%" y="149" width="0.0130%" height="15" fill="rgb(243,35,44)" fg:x="19527" fg:w="3"/><text x="84.8118%" y="159.50"></text></g><g><title>ntdll`RtlAllocateHeap (3 samples, 0.01%)</title><rect x="84.5618%" y="133" width="0.0130%" height="15" fill="rgb(246,89,9)" fg:x="19527" fg:w="3"/><text x="84.8118%" y="143.50"></text></g><g><title>ntdll`RtlTryEnterCriticalSection (3 samples, 0.01%)</title><rect x="84.5618%" y="117" width="0.0130%" height="15" fill="rgb(233,213,13)" fg:x="19527" fg:w="3"/><text x="84.8118%" y="127.50"></text></g><g><title>ntdll`RtlEnumerateGenericTableWithoutSplayingAvl (8 samples, 0.03%)</title><rect x="84.5488%" y="181" width="0.0346%" height="15" fill="rgb(233,141,41)" fg:x="19524" fg:w="8"/><text x="84.7988%" y="191.50"></text></g><g><title>ntdll`RtlEnumerateGenericTableWithoutSplayingAvl (8 samples, 0.03%)</title><rect x="84.5488%" y="165" width="0.0346%" height="15" fill="rgb(239,167,4)" fg:x="19524" fg:w="8"/><text x="84.7988%" y="175.50"></text></g><g><title>ntdll`RtlAllocateHeap (2,076 samples, 8.99%)</title><rect x="77.1782%" y="213" width="8.9901%" height="15" fill="rgb(209,217,16)" fg:x="17822" fg:w="2076"/><text x="77.4282%" y="223.50">ntdll`RtlAllo..</text></g><g><title>ntdll`RtlAllocateHeap (1,704 samples, 7.38%)</title><rect x="78.7892%" y="197" width="7.3792%" height="15" fill="rgb(219,88,35)" fg:x="18194" fg:w="1704"/><text x="79.0392%" y="207.50">ntdll`RtlA..</text></g><g><title>ntdll`RtlUnhandledExceptionFilter (362 samples, 1.57%)</title><rect x="84.6007%" y="181" width="1.5676%" height="15" fill="rgb(220,193,23)" fg:x="19536" fg:w="362"/><text x="84.8507%" y="191.50"></text></g><g><title>toy`memcpy (10 samples, 0.04%)</title><rect x="86.1727%" y="213" width="0.0433%" height="15" fill="rgb(230,90,52)" fg:x="19899" fg:w="10"/><text x="86.4227%" y="223.50"></text></g><g><title>toy`alloc::string::impl$6::clone (2,374 samples, 10.28%)</title><rect x="76.1433%" y="229" width="10.2806%" height="15" fill="rgb(252,106,19)" fg:x="17583" fg:w="2374"/><text x="76.3933%" y="239.50">toy`alloc::stri..</text></g><g><title>toy`std::alloc::__default_lib_allocator::__rdl_alloc (48 samples, 0.21%)</title><rect x="86.2160%" y="213" width="0.2079%" height="15" fill="rgb(206,74,20)" fg:x="19909" fg:w="48"/><text x="86.4660%" y="223.50"></text></g><g><title>toy`hashbrown::raw::impl$13::clone&lt;tuple$&lt;alloc::string::String,alloc::vec::Vec (6,613 samples, 28.64%)</title><rect x="58.1587%" y="245" width="28.6376%" height="15" fill="rgb(230,138,44)" fg:x="13430" fg:w="6613"/><text x="58.4087%" y="255.50">toy`hashbrown::raw::impl$13::clone&lt;tuple$&lt;allo..</text></g><g><title>toy`std::alloc::__default_lib_allocator::__rdl_alloc (86 samples, 0.37%)</title><rect x="86.4239%" y="229" width="0.3724%" height="15" fill="rgb(235,182,43)" fg:x="19957" fg:w="86"/><text x="86.6739%" y="239.50"></text></g><g><title>KERNEL32`HeapFree (3 samples, 0.01%)</title><rect x="88.3639%" y="229" width="0.0130%" height="15" fill="rgb(242,16,51)" fg:x="20405" fg:w="3"/><text x="88.6139%" y="239.50"></text></g><g><title>ntdll`RtlCopyMemory (1,578 samples, 6.83%)</title><rect x="89.2777%" y="213" width="6.8335%" height="15" fill="rgb(248,9,4)" fg:x="20616" fg:w="1578"/><text x="89.5277%" y="223.50">ntdll`Rtl..</text></g><g><title>ntdll`RtlFreeHeap (2,320 samples, 10.05%)</title><rect x="88.3769%" y="229" width="10.0468%" height="15" fill="rgb(210,31,22)" fg:x="20408" fg:w="2320"/><text x="88.6269%" y="239.50">ntdll`RtlFreeHe..</text></g><g><title>ntdll`RtlGetCurrentServiceSessionId (534 samples, 2.31%)</title><rect x="96.1112%" y="213" width="2.3125%" height="15" fill="rgb(239,54,39)" fg:x="22194" fg:w="534"/><text x="96.3612%" y="223.50">n..</text></g><g><title>ntdll`RtlFreeHeap (52 samples, 0.23%)</title><rect x="98.1985%" y="197" width="0.2252%" height="15" fill="rgb(230,99,41)" fg:x="22676" fg:w="52"/><text x="98.4485%" y="207.50"></text></g><g><title>toy`hashbrown::raw::impl$18::drop&lt;tuple$&lt;alloc::string::String,alloc::vec::Vec (2,731 samples, 11.83%)</title><rect x="86.7963%" y="245" width="11.8266%" height="15" fill="rgb(253,106,12)" fg:x="20043" fg:w="2731"/><text x="87.0463%" y="255.50">toy`hashbrown::raw..</text></g><g><title>toy`std::alloc::__default_lib_allocator::__rdl_dealloc (46 samples, 0.20%)</title><rect x="98.4237%" y="229" width="0.1992%" height="15" fill="rgb(213,46,41)" fg:x="22728" fg:w="46"/><text x="98.6737%" y="239.50"></text></g><g><title>toy`memcpy (4 samples, 0.02%)</title><rect x="98.6229%" y="245" width="0.0173%" height="15" fill="rgb(215,133,35)" fg:x="22774" fg:w="4"/><text x="98.8729%" y="255.50"></text></g><g><title>ntdll`RtlFreeHeap (7 samples, 0.03%)</title><rect x="98.9780%" y="229" width="0.0303%" height="15" fill="rgb(213,28,5)" fg:x="22856" fg:w="7"/><text x="99.2280%" y="239.50"></text></g><g><title>ntdll`RtlGetCurrentServiceSessionId (5 samples, 0.02%)</title><rect x="98.9867%" y="213" width="0.0217%" height="15" fill="rgb(215,77,49)" fg:x="22858" fg:w="5"/><text x="99.2367%" y="223.50"></text></g><g><title>ntdll`RtlDeleteBoundaryDescriptor (4 samples, 0.02%)</title><rect x="98.9910%" y="197" width="0.0173%" height="15" fill="rgb(248,100,22)" fg:x="22859" fg:w="4"/><text x="99.2410%" y="207.50"></text></g><g><title>toy`alloc::collections::binary_heap::BinaryHeap&lt;petgraph::scored::MinScored&lt;i32,petgraph::graph_impl::NodeIndex&lt;u32&gt; &gt;,alloc::alloc::Global&gt;::pop&lt;petgraph::scored::MinScored&lt;i32,petgraph::graph_impl::NodeIndex (7 samples, 0.03%)</title><rect x="99.0083%" y="229" width="0.0303%" height="15" fill="rgb(208,67,9)" fg:x="22863" fg:w="7"/><text x="99.2583%" y="239.50"></text></g><g><title>ntdll`RtlAllocateHeap (5 samples, 0.02%)</title><rect x="99.0430%" y="149" width="0.0217%" height="15" fill="rgb(219,133,21)" fg:x="22871" fg:w="5"/><text x="99.2930%" y="159.50"></text></g><g><title>ntdll`RtlAllocateHeap (4 samples, 0.02%)</title><rect x="99.0473%" y="133" width="0.0173%" height="15" fill="rgb(246,46,29)" fg:x="22872" fg:w="4"/><text x="99.2973%" y="143.50"></text></g><g><title>toy`alloc::raw_vec::RawVec&lt;petgraph::graph_impl::NodeIndex&lt;u32&gt;,alloc::alloc::Global&gt;::reserve_for_push&lt;petgraph::graph_impl::NodeIndex (7 samples, 0.03%)</title><rect x="99.0386%" y="229" width="0.0303%" height="15" fill="rgb(246,185,52)" fg:x="22870" fg:w="7"/><text x="99.2886%" y="239.50"></text></g><g><title>toy`alloc::raw_vec::finish_grow (6 samples, 0.03%)</title><rect x="99.0430%" y="213" width="0.0260%" height="15" fill="rgb(252,136,11)" fg:x="22871" fg:w="6"/><text x="99.2930%" y="223.50"></text></g><g><title>ntdll`RtlReAllocateHeap (6 samples, 0.03%)</title><rect x="99.0430%" y="197" width="0.0260%" height="15" fill="rgb(219,138,53)" fg:x="22871" fg:w="6"/><text x="99.2930%" y="207.50"></text></g><g><title>ntdll`RtlReAllocateHeap (6 samples, 0.03%)</title><rect x="99.0430%" y="181" width="0.0260%" height="15" fill="rgb(211,51,23)" fg:x="22871" fg:w="6"/><text x="99.2930%" y="191.50"></text></g><g><title>ntdll`RtlReAllocateHeap (6 samples, 0.03%)</title><rect x="99.0430%" y="165" width="0.0260%" height="15" fill="rgb(247,221,28)" fg:x="22871" fg:w="6"/><text x="99.2930%" y="175.50"></text></g><g><title>ntdll`RtlAllocateHeap (13 samples, 0.06%)</title><rect x="99.0819%" y="149" width="0.0563%" height="15" fill="rgb(251,222,45)" fg:x="22880" fg:w="13"/><text x="99.3319%" y="159.50"></text></g><g><title>ntdll`RtlAllocateHeap (10 samples, 0.04%)</title><rect x="99.0949%" y="133" width="0.0433%" height="15" fill="rgb(217,162,53)" fg:x="22883" fg:w="10"/><text x="99.3449%" y="143.50"></text></g><g><title>ntdll`RtlUnhandledExceptionFilter (4 samples, 0.02%)</title><rect x="99.1209%" y="117" width="0.0173%" height="15" fill="rgb(229,93,14)" fg:x="22889" fg:w="4"/><text x="99.3709%" y="127.50"></text></g><g><title>toy`alloc::raw_vec::RawVec&lt;petgraph::scored::MinScored&lt;i32,petgraph::graph_impl::NodeIndex&lt;u32&gt; &gt;,alloc::alloc::Global&gt;::reserve_for_push&lt;petgraph::scored::MinScored&lt;i32,petgraph::graph_impl::NodeIndex (17 samples, 0.07%)</title><rect x="99.0689%" y="229" width="0.0736%" height="15" fill="rgb(209,67,49)" fg:x="22877" fg:w="17"/><text x="99.3189%" y="239.50"></text></g><g><title>toy`alloc::raw_vec::finish_grow (17 samples, 0.07%)</title><rect x="99.0689%" y="213" width="0.0736%" height="15" fill="rgb(213,87,29)" fg:x="22877" fg:w="17"/><text x="99.3189%" y="223.50"></text></g><g><title>ntdll`RtlReAllocateHeap (15 samples, 0.06%)</title><rect x="99.0776%" y="197" width="0.0650%" height="15" fill="rgb(205,151,52)" fg:x="22879" fg:w="15"/><text x="99.3276%" y="207.50"></text></g><g><title>ntdll`RtlReAllocateHeap (15 samples, 0.06%)</title><rect x="99.0776%" y="181" width="0.0650%" height="15" fill="rgb(253,215,39)" fg:x="22879" fg:w="15"/><text x="99.3276%" y="191.50"></text></g><g><title>ntdll`RtlReAllocateHeap (14 samples, 0.06%)</title><rect x="99.0819%" y="165" width="0.0606%" height="15" fill="rgb(221,220,41)" fg:x="22880" fg:w="14"/><text x="99.3319%" y="175.50"></text></g><g><title>toy`core::hash::BuildHasher::hash_one&lt;std::hash::random::RandomState,ref$&lt;petgraph::graph_impl::NodeIndex (10 samples, 0.04%)</title><rect x="99.1426%" y="229" width="0.0433%" height="15" fill="rgb(218,133,21)" fg:x="22894" fg:w="10"/><text x="99.3926%" y="239.50"></text></g><g><title>toy`core::hash::sip::impl$5::write (3 samples, 0.01%)</title><rect x="99.1729%" y="213" width="0.0130%" height="15" fill="rgb(221,193,43)" fg:x="22901" fg:w="3"/><text x="99.4229%" y="223.50"></text></g><g><title>toy`core::hash::sip::impl$5::write (4 samples, 0.02%)</title><rect x="99.1859%" y="229" width="0.0173%" height="15" fill="rgb(240,128,52)" fg:x="22904" fg:w="4"/><text x="99.4359%" y="239.50"></text></g><g><title>toy`core::hash::BuildHasher::hash_one&lt;std::hash::random::RandomState,ref$&lt;petgraph::graph_impl::NodeIndex (8 samples, 0.03%)</title><rect x="99.2508%" y="213" width="0.0346%" height="15" fill="rgb(253,114,12)" fg:x="22919" fg:w="8"/><text x="99.5008%" y="223.50"></text></g><g><title>ntdll`RtlAllocateHeap (9 samples, 0.04%)</title><rect x="99.3331%" y="197" width="0.0390%" height="15" fill="rgb(215,223,47)" fg:x="22938" fg:w="9"/><text x="99.5831%" y="207.50"></text></g><g><title>ntdll`RtlAllocateHeap (7 samples, 0.03%)</title><rect x="99.3418%" y="181" width="0.0303%" height="15" fill="rgb(248,225,23)" fg:x="22940" fg:w="7"/><text x="99.5918%" y="191.50"></text></g><g><title>toy`hashbrown::map::HashMap&lt;petgraph::graph_impl::NodeIndex&lt;u32&gt;,petgraph::graph_impl::NodeIndex&lt;u32&gt;,std::hash::random::RandomState,alloc::alloc::Global&gt;::insert&lt;petgraph::graph_impl::NodeIndex&lt;u32&gt;,petgraph::graph_impl::NodeIndex (51 samples, 0.22%)</title><rect x="99.2032%" y="229" width="0.2209%" height="15" fill="rgb(250,108,0)" fg:x="22908" fg:w="51"/><text x="99.4532%" y="239.50"></text></g><g><title>toy`hashbrown::raw::RawTable&lt;tuple$&lt;petgraph::graph_impl::NodeIndex&lt;u32&gt;,petgraph::graph_impl::NodeIndex&lt;u32&gt; &gt;,alloc::alloc::Global&gt;::reserve_rehash&lt;tuple$&lt;petgraph::graph_impl::NodeIndex&lt;u32&gt;,petgraph::graph_impl::NodeIndex&lt;u32&gt; &gt;,alloc::alloc::Global,hashbrown::map::make_hasher::closure_env$0&lt;petgraph::graph_impl::NodeIndex&lt;u32&gt;,petgraph::graph_impl::NodeIndex (32 samples, 0.14%)</title><rect x="99.2855%" y="213" width="0.1386%" height="15" fill="rgb(228,208,7)" fg:x="22927" fg:w="32"/><text x="99.5355%" y="223.50"></text></g><g><title>toy`core::hash::BuildHasher::hash_one&lt;std::hash::random::RandomState,ref$&lt;petgraph::graph_impl::NodeIndex (11 samples, 0.05%)</title><rect x="99.3764%" y="197" width="0.0476%" height="15" fill="rgb(244,45,10)" fg:x="22948" fg:w="11"/><text x="99.6264%" y="207.50"></text></g><g><title>toy`core::hash::sip::impl$5::write (5 samples, 0.02%)</title><rect x="99.4024%" y="181" width="0.0217%" height="15" fill="rgb(207,125,25)" fg:x="22954" fg:w="5"/><text x="99.6524%" y="191.50"></text></g><g><title>ntdll`RtlAllocateHeap (24 samples, 0.10%)</title><rect x="99.5107%" y="213" width="0.1039%" height="15" fill="rgb(210,195,18)" fg:x="22979" fg:w="24"/><text x="99.7607%" y="223.50"></text></g><g><title>ntdll`RtlAllocateHeap (22 samples, 0.10%)</title><rect x="99.5193%" y="197" width="0.0953%" height="15" fill="rgb(249,80,12)" fg:x="22981" fg:w="22"/><text x="99.7693%" y="207.50"></text></g><g><title>ntdll`RtlUnhandledExceptionFilter (3 samples, 0.01%)</title><rect x="99.6016%" y="181" width="0.0130%" height="15" fill="rgb(221,65,9)" fg:x="23000" fg:w="3"/><text x="99.8516%" y="191.50"></text></g><g><title>toy`hashbrown::raw::RawTable&lt;tuple$&lt;petgraph::graph_impl::NodeIndex&lt;u32&gt;,petgraph::graph_impl::NodeIndex&lt;u32&gt; &gt;,alloc::alloc::Global&gt;::reserve_rehash&lt;tuple$&lt;petgraph::graph_impl::NodeIndex&lt;u32&gt;,petgraph::graph_impl::NodeIndex&lt;u32&gt; &gt;,alloc::alloc::Global,hashbrown::map::make_hasher::closure_env$0&lt;petgraph::graph_impl::NodeIndex&lt;u32&gt;,petgraph::graph_impl::NodeIndex (58 samples, 0.25%)</title><rect x="99.4240%" y="229" width="0.2512%" height="15" fill="rgb(235,49,36)" fg:x="22959" fg:w="58"/><text x="99.6740%" y="239.50"></text></g><g><title>toy`core::hash::BuildHasher::hash_one&lt;std::hash::random::RandomState,ref$&lt;petgraph::graph_impl::NodeIndex (12 samples, 0.05%)</title><rect x="99.6232%" y="213" width="0.0520%" height="15" fill="rgb(225,32,20)" fg:x="23005" fg:w="12"/><text x="99.8732%" y="223.50"></text></g><g><title>toy`core::hash::sip::impl$5::write (3 samples, 0.01%)</title><rect x="99.6622%" y="197" width="0.0130%" height="15" fill="rgb(215,141,46)" fg:x="23014" fg:w="3"/><text x="99.9122%" y="207.50"></text></g><g><title>toy`petgraph::algo::astar::astar&lt;ref$&lt;petgraph::graph_impl::Graph&lt;enum2$&lt;aeg::aeg::Node&gt;,aeg::aeg::AegEdge,enum2$ (240 samples, 1.04%)</title><rect x="98.6402%" y="245" width="1.0393%" height="15" fill="rgb(250,160,47)" fg:x="22778" fg:w="240"/><text x="98.8902%" y="255.50"></text></g><g><title>toy`std::alloc::__default_lib_allocator::__rdl_alloc (19 samples, 0.08%)</title><rect x="99.6795%" y="245" width="0.0823%" height="15" fill="rgb(216,222,40)" fg:x="23018" fg:w="19"/><text x="99.9295%" y="255.50"></text></g><g><title>toy`std::alloc::__default_lib_allocator::__rdl_dealloc (16 samples, 0.07%)</title><rect x="99.7618%" y="245" width="0.0693%" height="15" fill="rgb(234,217,39)" fg:x="23037" fg:w="16"/><text x="100.0118%" y="255.50"></text></g><g><title>toy`aeg::aeg::AbstractEventGraph::find_critical_cycles (23,005 samples, 99.62%)</title><rect x="0.2165%" y="277" width="99.6232%" height="15" fill="rgb(207,178,40)" fg:x="50" fg:w="23005"/><text x="0.4665%" y="287.50">toy`aeg::aeg::AbstractEventGraph::find_critical_cycles</text></g><g><title>toy`aeg::critical_cycles::critical_cycles (23,005 samples, 99.62%)</title><rect x="0.2165%" y="261" width="99.6232%" height="15" fill="rgb(221,136,13)" fg:x="50" fg:w="23005"/><text x="0.4665%" y="271.50">toy`aeg::critical_cycles::critical_cycles</text></g><g><title>toy`serde::ser::Serializer::collect_seq&lt;ref_mut$&lt;serde_json::ser::Serializer&lt;ref_mut$&lt;alloc::vec::Vec&lt;u8,alloc::alloc::Global&gt; &gt;,serde_json::ser::CompactFormatter&gt; &gt;,ref$&lt;alloc::vec::Vec (10 samples, 0.04%)</title><rect x="99.8658%" y="277" width="0.0433%" height="15" fill="rgb(249,199,10)" fg:x="23061" fg:w="10"/><text x="100.1158%" y="287.50"></text></g><g><title>toy`aeg::critical_cycles::_::impl$0::serialize&lt;ref_mut$&lt;serde_json::ser::Serializer&lt;ref_mut$&lt;alloc::vec::Vec (10 samples, 0.04%)</title><rect x="99.8658%" y="261" width="0.0433%" height="15" fill="rgb(249,222,13)" fg:x="23061" fg:w="10"/><text x="100.1158%" y="271.50"></text></g><g><title>toy`serde::ser::SerializeMap::serialize_entry&lt;enum2$&lt;serde_json::ser::Compound&lt;ref_mut$&lt;alloc::vec::Vec&lt;u8,alloc::alloc::Global&gt; &gt;,serde_json::ser::CompactFormatter&gt; &gt;,str$,alloc::vec::Vec&lt;petgraph::graph_impl::NodeIndex (10 samples, 0.04%)</title><rect x="99.8658%" y="245" width="0.0433%" height="15" fill="rgb(244,185,38)" fg:x="23061" fg:w="10"/><text x="100.1158%" y="255.50"></text></g><g><title>toy`petgraph::graph_impl::serialization::impl$2::serialize&lt;u32,ref_mut$&lt;serde_json::ser::Serializer&lt;ref_mut$&lt;alloc::vec::Vec (8 samples, 0.03%)</title><rect x="99.8744%" y="229" width="0.0346%" height="15" fill="rgb(236,202,9)" fg:x="23063" fg:w="8"/><text x="100.1244%" y="239.50"></text></g><g><title>KERNELBASE`GetConsoleMode (6 samples, 0.03%)</title><rect x="99.9221%" y="149" width="0.0260%" height="15" fill="rgb(250,229,37)" fg:x="23074" fg:w="6"/><text x="100.1721%" y="159.50"></text></g><g><title>KERNELBASE`GetConsoleScreenBufferInfoEx (6 samples, 0.03%)</title><rect x="99.9221%" y="133" width="0.0260%" height="15" fill="rgb(206,174,23)" fg:x="23074" fg:w="6"/><text x="100.1721%" y="143.50"></text></g><g><title>KERNELBASE`GetConsoleScreenBufferInfoEx (6 samples, 0.03%)</title><rect x="99.9221%" y="117" width="0.0260%" height="15" fill="rgb(211,33,43)" fg:x="23074" fg:w="6"/><text x="100.1721%" y="127.50"></text></g><g><title>ntdll`NtDeviceIoControlFile (6 samples, 0.03%)</title><rect x="99.9221%" y="101" width="0.0260%" height="15" fill="rgb(245,58,50)" fg:x="23074" fg:w="6"/><text x="100.1721%" y="111.50"></text></g><g><title>toy`std::io::Write::write_all (12 samples, 0.05%)</title><rect x="99.9221%" y="181" width="0.0520%" height="15" fill="rgb(244,68,36)" fg:x="23074" fg:w="12"/><text x="100.1721%" y="191.50"></text></g><g><title>toy`std::sys::windows::stdio::write (12 samples, 0.05%)</title><rect x="99.9221%" y="165" width="0.0520%" height="15" fill="rgb(232,229,15)" fg:x="23074" fg:w="12"/><text x="100.1721%" y="175.50"></text></g><g><title>toy`std::sys::windows::stdio::write_valid_utf8_to_console (6 samples, 0.03%)</title><rect x="99.9480%" y="149" width="0.0260%" height="15" fill="rgb(254,30,23)" fg:x="23080" fg:w="6"/><text x="100.1980%" y="159.50"></text></g><g><title>KERNELBASE`WriteConsoleW (6 samples, 0.03%)</title><rect x="99.9480%" y="133" width="0.0260%" height="15" fill="rgb(235,160,14)" fg:x="23080" fg:w="6"/><text x="100.1980%" y="143.50"></text></g><g><title>KERNELBASE`WriteConsoleW (6 samples, 0.03%)</title><rect x="99.9480%" y="117" width="0.0260%" height="15" fill="rgb(212,155,44)" fg:x="23080" fg:w="6"/><text x="100.1980%" y="127.50"></text></g><g><title>KERNELBASE`GetConsoleScreenBufferInfoEx (6 samples, 0.03%)</title><rect x="99.9480%" y="101" width="0.0260%" height="15" fill="rgb(226,2,50)" fg:x="23080" fg:w="6"/><text x="100.1980%" y="111.50"></text></g><g><title>ntdll`NtDeviceIoControlFile (6 samples, 0.03%)</title><rect x="99.9480%" y="85" width="0.0260%" height="15" fill="rgb(234,177,6)" fg:x="23080" fg:w="6"/><text x="100.1980%" y="95.50"></text></g><g><title>toy`std::io::stdio::_print (15 samples, 0.06%)</title><rect x="99.9134%" y="277" width="0.0650%" height="15" fill="rgb(217,24,9)" fg:x="23072" fg:w="15"/><text x="100.1634%" y="287.50"></text></g><g><title>toy`std::io::stdio::impl$12::write_fmt (15 samples, 0.06%)</title><rect x="99.9134%" y="261" width="0.0650%" height="15" fill="rgb(220,13,46)" fg:x="23072" fg:w="15"/><text x="100.1634%" y="271.50"></text></g><g><title>toy`core::fmt::write (15 samples, 0.06%)</title><rect x="99.9134%" y="245" width="0.0650%" height="15" fill="rgb(239,221,27)" fg:x="23072" fg:w="15"/><text x="100.1634%" y="255.50"></text></g><g><title>toy`std::io::Write::write_fmt::impl$0::write_str (15 samples, 0.06%)</title><rect x="99.9134%" y="229" width="0.0650%" height="15" fill="rgb(222,198,25)" fg:x="23072" fg:w="15"/><text x="100.1634%" y="239.50"></text></g><g><title>toy`std::io::stdio::impl$13::write_all (15 samples, 0.06%)</title><rect x="99.9134%" y="213" width="0.0650%" height="15" fill="rgb(211,99,13)" fg:x="23072" fg:w="15"/><text x="100.1634%" y="223.50"></text></g><g><title>toy`std::io::buffered::bufwriter::BufWriter::write_all_cold (13 samples, 0.06%)</title><rect x="99.9221%" y="197" width="0.0563%" height="15" fill="rgb(232,111,31)" fg:x="23074" fg:w="13"/><text x="100.1721%" y="207.50"></text></g><g><title>toy`main (23,048 samples, 99.81%)</title><rect x="0.1732%" y="357" width="99.8095%" height="15" fill="rgb(245,82,37)" fg:x="40" fg:w="23048"/><text x="0.4232%" y="367.50">toy`main</text></g><g><title>toy`std::rt::lang_start_internal (23,048 samples, 99.81%)</title><rect x="0.1732%" y="341" width="99.8095%" height="15" fill="rgb(227,149,46)" fg:x="40" fg:w="23048"/><text x="0.4232%" y="351.50">toy`std::rt::lang_start_internal</text></g><g><title>toy`core::ops::function::FnOnce::call_once&lt;std::rt::lang_start::closure_env$0&lt;tuple$&lt;&gt; &gt;,tuple$ (23,047 samples, 99.81%)</title><rect x="0.1776%" y="325" width="99.8051%" height="15" fill="rgb(218,36,50)" fg:x="41" fg:w="23047"/><text x="0.4276%" y="335.50">toy`core::ops::function::FnOnce::call_once&lt;std::rt::lang_start::closure_env$0&lt;tuple$&lt;&gt; &gt;,tuple$</text></g><g><title>toy`std::sys_common::backtrace::__rust_begin_short_backtrace&lt;void (*)(),tuple$ (23,047 samples, 99.81%)</title><rect x="0.1776%" y="309" width="99.8051%" height="15" fill="rgb(226,80,48)" fg:x="41" fg:w="23047"/><text x="0.4276%" y="319.50">toy`std::sys_common::backtrace::__rust_begin_short_backtrace&lt;void (*)(),tuple$</text></g><g><title>toy`toy::main (23,047 samples, 99.81%)</title><rect x="0.1776%" y="293" width="99.8051%" height="15" fill="rgb(238,224,15)" fg:x="41" fg:w="23047"/><text x="0.4276%" y="303.50">toy`toy::main</text></g><g><title>all (23,092 samples, 100%)</title><rect x="0.0000%" y="421" width="100.0000%" height="15" fill="rgb(241,136,10)" fg:x="0" fg:w="23092"/><text x="0.2500%" y="431.50"></text></g><g><title>ntdll`RtlUserThreadStart (23,065 samples, 99.88%)</title><rect x="0.1169%" y="405" width="99.8831%" height="15" fill="rgb(208,32,45)" fg:x="27" fg:w="23065"/><text x="0.3669%" y="415.50">ntdll`RtlUserThreadStart</text></g><g><title>KERNEL32`BaseThreadInitThunk (23,064 samples, 99.88%)</title><rect x="0.1213%" y="389" width="99.8787%" height="15" fill="rgb(207,135,9)" fg:x="28" fg:w="23064"/><text x="0.3713%" y="399.50">KERNEL32`BaseThreadInitThunk</text></g><g><title>toy`__scrt_common_main_seh (23,052 samples, 99.83%)</title><rect x="0.1732%" y="373" width="99.8268%" height="15" fill="rgb(206,86,44)" fg:x="40" fg:w="23052"/><text x="0.4232%" y="383.50">toy`__scrt_common_main_seh</text></g><g><title>ucrtbase`exit (4 samples, 0.02%)</title><rect x="99.9827%" y="357" width="0.0173%" height="15" fill="rgb(245,177,15)" fg:x="23088" fg:w="4"/><text x="100.2327%" y="367.50"></text></g><g><title>ucrtbase`exit (4 samples, 0.02%)</title><rect x="99.9827%" y="341" width="0.0173%" height="15" fill="rgb(206,64,50)" fg:x="23088" fg:w="4"/><text x="100.2327%" y="351.50"></text></g><g><title>ucrtbase`mbsicmp_l (3 samples, 0.01%)</title><rect x="99.9870%" y="325" width="0.0130%" height="15" fill="rgb(234,36,40)" fg:x="23089" fg:w="3"/><text x="100.2370%" y="335.50"></text></g><g><title>ucrtbase`o_iswascii (3 samples, 0.01%)</title><rect x="99.9870%" y="309" width="0.0130%" height="15" fill="rgb(213,64,8)" fg:x="23089" fg:w="3"/><text x="100.2370%" y="319.50"></text></g><g><title>KERNELBASE`LoadLibraryExW (3 samples, 0.01%)</title><rect x="99.9870%" y="293" width="0.0130%" height="15" fill="rgb(210,75,36)" fg:x="23089" fg:w="3"/><text x="100.2370%" y="303.50"></text></g><g><title>ntdll`LdrLoadDll (3 samples, 0.01%)</title><rect x="99.9870%" y="277" width="0.0130%" height="15" fill="rgb(229,88,21)" fg:x="23089" fg:w="3"/><text x="100.2370%" y="287.50"></text></g><g><title>ntdll`RtlUnicodeToCustomCPN (3 samples, 0.01%)</title><rect x="99.9870%" y="261" width="0.0130%" height="15" fill="rgb(252,204,47)" fg:x="23089" fg:w="3"/><text x="100.2370%" y="271.50"></text></g><g><title>ntdll`RtlImageRvaToSection (3 samples, 0.01%)</title><rect x="99.9870%" y="245" width="0.0130%" height="15" fill="rgb(208,77,27)" fg:x="23089" fg:w="3"/><text x="100.2370%" y="255.50"></text></g><g><title>ntdll`RtlQueryPerformanceCounter (3 samples, 0.01%)</title><rect x="99.9870%" y="229" width="0.0130%" height="15" fill="rgb(221,76,26)" fg:x="23089" fg:w="3"/><text x="100.2370%" y="239.50"></text></g><g><title>ntdll`RtlQueryPerformanceCounter (3 samples, 0.01%)</title><rect x="99.9870%" y="213" width="0.0130%" height="15" fill="rgb(225,139,18)" fg:x="23089" fg:w="3"/><text x="100.2370%" y="223.50"></text></g><g><title>ntdll`RtlQueryPerformanceCounter (3 samples, 0.01%)</title><rect x="99.9870%" y="197" width="0.0130%" height="15" fill="rgb(230,137,11)" fg:x="23089" fg:w="3"/><text x="100.2370%" y="207.50"></text></g></svg></svg>