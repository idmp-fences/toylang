<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="454" onload="init(evt)" viewBox="0 0 1200 454" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="454" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="437.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="437.00"> </text><svg id="frames" x="10" width="1180" total_samples="51570"><g><title>ntdll`LdrLoadDll (9 samples, 0.02%)</title><rect x="0.0058%" y="325" width="0.0175%" height="15" fill="rgb(227,0,7)" fg:x="3" fg:w="9"/><text x="0.2558%" y="335.50"></text></g><g><title>ntdll`RtlUnicodeToCustomCPN (9 samples, 0.02%)</title><rect x="0.0058%" y="309" width="0.0175%" height="15" fill="rgb(217,0,24)" fg:x="3" fg:w="9"/><text x="0.2558%" y="319.50"></text></g><g><title>ntdll`RtlImageRvaToSection (9 samples, 0.02%)</title><rect x="0.0058%" y="293" width="0.0175%" height="15" fill="rgb(221,193,54)" fg:x="3" fg:w="9"/><text x="0.2558%" y="303.50"></text></g><g><title>ntdll`LdrInitializeThunk (24 samples, 0.05%)</title><rect x="0.0000%" y="373" width="0.0465%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="24"/><text x="0.2500%" y="383.50"></text></g><g><title>ntdll`EtwLogTraceEvent (24 samples, 0.05%)</title><rect x="0.0000%" y="357" width="0.0465%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="24"/><text x="0.2500%" y="367.50"></text></g><g><title>ntdll`LdrInitShimEngineDynamic (24 samples, 0.05%)</title><rect x="0.0000%" y="341" width="0.0465%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="24"/><text x="0.2500%" y="351.50"></text></g><g><title>ntdll`LdrInitializeThunk (25 samples, 0.05%)</title><rect x="0.0000%" y="389" width="0.0485%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="25"/><text x="0.2500%" y="399.50"></text></g><g><title>ntdll`RtlClearThreadWorkOnBehalfTicket (8 samples, 0.02%)</title><rect x="0.0504%" y="357" width="0.0155%" height="15" fill="rgb(228,23,34)" fg:x="26" fg:w="8"/><text x="0.3004%" y="367.50"></text></g><g><title>ntdll`RtlHashUnicodeString (7 samples, 0.01%)</title><rect x="0.0524%" y="341" width="0.0136%" height="15" fill="rgb(218,30,26)" fg:x="27" fg:w="7"/><text x="0.3024%" y="351.50"></text></g><g><title>ntdll`RtlQueryPerformanceCounter (7 samples, 0.01%)</title><rect x="0.0524%" y="325" width="0.0136%" height="15" fill="rgb(220,122,19)" fg:x="27" fg:w="7"/><text x="0.3024%" y="335.50"></text></g><g><title>ntdll`RtlQueryPerformanceCounter (7 samples, 0.01%)</title><rect x="0.0524%" y="309" width="0.0136%" height="15" fill="rgb(250,228,42)" fg:x="27" fg:w="7"/><text x="0.3024%" y="319.50"></text></g><g><title>ntdll`RtlCopyMemory (84 samples, 0.16%)</title><rect x="0.0911%" y="245" width="0.1629%" height="15" fill="rgb(240,193,28)" fg:x="47" fg:w="84"/><text x="0.3411%" y="255.50"></text></g><g><title>ntdll`RtlTryAcquirePebLock (37 samples, 0.07%)</title><rect x="0.1823%" y="229" width="0.0717%" height="15" fill="rgb(216,20,37)" fg:x="94" fg:w="37"/><text x="0.4323%" y="239.50"></text></g><g><title>ntdll`RtlTryAcquirePebLock (37 samples, 0.07%)</title><rect x="0.1823%" y="213" width="0.0717%" height="15" fill="rgb(206,188,39)" fg:x="94" fg:w="37"/><text x="0.4323%" y="223.50"></text></g><g><title>ntdll`RtlFreeHeap (35 samples, 0.07%)</title><rect x="0.1862%" y="197" width="0.0679%" height="15" fill="rgb(217,207,13)" fg:x="96" fg:w="35"/><text x="0.4362%" y="207.50"></text></g><g><title>ntdll`RtlGetCurrentServiceSessionId (35 samples, 0.07%)</title><rect x="0.1862%" y="181" width="0.0679%" height="15" fill="rgb(231,73,38)" fg:x="96" fg:w="35"/><text x="0.4362%" y="191.50"></text></g><g><title>ntdll`RtlDeleteBoundaryDescriptor (35 samples, 0.07%)</title><rect x="0.1862%" y="165" width="0.0679%" height="15" fill="rgb(225,20,46)" fg:x="96" fg:w="35"/><text x="0.4362%" y="175.50"></text></g><g><title>ntdll`RtlTryEnterCriticalSection (35 samples, 0.07%)</title><rect x="0.1862%" y="149" width="0.0679%" height="15" fill="rgb(210,31,41)" fg:x="96" fg:w="35"/><text x="0.4362%" y="159.50"></text></g><g><title>ntdll`RtlTryEnterCriticalSection (32 samples, 0.06%)</title><rect x="0.1920%" y="133" width="0.0621%" height="15" fill="rgb(221,200,47)" fg:x="99" fg:w="32"/><text x="0.4420%" y="143.50"></text></g><g><title>ntdll`RtlTryEnterCriticalSection (25 samples, 0.05%)</title><rect x="0.2055%" y="117" width="0.0485%" height="15" fill="rgb(226,26,5)" fg:x="106" fg:w="25"/><text x="0.4555%" y="127.50"></text></g><g><title>ntdll`RtlTryEnterCriticalSection (24 samples, 0.05%)</title><rect x="0.2075%" y="101" width="0.0465%" height="15" fill="rgb(249,33,26)" fg:x="107" fg:w="24"/><text x="0.4575%" y="111.50"></text></g><g><title>ntdll`NtFreeVirtualMemory (20 samples, 0.04%)</title><rect x="0.2152%" y="85" width="0.0388%" height="15" fill="rgb(235,183,28)" fg:x="111" fg:w="20"/><text x="0.4652%" y="95.50"></text></g><g><title>ntdll`RtlFreeHeap (291 samples, 0.56%)</title><rect x="0.0795%" y="261" width="0.5643%" height="15" fill="rgb(221,5,38)" fg:x="41" fg:w="291"/><text x="0.3295%" y="271.50"></text></g><g><title>ntdll`RtlGetCurrentServiceSessionId (201 samples, 0.39%)</title><rect x="0.2540%" y="245" width="0.3898%" height="15" fill="rgb(247,18,42)" fg:x="131" fg:w="201"/><text x="0.5040%" y="255.50"></text></g><g><title>VCRUNTIME140`memcmp (13 samples, 0.03%)</title><rect x="20.3413%" y="229" width="0.0252%" height="15" fill="rgb(241,131,45)" fg:x="10490" fg:w="13"/><text x="20.5913%" y="239.50"></text></g><g><title>VCRUNTIME140`memmove (83 samples, 0.16%)</title><rect x="20.3665%" y="229" width="0.1609%" height="15" fill="rgb(249,31,29)" fg:x="10503" fg:w="83"/><text x="20.6165%" y="239.50"></text></g><g><title>ntdll`RtlAllocateHeap (163 samples, 0.32%)</title><rect x="22.5635%" y="197" width="0.3161%" height="15" fill="rgb(225,111,53)" fg:x="11636" fg:w="163"/><text x="22.8135%" y="207.50"></text></g><g><title>ntdll`RtlEnumerateGenericTableWithoutSplayingAvl (6 samples, 0.01%)</title><rect x="22.8796%" y="197" width="0.0116%" height="15" fill="rgb(238,160,17)" fg:x="11799" fg:w="6"/><text x="23.1296%" y="207.50"></text></g><g><title>ntdll`RtlEnumerateGenericTableWithoutSplayingAvl (6 samples, 0.01%)</title><rect x="22.8796%" y="181" width="0.0116%" height="15" fill="rgb(214,148,48)" fg:x="11799" fg:w="6"/><text x="23.1296%" y="191.50"></text></g><g><title>ntdll`RtlAllocateHeap (1,412 samples, 2.74%)</title><rect x="20.5294%" y="229" width="2.7380%" height="15" fill="rgb(232,36,49)" fg:x="10587" fg:w="1412"/><text x="20.7794%" y="239.50">nt..</text></g><g><title>ntdll`RtlAllocateHeap (1,201 samples, 2.33%)</title><rect x="20.9385%" y="213" width="2.3289%" height="15" fill="rgb(209,103,24)" fg:x="10798" fg:w="1201"/><text x="21.1885%" y="223.50">n..</text></g><g><title>ntdll`RtlUnhandledExceptionFilter (192 samples, 0.37%)</title><rect x="22.8951%" y="197" width="0.3723%" height="15" fill="rgb(229,88,8)" fg:x="11807" fg:w="192"/><text x="23.1451%" y="207.50"></text></g><g><title>ntdll`NtProtectVirtualMemory (9 samples, 0.02%)</title><rect x="26.7229%" y="165" width="0.0175%" height="15" fill="rgb(213,181,19)" fg:x="13781" fg:w="9"/><text x="26.9729%" y="175.50"></text></g><g><title>ntdll`NtFreeVirtualMemory (9 samples, 0.02%)</title><rect x="26.7772%" y="85" width="0.0175%" height="15" fill="rgb(254,191,54)" fg:x="13809" fg:w="9"/><text x="27.0272%" y="95.50"></text></g><g><title>ntdll`RtlCopyMemory (1,945 samples, 3.77%)</title><rect x="23.5505%" y="213" width="3.7716%" height="15" fill="rgb(241,83,37)" fg:x="12145" fg:w="1945"/><text x="23.8005%" y="223.50">ntdl..</text></g><g><title>ntdll`RtlTryAcquirePebLock (311 samples, 0.60%)</title><rect x="26.7190%" y="197" width="0.6031%" height="15" fill="rgb(233,36,39)" fg:x="13779" fg:w="311"/><text x="26.9690%" y="207.50"></text></g><g><title>ntdll`RtlTryAcquirePebLock (309 samples, 0.60%)</title><rect x="26.7229%" y="181" width="0.5992%" height="15" fill="rgb(226,3,54)" fg:x="13781" fg:w="309"/><text x="26.9729%" y="191.50"></text></g><g><title>ntdll`RtlFreeHeap (300 samples, 0.58%)</title><rect x="26.7404%" y="165" width="0.5817%" height="15" fill="rgb(245,192,40)" fg:x="13790" fg:w="300"/><text x="26.9904%" y="175.50"></text></g><g><title>ntdll`RtlGetCurrentServiceSessionId (300 samples, 0.58%)</title><rect x="26.7404%" y="149" width="0.5817%" height="15" fill="rgb(238,167,29)" fg:x="13790" fg:w="300"/><text x="26.9904%" y="159.50"></text></g><g><title>ntdll`RtlDeleteBoundaryDescriptor (300 samples, 0.58%)</title><rect x="26.7404%" y="133" width="0.5817%" height="15" fill="rgb(232,182,51)" fg:x="13790" fg:w="300"/><text x="26.9904%" y="143.50"></text></g><g><title>ntdll`RtlTryEnterCriticalSection (300 samples, 0.58%)</title><rect x="26.7404%" y="117" width="0.5817%" height="15" fill="rgb(231,60,39)" fg:x="13790" fg:w="300"/><text x="26.9904%" y="127.50"></text></g><g><title>ntdll`RtlTryEnterCriticalSection (294 samples, 0.57%)</title><rect x="26.7520%" y="101" width="0.5701%" height="15" fill="rgb(208,69,12)" fg:x="13796" fg:w="294"/><text x="27.0020%" y="111.50"></text></g><g><title>ntdll`RtlTryEnterCriticalSection (272 samples, 0.53%)</title><rect x="26.7946%" y="85" width="0.5274%" height="15" fill="rgb(235,93,37)" fg:x="13818" fg:w="272"/><text x="27.0446%" y="95.50"></text></g><g><title>ntdll`RtlTryEnterCriticalSection (271 samples, 0.53%)</title><rect x="26.7966%" y="69" width="0.5255%" height="15" fill="rgb(213,116,39)" fg:x="13819" fg:w="271"/><text x="27.0466%" y="79.50"></text></g><g><title>ntdll`NtFreeVirtualMemory (253 samples, 0.49%)</title><rect x="26.8315%" y="53" width="0.4906%" height="15" fill="rgb(222,207,29)" fg:x="13837" fg:w="253"/><text x="27.0815%" y="63.50"></text></g><g><title>ntdll`RtlFreeHeap (2,563 samples, 4.97%)</title><rect x="23.2674%" y="229" width="4.9699%" height="15" fill="rgb(206,96,30)" fg:x="11999" fg:w="2563"/><text x="23.5174%" y="239.50">ntdll`..</text></g><g><title>ntdll`RtlGetCurrentServiceSessionId (472 samples, 0.92%)</title><rect x="27.3221%" y="213" width="0.9153%" height="15" fill="rgb(218,138,4)" fg:x="14090" fg:w="472"/><text x="27.5721%" y="223.50"></text></g><g><title>ntdll`RtlFreeHeap (36 samples, 0.07%)</title><rect x="28.1675%" y="197" width="0.0698%" height="15" fill="rgb(250,191,14)" fg:x="14526" fg:w="36"/><text x="28.4175%" y="207.50"></text></g><g><title>toy`_rust_dealloc (8 samples, 0.02%)</title><rect x="28.2470%" y="229" width="0.0155%" height="15" fill="rgb(239,60,40)" fg:x="14567" fg:w="8"/><text x="28.4970%" y="239.50"></text></g><g><title>KERNEL32`HeapFree (6 samples, 0.01%)</title><rect x="31.2585%" y="213" width="0.0116%" height="15" fill="rgb(206,27,48)" fg:x="16120" fg:w="6"/><text x="31.5085%" y="223.50"></text></g><g><title>ntdll`RtlCopyMemory (130 samples, 0.25%)</title><rect x="31.3128%" y="197" width="0.2521%" height="15" fill="rgb(225,35,8)" fg:x="16148" fg:w="130"/><text x="31.5628%" y="207.50"></text></g><g><title>ntdll`RtlFreeHeap (197 samples, 0.38%)</title><rect x="31.2701%" y="213" width="0.3820%" height="15" fill="rgb(250,213,24)" fg:x="16126" fg:w="197"/><text x="31.5201%" y="223.50"></text></g><g><title>ntdll`RtlGetCurrentServiceSessionId (45 samples, 0.09%)</title><rect x="31.5649%" y="197" width="0.0873%" height="15" fill="rgb(247,123,22)" fg:x="16278" fg:w="45"/><text x="31.8149%" y="207.50"></text></g><g><title>ntdll`RtlAllocateHeap (36 samples, 0.07%)</title><rect x="32.0981%" y="101" width="0.0698%" height="15" fill="rgb(231,138,38)" fg:x="16553" fg:w="36"/><text x="32.3481%" y="111.50"></text></g><g><title>ntdll`RtlAllocateHeap (217 samples, 0.42%)</title><rect x="31.8111%" y="133" width="0.4208%" height="15" fill="rgb(231,145,46)" fg:x="16405" fg:w="217"/><text x="32.0611%" y="143.50"></text></g><g><title>ntdll`RtlAllocateHeap (191 samples, 0.37%)</title><rect x="31.8615%" y="117" width="0.3704%" height="15" fill="rgb(251,118,11)" fg:x="16431" fg:w="191"/><text x="32.1115%" y="127.50"></text></g><g><title>ntdll`RtlUnhandledExceptionFilter (28 samples, 0.05%)</title><rect x="32.1776%" y="101" width="0.0543%" height="15" fill="rgb(217,147,25)" fg:x="16594" fg:w="28"/><text x="32.4276%" y="111.50"></text></g><g><title>ntdll`RtlCopyMemory (62 samples, 0.12%)</title><rect x="32.2397%" y="117" width="0.1202%" height="15" fill="rgb(247,81,37)" fg:x="16626" fg:w="62"/><text x="32.4897%" y="127.50"></text></g><g><title>ntdll`RtlReAllocateHeap (335 samples, 0.65%)</title><rect x="31.7627%" y="149" width="0.6496%" height="15" fill="rgb(209,12,38)" fg:x="16380" fg:w="335"/><text x="32.0127%" y="159.50"></text></g><g><title>ntdll`RtlFreeHeap (92 samples, 0.18%)</title><rect x="32.2339%" y="133" width="0.1784%" height="15" fill="rgb(227,1,9)" fg:x="16623" fg:w="92"/><text x="32.4839%" y="143.50"></text></g><g><title>ntdll`RtlGetCurrentServiceSessionId (27 samples, 0.05%)</title><rect x="32.3599%" y="117" width="0.0524%" height="15" fill="rgb(248,47,43)" fg:x="16688" fg:w="27"/><text x="32.6099%" y="127.50"></text></g><g><title>ntdll`RtlReAllocateHeap (365 samples, 0.71%)</title><rect x="31.7103%" y="181" width="0.7078%" height="15" fill="rgb(221,10,30)" fg:x="16353" fg:w="365"/><text x="31.9603%" y="191.50"></text></g><g><title>ntdll`RtlReAllocateHeap (353 samples, 0.68%)</title><rect x="31.7336%" y="165" width="0.6845%" height="15" fill="rgb(210,229,1)" fg:x="16365" fg:w="353"/><text x="31.9836%" y="175.50"></text></g><g><title>toy`alloc::raw_vec::RawVec&lt;petgraph::graph_impl::NodeIndex&lt;u32&gt;,alloc::alloc::Global&gt;::reserve_for_push&lt;petgraph::graph_impl::NodeIndex (396 samples, 0.77%)</title><rect x="31.6541%" y="213" width="0.7679%" height="15" fill="rgb(222,148,37)" fg:x="16324" fg:w="396"/><text x="31.9041%" y="223.50"></text></g><g><title>toy`alloc::raw_vec::finish_grow (372 samples, 0.72%)</title><rect x="31.7006%" y="197" width="0.7213%" height="15" fill="rgb(234,67,33)" fg:x="16348" fg:w="372"/><text x="31.9506%" y="207.50"></text></g><g><title>ntdll`RtlAllocateHeap (28 samples, 0.05%)</title><rect x="32.9862%" y="165" width="0.0543%" height="15" fill="rgb(247,98,35)" fg:x="17011" fg:w="28"/><text x="33.2362%" y="175.50"></text></g><g><title>ntdll`RtlAllocateHeap (178 samples, 0.35%)</title><rect x="32.7497%" y="197" width="0.3452%" height="15" fill="rgb(247,138,52)" fg:x="16889" fg:w="178"/><text x="32.9997%" y="207.50"></text></g><g><title>ntdll`RtlAllocateHeap (143 samples, 0.28%)</title><rect x="32.8175%" y="181" width="0.2773%" height="15" fill="rgb(213,79,30)" fg:x="16924" fg:w="143"/><text x="33.0675%" y="191.50"></text></g><g><title>ntdll`RtlUnhandledExceptionFilter (28 samples, 0.05%)</title><rect x="33.0405%" y="165" width="0.0543%" height="15" fill="rgb(246,177,23)" fg:x="17039" fg:w="28"/><text x="33.2905%" y="175.50"></text></g><g><title>toy`alloc::vec::spec_from_iter::impl$0::from_iter&lt;petgraph::graph_impl::NodeIndex&lt;u32&gt;,core::iter::adapters::filter_map::FilterMap&lt;petgraph::graph_impl::Edges&lt;aeg::aeg::AegEdge,enum2$ (360 samples, 0.70%)</title><rect x="32.4220%" y="213" width="0.6981%" height="15" fill="rgb(230,62,27)" fg:x="16720" fg:w="360"/><text x="32.6720%" y="223.50"></text></g><g><title>toy`std::alloc::__default_lib_allocator::__rdl_alloc (13 samples, 0.03%)</title><rect x="33.0948%" y="197" width="0.0252%" height="15" fill="rgb(216,154,8)" fg:x="17067" fg:w="13"/><text x="33.3448%" y="207.50"></text></g><g><title>ntdll`RtlAllocateHeap (107 samples, 0.21%)</title><rect x="33.3372%" y="165" width="0.2075%" height="15" fill="rgb(244,35,45)" fg:x="17192" fg:w="107"/><text x="33.5872%" y="175.50"></text></g><g><title>ntdll`RtlAllocateHeap (67 samples, 0.13%)</title><rect x="33.4148%" y="149" width="0.1299%" height="15" fill="rgb(251,115,12)" fg:x="17232" fg:w="67"/><text x="33.6648%" y="159.50"></text></g><g><title>ntdll`RtlCopyMemory (10 samples, 0.02%)</title><rect x="33.5447%" y="165" width="0.0194%" height="15" fill="rgb(240,54,50)" fg:x="17299" fg:w="10"/><text x="33.7947%" y="175.50"></text></g><g><title>ntdll`RtlUnhandledExceptionFilter (25 samples, 0.05%)</title><rect x="33.5680%" y="165" width="0.0485%" height="15" fill="rgb(233,84,52)" fg:x="17311" fg:w="25"/><text x="33.8180%" y="175.50"></text></g><g><title>ntdll`RtlAllocateHeap (245 samples, 0.48%)</title><rect x="33.1433%" y="197" width="0.4751%" height="15" fill="rgb(207,117,47)" fg:x="17092" fg:w="245"/><text x="33.3933%" y="207.50"></text></g><g><title>ntdll`RtlAllocateHeap (218 samples, 0.42%)</title><rect x="33.1957%" y="181" width="0.4227%" height="15" fill="rgb(249,43,39)" fg:x="17119" fg:w="218"/><text x="33.4457%" y="191.50"></text></g><g><title>toy`fixedbitset::FixedBitSet::with_capacity (260 samples, 0.50%)</title><rect x="33.1200%" y="213" width="0.5042%" height="15" fill="rgb(209,38,44)" fg:x="17080" fg:w="260"/><text x="33.3700%" y="223.50"></text></g><g><title>toy`aeg::aeg::AbstractEventGraph::is_po_connected (2,771 samples, 5.37%)</title><rect x="28.2626%" y="229" width="5.3733%" height="15" fill="rgb(236,212,23)" fg:x="14575" fg:w="2771"/><text x="28.5126%" y="239.50">toy`aeg..</text></g><g><title>toy`std::alloc::__default_lib_allocator::__rdl_dealloc (6 samples, 0.01%)</title><rect x="33.6242%" y="213" width="0.0116%" height="15" fill="rgb(242,79,21)" fg:x="17340" fg:w="6"/><text x="33.8742%" y="223.50"></text></g><g><title>ntdll`RtlAllocateHeap (48 samples, 0.09%)</title><rect x="37.6634%" y="165" width="0.0931%" height="15" fill="rgb(211,96,35)" fg:x="19423" fg:w="48"/><text x="37.9134%" y="175.50"></text></g><g><title>ntdll`RtlAllocateHeap (1,671 samples, 3.24%)</title><rect x="34.5976%" y="197" width="3.2403%" height="15" fill="rgb(253,215,40)" fg:x="17842" fg:w="1671"/><text x="34.8476%" y="207.50">ntd..</text></g><g><title>ntdll`RtlAllocateHeap (1,440 samples, 2.79%)</title><rect x="35.0456%" y="181" width="2.7923%" height="15" fill="rgb(211,81,21)" fg:x="18073" fg:w="1440"/><text x="35.2956%" y="191.50">nt..</text></g><g><title>ntdll`RtlUnhandledExceptionFilter (41 samples, 0.08%)</title><rect x="37.7584%" y="165" width="0.0795%" height="15" fill="rgb(208,190,38)" fg:x="19472" fg:w="41"/><text x="38.0084%" y="175.50"></text></g><g><title>toy`alloc::vec::spec_from_iter::impl$0::from_iter&lt;petgraph::graph_impl::NodeIndex&lt;u32&gt;,core::iter::adapters::filter_map::FilterMap&lt;petgraph::graph_impl::Edges&lt;aeg::aeg::AegEdge,enum2$ (1,968 samples, 3.82%)</title><rect x="34.1497%" y="213" width="3.8162%" height="15" fill="rgb(235,213,38)" fg:x="17611" fg:w="1968"/><text x="34.3997%" y="223.50">toy`..</text></g><g><title>toy`std::alloc::__default_lib_allocator::__rdl_alloc (65 samples, 0.13%)</title><rect x="37.8398%" y="197" width="0.1260%" height="15" fill="rgb(237,122,38)" fg:x="19514" fg:w="65"/><text x="38.0898%" y="207.50"></text></g><g><title>ntdll`RtlAllocateHeap (169 samples, 0.33%)</title><rect x="38.8579%" y="165" width="0.3277%" height="15" fill="rgb(244,218,35)" fg:x="20039" fg:w="169"/><text x="39.1079%" y="175.50"></text></g><g><title>ntdll`RtlAllocateHeap (119 samples, 0.23%)</title><rect x="38.9548%" y="149" width="0.2308%" height="15" fill="rgb(240,68,47)" fg:x="20089" fg:w="119"/><text x="39.2048%" y="159.50"></text></g><g><title>ntdll`RtlCopyMemory (13 samples, 0.03%)</title><rect x="39.1856%" y="165" width="0.0252%" height="15" fill="rgb(210,16,53)" fg:x="20208" fg:w="13"/><text x="39.4356%" y="175.50"></text></g><g><title>ntdll`RtlAllocateHeap (642 samples, 1.24%)</title><rect x="38.0706%" y="197" width="1.2449%" height="15" fill="rgb(235,124,12)" fg:x="19633" fg:w="642"/><text x="38.3206%" y="207.50"></text></g><g><title>ntdll`RtlAllocateHeap (416 samples, 0.81%)</title><rect x="38.5088%" y="181" width="0.8067%" height="15" fill="rgb(224,169,11)" fg:x="19859" fg:w="416"/><text x="38.7588%" y="191.50"></text></g><g><title>ntdll`RtlUnhandledExceptionFilter (53 samples, 0.10%)</title><rect x="39.2127%" y="165" width="0.1028%" height="15" fill="rgb(250,166,2)" fg:x="20222" fg:w="53"/><text x="39.4627%" y="175.50"></text></g><g><title>toy`aeg::aeg::AbstractEventGraph::neighbors (2,937 samples, 5.70%)</title><rect x="33.6358%" y="229" width="5.6952%" height="15" fill="rgb(242,216,29)" fg:x="17346" fg:w="2937"/><text x="33.8858%" y="239.50">toy`aeg..</text></g><g><title>toy`fixedbitset::FixedBitSet::with_capacity (704 samples, 1.37%)</title><rect x="37.9659%" y="213" width="1.3651%" height="15" fill="rgb(230,116,27)" fg:x="19579" fg:w="704"/><text x="38.2159%" y="223.50"></text></g><g><title>toy`std::alloc::__default_lib_allocator::__rdl_alloc_zeroed (7 samples, 0.01%)</title><rect x="39.3174%" y="197" width="0.0136%" height="15" fill="rgb(228,99,48)" fg:x="20276" fg:w="7"/><text x="39.5674%" y="207.50"></text></g><g><title>ntdll`RtlAllocateHeap (63 samples, 0.12%)</title><rect x="48.4468%" y="101" width="0.1222%" height="15" fill="rgb(253,11,6)" fg:x="24984" fg:w="63"/><text x="48.6968%" y="111.50"></text></g><g><title>ntdll`RtlAllocateHeap (579 samples, 1.12%)</title><rect x="47.6149%" y="133" width="1.1227%" height="15" fill="rgb(247,143,39)" fg:x="24555" fg:w="579"/><text x="47.8649%" y="143.50"></text></g><g><title>ntdll`RtlAllocateHeap (508 samples, 0.99%)</title><rect x="47.7526%" y="117" width="0.9851%" height="15" fill="rgb(236,97,10)" fg:x="24626" fg:w="508"/><text x="48.0026%" y="127.50"></text></g><g><title>ntdll`RtlUnhandledExceptionFilter (85 samples, 0.16%)</title><rect x="48.5728%" y="101" width="0.1648%" height="15" fill="rgb(233,208,19)" fg:x="25049" fg:w="85"/><text x="48.8228%" y="111.50"></text></g><g><title>ntdll`RtlCopyMemory (11 samples, 0.02%)</title><rect x="48.7376%" y="133" width="0.0213%" height="15" fill="rgb(216,164,2)" fg:x="25134" fg:w="11"/><text x="48.9876%" y="143.50"></text></g><g><title>ntdll`RtlCopyMemory (177 samples, 0.34%)</title><rect x="48.7745%" y="117" width="0.3432%" height="15" fill="rgb(220,129,5)" fg:x="25153" fg:w="177"/><text x="49.0245%" y="127.50"></text></g><g><title>ntdll`RtlReAllocateHeap (1,057 samples, 2.05%)</title><rect x="47.1708%" y="181" width="2.0496%" height="15" fill="rgb(242,17,10)" fg:x="24326" fg:w="1057"/><text x="47.4208%" y="191.50">n..</text></g><g><title>ntdll`RtlReAllocateHeap (1,029 samples, 2.00%)</title><rect x="47.2251%" y="165" width="1.9953%" height="15" fill="rgb(242,107,0)" fg:x="24354" fg:w="1029"/><text x="47.4751%" y="175.50">n..</text></g><g><title>ntdll`RtlReAllocateHeap (965 samples, 1.87%)</title><rect x="47.3492%" y="149" width="1.8712%" height="15" fill="rgb(251,28,31)" fg:x="24418" fg:w="965"/><text x="47.5992%" y="159.50">n..</text></g><g><title>ntdll`RtlFreeHeap (238 samples, 0.46%)</title><rect x="48.7590%" y="133" width="0.4615%" height="15" fill="rgb(233,223,10)" fg:x="25145" fg:w="238"/><text x="49.0090%" y="143.50"></text></g><g><title>ntdll`RtlGetCurrentServiceSessionId (53 samples, 0.10%)</title><rect x="49.1177%" y="117" width="0.1028%" height="15" fill="rgb(215,21,27)" fg:x="25330" fg:w="53"/><text x="49.3677%" y="127.50"></text></g><g><title>ntdll`RtlFreeHeap (7 samples, 0.01%)</title><rect x="49.2069%" y="101" width="0.0136%" height="15" fill="rgb(232,23,21)" fg:x="25376" fg:w="7"/><text x="49.4569%" y="111.50"></text></g><g><title>toy`alloc::raw_vec::RawVec&lt;petgraph::graph_impl::NodeIndex&lt;u32&gt;,alloc::alloc::Global&gt;::reserve_for_push&lt;petgraph::graph_impl::NodeIndex (1,170 samples, 2.27%)</title><rect x="47.0002%" y="213" width="2.2688%" height="15" fill="rgb(244,5,23)" fg:x="24238" fg:w="1170"/><text x="47.2502%" y="223.50">t..</text></g><g><title>toy`alloc::raw_vec::finish_grow (1,115 samples, 2.16%)</title><rect x="47.1068%" y="197" width="2.1621%" height="15" fill="rgb(226,81,46)" fg:x="24293" fg:w="1115"/><text x="47.3568%" y="207.50">t..</text></g><g><title>toy`std::alloc::__default_lib_allocator::__rdl_realloc (23 samples, 0.04%)</title><rect x="49.2244%" y="181" width="0.0446%" height="15" fill="rgb(247,70,30)" fg:x="25385" fg:w="23"/><text x="49.4744%" y="191.50"></text></g><g><title>ntdll`RtlCopyMemory (11 samples, 0.02%)</title><rect x="49.4997%" y="181" width="0.0213%" height="15" fill="rgb(212,68,19)" fg:x="25527" fg:w="11"/><text x="49.7497%" y="191.50"></text></g><g><title>ntdll`RtlFreeHeap (22 samples, 0.04%)</title><rect x="49.4958%" y="197" width="0.0427%" height="15" fill="rgb(240,187,13)" fg:x="25525" fg:w="22"/><text x="49.7458%" y="207.50"></text></g><g><title>ntdll`RtlGetCurrentServiceSessionId (9 samples, 0.02%)</title><rect x="49.5210%" y="181" width="0.0175%" height="15" fill="rgb(223,113,26)" fg:x="25538" fg:w="9"/><text x="49.7710%" y="191.50"></text></g><g><title>ntdll`RtlAllocateHeap (64 samples, 0.12%)</title><rect x="49.6413%" y="149" width="0.1241%" height="15" fill="rgb(206,192,2)" fg:x="25600" fg:w="64"/><text x="49.8913%" y="159.50"></text></g><g><title>toy`hashbrown::raw::inner::RawTableInner::fallible_with_capacity (135 samples, 0.26%)</title><rect x="49.5385%" y="197" width="0.2618%" height="15" fill="rgb(241,108,4)" fg:x="25547" fg:w="135"/><text x="49.7885%" y="207.50"></text></g><g><title>ntdll`RtlAllocateHeap (129 samples, 0.25%)</title><rect x="49.5501%" y="181" width="0.2501%" height="15" fill="rgb(247,173,49)" fg:x="25553" fg:w="129"/><text x="49.8001%" y="191.50"></text></g><g><title>ntdll`RtlAllocateHeap (123 samples, 0.24%)</title><rect x="49.5618%" y="165" width="0.2385%" height="15" fill="rgb(224,114,35)" fg:x="25559" fg:w="123"/><text x="49.8118%" y="175.50"></text></g><g><title>ntdll`RtlUnhandledExceptionFilter (14 samples, 0.03%)</title><rect x="49.7731%" y="149" width="0.0271%" height="15" fill="rgb(245,159,27)" fg:x="25668" fg:w="14"/><text x="50.0231%" y="159.50"></text></g><g><title>toy`hashbrown::raw::inner::RawTable&lt;tuple$&lt;usize,arrayvec::arrayvec::ArrayVec&lt;usize,2&gt; &gt;,allocator_api2::stable::alloc::global::Global&gt;::reserve_rehash&lt;tuple$&lt;usize,arrayvec::arrayvec::ArrayVec&lt;usize,2&gt; &gt;,allocator_api2::stable::alloc::global::Global,hashbrown::map::make_hasher::closure_env$0&lt;usize,arrayvec::arrayvec::ArrayVec&lt;usize,2&gt;,core::hash::BuildHasherDefault (275 samples, 0.53%)</title><rect x="49.2690%" y="213" width="0.5333%" height="15" fill="rgb(245,172,44)" fg:x="25408" fg:w="275"/><text x="49.5190%" y="223.50"></text></g><g><title>ntdll`RtlCopyMemory (31 samples, 0.06%)</title><rect x="50.5313%" y="181" width="0.0601%" height="15" fill="rgb(236,23,11)" fg:x="26059" fg:w="31"/><text x="50.7813%" y="191.50"></text></g><g><title>ntdll`RtlFreeHeap (66 samples, 0.13%)</title><rect x="50.5158%" y="197" width="0.1280%" height="15" fill="rgb(205,117,38)" fg:x="26051" fg:w="66"/><text x="50.7658%" y="207.50"></text></g><g><title>ntdll`RtlGetCurrentServiceSessionId (27 samples, 0.05%)</title><rect x="50.5914%" y="181" width="0.0524%" height="15" fill="rgb(237,72,25)" fg:x="26090" fg:w="27"/><text x="50.8414%" y="191.50"></text></g><g><title>VCRUNTIME140`memset (7 samples, 0.01%)</title><rect x="50.7097%" y="181" width="0.0136%" height="15" fill="rgb(244,70,9)" fg:x="26151" fg:w="7"/><text x="50.9597%" y="191.50"></text></g><g><title>ntdll`RtlAllocateHeap (516 samples, 1.00%)</title><rect x="50.9734%" y="149" width="1.0006%" height="15" fill="rgb(217,125,39)" fg:x="26287" fg:w="516"/><text x="51.2234%" y="159.50"></text></g><g><title>ntdll`RtlAllocateHeap (32 samples, 0.06%)</title><rect x="51.9837%" y="117" width="0.0621%" height="15" fill="rgb(235,36,10)" fg:x="26808" fg:w="32"/><text x="52.2337%" y="127.50"></text></g><g><title>ntdll`RtlAllocateHeap (32 samples, 0.06%)</title><rect x="51.9837%" y="101" width="0.0621%" height="15" fill="rgb(251,123,47)" fg:x="26808" fg:w="32"/><text x="52.2337%" y="111.50"></text></g><g><title>ntdll`RtlTryEnterCriticalSection (9 samples, 0.02%)</title><rect x="52.0283%" y="85" width="0.0175%" height="15" fill="rgb(221,13,13)" fg:x="26831" fg:w="9"/><text x="52.2783%" y="95.50"></text></g><g><title>ntdll`RtlEnumerateGenericTableWithoutSplayingAvl (39 samples, 0.08%)</title><rect x="51.9740%" y="149" width="0.0756%" height="15" fill="rgb(238,131,9)" fg:x="26803" fg:w="39"/><text x="52.2240%" y="159.50"></text></g><g><title>ntdll`RtlEnumerateGenericTableWithoutSplayingAvl (39 samples, 0.08%)</title><rect x="51.9740%" y="133" width="0.0756%" height="15" fill="rgb(211,50,8)" fg:x="26803" fg:w="39"/><text x="52.2240%" y="143.50"></text></g><g><title>ntdll`RtlAllocateHeap (726 samples, 1.41%)</title><rect x="50.7233%" y="181" width="1.4078%" height="15" fill="rgb(245,182,24)" fg:x="26158" fg:w="726"/><text x="50.9733%" y="191.50"></text></g><g><title>ntdll`RtlAllocateHeap (704 samples, 1.37%)</title><rect x="50.7659%" y="165" width="1.3651%" height="15" fill="rgb(242,14,37)" fg:x="26180" fg:w="704"/><text x="51.0159%" y="175.50"></text></g><g><title>ntdll`RtlUnhandledExceptionFilter (42 samples, 0.08%)</title><rect x="52.0496%" y="149" width="0.0814%" height="15" fill="rgb(246,228,12)" fg:x="26842" fg:w="42"/><text x="52.2996%" y="159.50"></text></g><g><title>toy`hashbrown::raw::inner::RawTableInner::fallible_with_capacity (773 samples, 1.50%)</title><rect x="50.6438%" y="197" width="1.4989%" height="15" fill="rgb(213,55,15)" fg:x="26117" fg:w="773"/><text x="50.8938%" y="207.50"></text></g><g><title>toy`std::alloc::__default_lib_allocator::__rdl_alloc (6 samples, 0.01%)</title><rect x="52.1311%" y="181" width="0.0116%" height="15" fill="rgb(209,9,3)" fg:x="26884" fg:w="6"/><text x="52.3811%" y="191.50"></text></g><g><title>toy`aeg::critical_cycles::IncompleteMinimalCycle (6,608 samples, 12.81%)</title><rect x="39.3310%" y="229" width="12.8137%" height="15" fill="rgb(230,59,30)" fg:x="20283" fg:w="6608"/><text x="39.5810%" y="239.50">toy`aeg::critical_c..</text></g><g><title>toy`hashbrown::raw::inner::RawTable&lt;tuple$&lt;usize,arrayvec::arrayvec::ArrayVec&lt;usize,3&gt; &gt;,allocator_api2::stable::alloc::global::Global&gt;::reserve_rehash&lt;tuple$&lt;usize,arrayvec::arrayvec::ArrayVec&lt;usize,3&gt; &gt;,allocator_api2::stable::alloc::global::Global,hashbrown::map::make_hasher::closure_env$0&lt;usize,arrayvec::arrayvec::ArrayVec&lt;usize,3&gt;,core::hash::BuildHasherDefault (1,208 samples, 2.34%)</title><rect x="49.8022%" y="213" width="2.3424%" height="15" fill="rgb(209,121,21)" fg:x="25683" fg:w="1208"/><text x="50.0522%" y="223.50">t..</text></g><g><title>ntdll`RtlAllocateHeap (73 samples, 0.14%)</title><rect x="53.5466%" y="117" width="0.1416%" height="15" fill="rgb(220,109,13)" fg:x="27614" fg:w="73"/><text x="53.7966%" y="127.50"></text></g><g><title>ntdll`RtlEnumerateGenericTableWithoutSplayingAvl (7 samples, 0.01%)</title><rect x="53.6882%" y="117" width="0.0136%" height="15" fill="rgb(232,18,1)" fg:x="27687" fg:w="7"/><text x="53.9382%" y="127.50"></text></g><g><title>ntdll`RtlEnumerateGenericTableWithoutSplayingAvl (7 samples, 0.01%)</title><rect x="53.6882%" y="101" width="0.0136%" height="15" fill="rgb(215,41,42)" fg:x="27687" fg:w="7"/><text x="53.9382%" y="111.50"></text></g><g><title>ntdll`RtlAllocateHeap (614 samples, 1.19%)</title><rect x="52.6760%" y="149" width="1.1906%" height="15" fill="rgb(224,123,36)" fg:x="27165" fg:w="614"/><text x="52.9260%" y="159.50"></text></g><g><title>ntdll`RtlAllocateHeap (555 samples, 1.08%)</title><rect x="52.7904%" y="133" width="1.0762%" height="15" fill="rgb(240,125,3)" fg:x="27224" fg:w="555"/><text x="53.0404%" y="143.50"></text></g><g><title>ntdll`RtlUnhandledExceptionFilter (85 samples, 0.16%)</title><rect x="53.7018%" y="117" width="0.1648%" height="15" fill="rgb(205,98,50)" fg:x="27694" fg:w="85"/><text x="53.9518%" y="127.50"></text></g><g><title>ntdll`RtlCopyMemory (132 samples, 0.26%)</title><rect x="53.9073%" y="133" width="0.2560%" height="15" fill="rgb(205,185,37)" fg:x="27800" fg:w="132"/><text x="54.1573%" y="143.50"></text></g><g><title>ntdll`RtlReAllocateHeap (915 samples, 1.77%)</title><rect x="52.4743%" y="165" width="1.7743%" height="15" fill="rgb(238,207,15)" fg:x="27061" fg:w="915"/><text x="52.7243%" y="175.50">n..</text></g><g><title>ntdll`RtlFreeHeap (193 samples, 0.37%)</title><rect x="53.8743%" y="149" width="0.3742%" height="15" fill="rgb(213,199,42)" fg:x="27783" fg:w="193"/><text x="54.1243%" y="159.50"></text></g><g><title>ntdll`RtlGetCurrentServiceSessionId (44 samples, 0.09%)</title><rect x="54.1633%" y="133" width="0.0853%" height="15" fill="rgb(235,201,11)" fg:x="27932" fg:w="44"/><text x="54.4133%" y="143.50"></text></g><g><title>ntdll`RtlReAllocateHeap (1,006 samples, 1.95%)</title><rect x="52.3037%" y="197" width="1.9507%" height="15" fill="rgb(207,46,11)" fg:x="26973" fg:w="1006"/><text x="52.5537%" y="207.50">n..</text></g><g><title>ntdll`RtlReAllocateHeap (985 samples, 1.91%)</title><rect x="52.3444%" y="181" width="1.9100%" height="15" fill="rgb(241,35,35)" fg:x="26994" fg:w="985"/><text x="52.5944%" y="191.50">n..</text></g><g><title>toy`alloc::raw_vec::RawVec&lt;petgraph::graph_impl::NodeIndex&lt;u32&gt;,alloc::alloc::Global&gt;::reserve_for_push&lt;petgraph::graph_impl::NodeIndex (1,120 samples, 2.17%)</title><rect x="52.1447%" y="229" width="2.1718%" height="15" fill="rgb(243,32,47)" fg:x="26891" fg:w="1120"/><text x="52.3947%" y="239.50">t..</text></g><g><title>toy`alloc::raw_vec::finish_grow (1,064 samples, 2.06%)</title><rect x="52.2532%" y="213" width="2.0632%" height="15" fill="rgb(247,202,23)" fg:x="26947" fg:w="1064"/><text x="52.5032%" y="223.50">t..</text></g><g><title>toy`std::alloc::__default_lib_allocator::__rdl_realloc (32 samples, 0.06%)</title><rect x="54.2544%" y="197" width="0.0621%" height="15" fill="rgb(219,102,11)" fg:x="27979" fg:w="32"/><text x="54.5044%" y="207.50"></text></g><g><title>ntdll`RtlCopyMemory (34 samples, 0.07%)</title><rect x="54.3184%" y="149" width="0.0659%" height="15" fill="rgb(243,110,44)" fg:x="28012" fg:w="34"/><text x="54.5684%" y="159.50"></text></g><g><title>toy`alloc::raw_vec::impl$2::reserve::do_reserve_and_handle (40 samples, 0.08%)</title><rect x="54.3165%" y="229" width="0.0776%" height="15" fill="rgb(222,74,54)" fg:x="28011" fg:w="40"/><text x="54.5665%" y="239.50"></text></g><g><title>toy`alloc::raw_vec::finish_grow (40 samples, 0.08%)</title><rect x="54.3165%" y="213" width="0.0776%" height="15" fill="rgb(216,99,12)" fg:x="28011" fg:w="40"/><text x="54.5665%" y="223.50"></text></g><g><title>ntdll`RtlReAllocateHeap (40 samples, 0.08%)</title><rect x="54.3165%" y="197" width="0.0776%" height="15" fill="rgb(226,22,26)" fg:x="28011" fg:w="40"/><text x="54.5665%" y="207.50"></text></g><g><title>ntdll`RtlReAllocateHeap (40 samples, 0.08%)</title><rect x="54.3165%" y="181" width="0.0776%" height="15" fill="rgb(217,163,10)" fg:x="28011" fg:w="40"/><text x="54.5665%" y="191.50"></text></g><g><title>ntdll`RtlReAllocateHeap (40 samples, 0.08%)</title><rect x="54.3165%" y="165" width="0.0776%" height="15" fill="rgb(213,25,53)" fg:x="28011" fg:w="40"/><text x="54.5665%" y="175.50"></text></g><g><title>ntdll`RtlAllocateHeap (8 samples, 0.02%)</title><rect x="54.5123%" y="181" width="0.0155%" height="15" fill="rgb(252,105,26)" fg:x="28112" fg:w="8"/><text x="54.7623%" y="191.50"></text></g><g><title>ntdll`RtlAllocateHeap (75 samples, 0.15%)</title><rect x="54.4192%" y="213" width="0.1454%" height="15" fill="rgb(220,39,43)" fg:x="28064" fg:w="75"/><text x="54.6692%" y="223.50"></text></g><g><title>ntdll`RtlAllocateHeap (70 samples, 0.14%)</title><rect x="54.4289%" y="197" width="0.1357%" height="15" fill="rgb(229,68,48)" fg:x="28069" fg:w="70"/><text x="54.6789%" y="207.50"></text></g><g><title>ntdll`RtlUnhandledExceptionFilter (19 samples, 0.04%)</title><rect x="54.5278%" y="181" width="0.0368%" height="15" fill="rgb(252,8,32)" fg:x="28120" fg:w="19"/><text x="54.7778%" y="191.50"></text></g><g><title>ntdll`RtlCopyMemory (31 samples, 0.06%)</title><rect x="54.5685%" y="197" width="0.0601%" height="15" fill="rgb(223,20,43)" fg:x="28141" fg:w="31"/><text x="54.8185%" y="207.50"></text></g><g><title>ntdll`RtlFreeHeap (41 samples, 0.08%)</title><rect x="54.5647%" y="213" width="0.0795%" height="15" fill="rgb(229,81,49)" fg:x="28139" fg:w="41"/><text x="54.8147%" y="223.50"></text></g><g><title>ntdll`RtlGetCurrentServiceSessionId (8 samples, 0.02%)</title><rect x="54.6287%" y="197" width="0.0155%" height="15" fill="rgb(236,28,36)" fg:x="28172" fg:w="8"/><text x="54.8787%" y="207.50"></text></g><g><title>ntdll`RtlAllocateHeap (83 samples, 0.16%)</title><rect x="54.6830%" y="197" width="0.1609%" height="15" fill="rgb(249,185,26)" fg:x="28200" fg:w="83"/><text x="54.9330%" y="207.50"></text></g><g><title>ntdll`RtlAllocateHeap (75 samples, 0.15%)</title><rect x="54.6985%" y="181" width="0.1454%" height="15" fill="rgb(249,174,33)" fg:x="28208" fg:w="75"/><text x="54.9485%" y="191.50"></text></g><g><title>ntdll`RtlUnhandledExceptionFilter (14 samples, 0.03%)</title><rect x="54.8168%" y="165" width="0.0271%" height="15" fill="rgb(233,201,37)" fg:x="28269" fg:w="14"/><text x="55.0668%" y="175.50"></text></g><g><title>toy`core::iter::adapters::map::impl$2::fold&lt;aeg::critical_cycles::CriticalCycle,alloc::vec::into_iter::IntoIter&lt;alloc::vec::Vec&lt;petgraph::graph_impl::EdgeIndex&lt;u32&gt;,alloc::alloc::Global&gt;,alloc::alloc::Global&gt;,aeg::critical_cycles::impl$3::complete::closure_env$0,tuple$&lt;&gt;,core::iter::traits::iterator::Iterator::for_each::call::closure_env$0&lt;aeg::critical_cycles::CriticalCycle,alloc::vec::impl$19::extend_trusted::closure_env$0&lt;aeg::critical_cycles::CriticalCycle,alloc::alloc::Global,core::iter::adapters::map::Map&lt;alloc::vec::into_iter::IntoIter&lt;alloc::vec::Vec&lt;petgraph::graph_impl::EdgeIndex (104 samples, 0.20%)</title><rect x="54.6442%" y="213" width="0.2017%" height="15" fill="rgb(221,78,26)" fg:x="28180" fg:w="104"/><text x="54.8942%" y="223.50"></text></g><g><title>toy`alloc::vec::in_place_collect::impl$1::from_iter&lt;aeg::critical_cycles::CriticalCycle,core::iter::adapters::map::Map&lt;alloc::vec::into_iter::IntoIter&lt;alloc::vec::Vec&lt;petgraph::graph_impl::EdgeIndex (238 samples, 0.46%)</title><rect x="54.3940%" y="229" width="0.4615%" height="15" fill="rgb(250,127,30)" fg:x="28051" fg:w="238"/><text x="54.6440%" y="239.50"></text></g><g><title>ntdll`RtlAllocateHeap (21 samples, 0.04%)</title><rect x="55.0553%" y="181" width="0.0407%" height="15" fill="rgb(230,49,44)" fg:x="28392" fg:w="21"/><text x="55.3053%" y="191.50"></text></g><g><title>ntdll`RtlAllocateHeap (19 samples, 0.04%)</title><rect x="55.0591%" y="165" width="0.0368%" height="15" fill="rgb(229,67,23)" fg:x="28394" fg:w="19"/><text x="55.3091%" y="175.50"></text></g><g><title>ntdll`RtlAllocateHeap (18 samples, 0.03%)</title><rect x="55.1057%" y="133" width="0.0349%" height="15" fill="rgb(249,83,47)" fg:x="28418" fg:w="18"/><text x="55.3557%" y="143.50"></text></g><g><title>ntdll`RtlAllocateHeap (14 samples, 0.03%)</title><rect x="55.1134%" y="117" width="0.0271%" height="15" fill="rgb(215,43,3)" fg:x="28422" fg:w="14"/><text x="55.3634%" y="127.50"></text></g><g><title>ntdll`RtlReAllocateHeap (30 samples, 0.06%)</title><rect x="55.0960%" y="181" width="0.0582%" height="15" fill="rgb(238,154,13)" fg:x="28413" fg:w="30"/><text x="55.3460%" y="191.50"></text></g><g><title>ntdll`RtlReAllocateHeap (29 samples, 0.06%)</title><rect x="55.0979%" y="165" width="0.0562%" height="15" fill="rgb(219,56,2)" fg:x="28414" fg:w="29"/><text x="55.3479%" y="175.50"></text></g><g><title>ntdll`RtlReAllocateHeap (29 samples, 0.06%)</title><rect x="55.0979%" y="149" width="0.0562%" height="15" fill="rgb(233,0,4)" fg:x="28414" fg:w="29"/><text x="55.3479%" y="159.50"></text></g><g><title>ntdll`RtlFreeHeap (6 samples, 0.01%)</title><rect x="55.1425%" y="133" width="0.0116%" height="15" fill="rgb(235,30,7)" fg:x="28437" fg:w="6"/><text x="55.3925%" y="143.50"></text></g><g><title>toy`alloc::vec::spec_extend::impl$1::spec_extend&lt;petgraph::graph_impl::EdgeIndex&lt;u32&gt;,core::iter::adapters::map::Map&lt;core::slice::iter::Windows&lt;petgraph::graph_impl::NodeIndex (157 samples, 0.30%)</title><rect x="54.8555%" y="229" width="0.3044%" height="15" fill="rgb(250,79,13)" fg:x="28289" fg:w="157"/><text x="55.1055%" y="239.50"></text></g><g><title>toy`alloc::raw_vec::impl$2::reserve::do_reserve_and_handle&lt;petgraph::graph_impl::EdgeIndex (68 samples, 0.13%)</title><rect x="55.0281%" y="213" width="0.1319%" height="15" fill="rgb(211,146,34)" fg:x="28378" fg:w="68"/><text x="55.2781%" y="223.50"></text></g><g><title>toy`alloc::raw_vec::finish_grow (61 samples, 0.12%)</title><rect x="55.0417%" y="197" width="0.1183%" height="15" fill="rgb(228,22,38)" fg:x="28385" fg:w="61"/><text x="55.2917%" y="207.50"></text></g><g><title>ntdll`NtProtectVirtualMemory (15 samples, 0.03%)</title><rect x="63.7793%" y="149" width="0.0291%" height="15" fill="rgb(235,168,5)" fg:x="32891" fg:w="15"/><text x="64.0293%" y="159.50"></text></g><g><title>ntdll`NtAllocateVirtualMemory (8 samples, 0.02%)</title><rect x="63.8084%" y="85" width="0.0155%" height="15" fill="rgb(221,155,16)" fg:x="32906" fg:w="8"/><text x="64.0584%" y="95.50"></text></g><g><title>ntdll`RtlCopyMemory (1,431 samples, 2.77%)</title><rect x="61.5881%" y="197" width="2.7749%" height="15" fill="rgb(215,215,53)" fg:x="31761" fg:w="1431"/><text x="61.8381%" y="207.50">nt..</text></g><g><title>ntdll`RtlTryAcquirePebLock (302 samples, 0.59%)</title><rect x="63.7774%" y="181" width="0.5856%" height="15" fill="rgb(223,4,10)" fg:x="32890" fg:w="302"/><text x="64.0274%" y="191.50"></text></g><g><title>ntdll`RtlTryAcquirePebLock (301 samples, 0.58%)</title><rect x="63.7793%" y="165" width="0.5837%" height="15" fill="rgb(234,103,6)" fg:x="32891" fg:w="301"/><text x="64.0293%" y="175.50"></text></g><g><title>ntdll`RtlFreeHeap (286 samples, 0.55%)</title><rect x="63.8084%" y="149" width="0.5546%" height="15" fill="rgb(227,97,0)" fg:x="32906" fg:w="286"/><text x="64.0584%" y="159.50"></text></g><g><title>ntdll`RtlGetCurrentServiceSessionId (286 samples, 0.55%)</title><rect x="63.8084%" y="133" width="0.5546%" height="15" fill="rgb(234,150,53)" fg:x="32906" fg:w="286"/><text x="64.0584%" y="143.50"></text></g><g><title>ntdll`RtlDeleteBoundaryDescriptor (286 samples, 0.55%)</title><rect x="63.8084%" y="117" width="0.5546%" height="15" fill="rgb(228,201,54)" fg:x="32906" fg:w="286"/><text x="64.0584%" y="127.50"></text></g><g><title>ntdll`RtlTryEnterCriticalSection (286 samples, 0.55%)</title><rect x="63.8084%" y="101" width="0.5546%" height="15" fill="rgb(222,22,37)" fg:x="32906" fg:w="286"/><text x="64.0584%" y="111.50"></text></g><g><title>ntdll`RtlTryEnterCriticalSection (278 samples, 0.54%)</title><rect x="63.8239%" y="85" width="0.5391%" height="15" fill="rgb(237,53,32)" fg:x="32914" fg:w="278"/><text x="64.0739%" y="95.50"></text></g><g><title>ntdll`RtlTryEnterCriticalSection (257 samples, 0.50%)</title><rect x="63.8646%" y="69" width="0.4984%" height="15" fill="rgb(233,25,53)" fg:x="32935" fg:w="257"/><text x="64.1146%" y="79.50"></text></g><g><title>ntdll`RtlTryEnterCriticalSection (256 samples, 0.50%)</title><rect x="63.8666%" y="53" width="0.4964%" height="15" fill="rgb(210,40,34)" fg:x="32936" fg:w="256"/><text x="64.1166%" y="63.50"></text></g><g><title>ntdll`NtFreeVirtualMemory (231 samples, 0.45%)</title><rect x="63.9151%" y="37" width="0.4479%" height="15" fill="rgb(241,220,44)" fg:x="32961" fg:w="231"/><text x="64.1651%" y="47.50"></text></g><g><title>ntdll`RtlFreeHeap (3,501 samples, 6.79%)</title><rect x="61.5028%" y="213" width="6.7888%" height="15" fill="rgb(235,28,35)" fg:x="31717" fg:w="3501"/><text x="61.7528%" y="223.50">ntdll`Rtl..</text></g><g><title>ntdll`RtlGetCurrentServiceSessionId (2,026 samples, 3.93%)</title><rect x="64.3630%" y="197" width="3.9286%" height="15" fill="rgb(210,56,17)" fg:x="33192" fg:w="2026"/><text x="64.6130%" y="207.50">ntdl..</text></g><g><title>ntdll`RtlFreeHeap (13 samples, 0.03%)</title><rect x="68.2664%" y="181" width="0.0252%" height="15" fill="rgb(224,130,29)" fg:x="35205" fg:w="13"/><text x="68.5164%" y="191.50"></text></g><g><title>toy`core::ptr::drop_in_place&lt;tuple$&lt;aeg::critical_cycles::IncompleteMinimalCycle&lt;usize,usize&gt;,tuple$ (6,786 samples, 13.16%)</title><rect x="55.1600%" y="229" width="13.1588%" height="15" fill="rgb(235,212,8)" fg:x="28446" fg:w="6786"/><text x="55.4100%" y="239.50">toy`core::ptr::drop_..</text></g><g><title>toy`std::alloc::__default_lib_allocator::__rdl_dealloc (13 samples, 0.03%)</title><rect x="68.2936%" y="213" width="0.0252%" height="15" fill="rgb(223,33,50)" fg:x="35219" fg:w="13"/><text x="68.5436%" y="223.50"></text></g><g><title>toy`hashbrown::raw::inner::RawTable&lt;tuple$&lt;aeg::critical_cycles::IncompleteMinimalCycle&lt;usize,usize&gt;,tuple$&lt;&gt; &gt;,allocator_api2::stable::alloc::global::Global&gt;::reserve_rehash&lt;tuple$&lt;aeg::critical_cycles::IncompleteMinimalCycle&lt;usize,usize&gt;,tuple$&lt;&gt; &gt;,allocator_api2::stable::alloc::global::Global,hashbrown::map::make_hasher::closure_env$0&lt;aeg::critical_cycles::IncompleteMinimalCycle&lt;usize,usize&gt;,tuple$&lt;&gt;,core::hash::BuildHasherDefault (694 samples, 1.35%)</title><rect x="68.3188%" y="229" width="1.3457%" height="15" fill="rgb(219,149,13)" fg:x="35232" fg:w="694"/><text x="68.5688%" y="239.50"></text></g><g><title>VCRUNTIME140`memcpy (13 samples, 0.03%)</title><rect x="72.6256%" y="213" width="0.0252%" height="15" fill="rgb(250,156,29)" fg:x="37453" fg:w="13"/><text x="72.8756%" y="223.50"></text></g><g><title>VCRUNTIME140`memmove (111 samples, 0.22%)</title><rect x="72.6508%" y="213" width="0.2152%" height="15" fill="rgb(216,193,19)" fg:x="37466" fg:w="111"/><text x="72.9008%" y="223.50"></text></g><g><title>ntdll`RtlAllocateHeap (2,986 samples, 5.79%)</title><rect x="76.4475%" y="181" width="5.7902%" height="15" fill="rgb(216,135,14)" fg:x="39424" fg:w="2986"/><text x="76.6975%" y="191.50">ntdll`R..</text></g><g><title>ntdll`RtlAllocateHeap (44 samples, 0.09%)</title><rect x="82.1524%" y="165" width="0.0853%" height="15" fill="rgb(241,47,5)" fg:x="42366" fg:w="44"/><text x="82.4024%" y="175.50"></text></g><g><title>ntdll`NtProtectVirtualMemory (27 samples, 0.05%)</title><rect x="82.2397%" y="149" width="0.0524%" height="15" fill="rgb(233,42,35)" fg:x="42411" fg:w="27"/><text x="82.4897%" y="159.50"></text></g><g><title>ntdll`NtAllocateVirtualMemory (30 samples, 0.06%)</title><rect x="82.5073%" y="101" width="0.0582%" height="15" fill="rgb(231,13,6)" fg:x="42549" fg:w="30"/><text x="82.7573%" y="111.50"></text></g><g><title>ntdll`NtAllocateVirtualMemory (10 samples, 0.02%)</title><rect x="82.5790%" y="85" width="0.0194%" height="15" fill="rgb(207,181,40)" fg:x="42586" fg:w="10"/><text x="82.8290%" y="95.50"></text></g><g><title>ntdll`RtlAllocateHeap (175 samples, 0.34%)</title><rect x="82.2920%" y="149" width="0.3393%" height="15" fill="rgb(254,173,49)" fg:x="42438" fg:w="175"/><text x="82.5420%" y="159.50"></text></g><g><title>ntdll`RtlAllocateHeap (175 samples, 0.34%)</title><rect x="82.2920%" y="133" width="0.3393%" height="15" fill="rgb(221,1,38)" fg:x="42438" fg:w="175"/><text x="82.5420%" y="143.50"></text></g><g><title>ntdll`RtlTryEnterCriticalSection (65 samples, 0.13%)</title><rect x="82.5053%" y="117" width="0.1260%" height="15" fill="rgb(206,124,46)" fg:x="42548" fg:w="65"/><text x="82.7553%" y="127.50"></text></g><g><title>ntdll`RtlTryEnterCriticalSection (33 samples, 0.06%)</title><rect x="82.5674%" y="101" width="0.0640%" height="15" fill="rgb(249,21,11)" fg:x="42580" fg:w="33"/><text x="82.8174%" y="111.50"></text></g><g><title>ntdll`RtlTryEnterCriticalSection (17 samples, 0.03%)</title><rect x="82.5984%" y="85" width="0.0330%" height="15" fill="rgb(222,201,40)" fg:x="42596" fg:w="17"/><text x="82.8484%" y="95.50"></text></g><g><title>ntdll`RtlEnumerateGenericTableWithoutSplayingAvl (209 samples, 0.41%)</title><rect x="82.2377%" y="181" width="0.4053%" height="15" fill="rgb(235,61,29)" fg:x="42410" fg:w="209"/><text x="82.4877%" y="191.50"></text></g><g><title>ntdll`RtlEnumerateGenericTableWithoutSplayingAvl (208 samples, 0.40%)</title><rect x="82.2397%" y="165" width="0.4033%" height="15" fill="rgb(219,207,3)" fg:x="42411" fg:w="208"/><text x="82.4897%" y="175.50"></text></g><g><title>ntdll`RtlAllocateHeap (5,506 samples, 10.68%)</title><rect x="72.8660%" y="213" width="10.6768%" height="15" fill="rgb(222,56,46)" fg:x="37577" fg:w="5506"/><text x="73.1160%" y="223.50">ntdll`RtlAllocat..</text></g><g><title>ntdll`RtlAllocateHeap (5,130 samples, 9.95%)</title><rect x="73.5951%" y="197" width="9.9476%" height="15" fill="rgb(239,76,54)" fg:x="37953" fg:w="5130"/><text x="73.8451%" y="207.50">ntdll`RtlAlloc..</text></g><g><title>ntdll`RtlUnhandledExceptionFilter (460 samples, 0.89%)</title><rect x="82.6508%" y="181" width="0.8920%" height="15" fill="rgb(231,124,27)" fg:x="42623" fg:w="460"/><text x="82.9008%" y="191.50"></text></g><g><title>toy`hashbrown::raw::inner::impl$13::clone&lt;tuple$&lt;usize,arrayvec::arrayvec::ArrayVec (7,202 samples, 13.97%)</title><rect x="69.6645%" y="229" width="13.9655%" height="15" fill="rgb(249,195,6)" fg:x="35926" fg:w="7202"/><text x="69.9145%" y="239.50">toy`hashbrown::raw::i..</text></g><g><title>toy`std::alloc::__default_lib_allocator::__rdl_alloc (42 samples, 0.08%)</title><rect x="83.5486%" y="213" width="0.0814%" height="15" fill="rgb(237,174,47)" fg:x="43086" fg:w="42"/><text x="83.7986%" y="223.50"></text></g><g><title>ntdll`RtlAllocateHeap (10 samples, 0.02%)</title><rect x="87.4501%" y="181" width="0.0194%" height="15" fill="rgb(206,201,31)" fg:x="45098" fg:w="10"/><text x="87.7001%" y="191.50"></text></g><g><title>ntdll`RtlAllocateHeap (34 samples, 0.07%)</title><rect x="87.4113%" y="213" width="0.0659%" height="15" fill="rgb(231,57,52)" fg:x="45078" fg:w="34"/><text x="87.6613%" y="223.50"></text></g><g><title>ntdll`RtlAllocateHeap (26 samples, 0.05%)</title><rect x="87.4268%" y="197" width="0.0504%" height="15" fill="rgb(248,177,22)" fg:x="45086" fg:w="26"/><text x="87.6768%" y="207.50"></text></g><g><title>ntdll`RtlCopyMemory (76 samples, 0.15%)</title><rect x="87.5082%" y="197" width="0.1474%" height="15" fill="rgb(215,211,37)" fg:x="45128" fg:w="76"/><text x="87.7582%" y="207.50"></text></g><g><title>ntdll`RtlFreeHeap (120 samples, 0.23%)</title><rect x="87.4772%" y="213" width="0.2327%" height="15" fill="rgb(241,128,51)" fg:x="45112" fg:w="120"/><text x="87.7272%" y="223.50"></text></g><g><title>ntdll`RtlGetCurrentServiceSessionId (28 samples, 0.05%)</title><rect x="87.6556%" y="197" width="0.0543%" height="15" fill="rgb(227,165,31)" fg:x="45204" fg:w="28"/><text x="87.9056%" y="207.50"></text></g><g><title>toy`alloc::collections::binary_heap::BinaryHeap&lt;petgraph::scored::MinScored&lt;i32,petgraph::graph_impl::NodeIndex&lt;u32&gt; &gt;,alloc::alloc::Global&gt;::pop&lt;petgraph::scored::MinScored&lt;i32,petgraph::graph_impl::NodeIndex (195 samples, 0.38%)</title><rect x="87.7118%" y="213" width="0.3781%" height="15" fill="rgb(228,167,24)" fg:x="45233" fg:w="195"/><text x="87.9618%" y="223.50"></text></g><g><title>ntdll`RtlAllocateHeap (11 samples, 0.02%)</title><rect x="88.3595%" y="101" width="0.0213%" height="15" fill="rgb(228,143,12)" fg:x="45567" fg:w="11"/><text x="88.6095%" y="111.50"></text></g><g><title>ntdll`RtlAllocateHeap (124 samples, 0.24%)</title><rect x="88.1831%" y="133" width="0.2404%" height="15" fill="rgb(249,149,8)" fg:x="45476" fg:w="124"/><text x="88.4331%" y="143.50"></text></g><g><title>ntdll`RtlAllocateHeap (110 samples, 0.21%)</title><rect x="88.2102%" y="117" width="0.2133%" height="15" fill="rgb(243,35,44)" fg:x="45490" fg:w="110"/><text x="88.4602%" y="127.50"></text></g><g><title>ntdll`RtlUnhandledExceptionFilter (22 samples, 0.04%)</title><rect x="88.3808%" y="101" width="0.0427%" height="15" fill="rgb(246,89,9)" fg:x="45578" fg:w="22"/><text x="88.6308%" y="111.50"></text></g><g><title>ntdll`RtlCopyMemory (27 samples, 0.05%)</title><rect x="88.4371%" y="117" width="0.0524%" height="15" fill="rgb(233,213,13)" fg:x="45607" fg:w="27"/><text x="88.6871%" y="127.50"></text></g><g><title>ntdll`RtlReAllocateHeap (183 samples, 0.35%)</title><rect x="88.1598%" y="149" width="0.3549%" height="15" fill="rgb(233,141,41)" fg:x="45464" fg:w="183"/><text x="88.4098%" y="159.50"></text></g><g><title>ntdll`RtlFreeHeap (43 samples, 0.08%)</title><rect x="88.4313%" y="133" width="0.0834%" height="15" fill="rgb(239,167,4)" fg:x="45604" fg:w="43"/><text x="88.6813%" y="143.50"></text></g><g><title>ntdll`RtlGetCurrentServiceSessionId (13 samples, 0.03%)</title><rect x="88.4894%" y="117" width="0.0252%" height="15" fill="rgb(209,217,16)" fg:x="45634" fg:w="13"/><text x="88.7394%" y="127.50"></text></g><g><title>ntdll`RtlReAllocateHeap (201 samples, 0.39%)</title><rect x="88.1268%" y="181" width="0.3898%" height="15" fill="rgb(219,88,35)" fg:x="45447" fg:w="201"/><text x="88.3768%" y="191.50"></text></g><g><title>ntdll`RtlReAllocateHeap (193 samples, 0.37%)</title><rect x="88.1423%" y="165" width="0.3742%" height="15" fill="rgb(220,193,23)" fg:x="45455" fg:w="193"/><text x="88.3923%" y="175.50"></text></g><g><title>toy`alloc::raw_vec::RawVec&lt;petgraph::graph_impl::NodeIndex&lt;u32&gt;,alloc::alloc::Global&gt;::reserve_for_push&lt;petgraph::graph_impl::NodeIndex (224 samples, 0.43%)</title><rect x="88.0900%" y="213" width="0.4344%" height="15" fill="rgb(230,90,52)" fg:x="45428" fg:w="224"/><text x="88.3400%" y="223.50"></text></g><g><title>toy`alloc::raw_vec::finish_grow (213 samples, 0.41%)</title><rect x="88.1113%" y="197" width="0.4130%" height="15" fill="rgb(252,106,19)" fg:x="45439" fg:w="213"/><text x="88.3613%" y="207.50"></text></g><g><title>ntdll`RtlAllocateHeap (9 samples, 0.02%)</title><rect x="88.7105%" y="149" width="0.0175%" height="15" fill="rgb(206,74,20)" fg:x="45748" fg:w="9"/><text x="88.9605%" y="159.50"></text></g><g><title>ntdll`RtlAllocateHeap (51 samples, 0.10%)</title><rect x="88.6426%" y="181" width="0.0989%" height="15" fill="rgb(230,138,44)" fg:x="45713" fg:w="51"/><text x="88.8926%" y="191.50"></text></g><g><title>ntdll`RtlAllocateHeap (47 samples, 0.09%)</title><rect x="88.6504%" y="165" width="0.0911%" height="15" fill="rgb(235,182,43)" fg:x="45717" fg:w="47"/><text x="88.9004%" y="175.50"></text></g><g><title>ntdll`RtlUnhandledExceptionFilter (7 samples, 0.01%)</title><rect x="88.7279%" y="149" width="0.0136%" height="15" fill="rgb(242,16,51)" fg:x="45757" fg:w="7"/><text x="88.9779%" y="159.50"></text></g><g><title>ntdll`RtlAllocateHeap (18 samples, 0.03%)</title><rect x="89.1177%" y="101" width="0.0349%" height="15" fill="rgb(248,9,4)" fg:x="45958" fg:w="18"/><text x="89.3677%" y="111.50"></text></g><g><title>ntdll`RtlAllocateHeap (10 samples, 0.02%)</title><rect x="89.1332%" y="85" width="0.0194%" height="15" fill="rgb(210,31,22)" fg:x="45966" fg:w="10"/><text x="89.3832%" y="95.50"></text></g><g><title>ntdll`RtlAllocateHeap (203 samples, 0.39%)</title><rect x="88.8501%" y="133" width="0.3936%" height="15" fill="rgb(239,54,39)" fg:x="45820" fg:w="203"/><text x="89.1001%" y="143.50"></text></g><g><title>ntdll`RtlAllocateHeap (181 samples, 0.35%)</title><rect x="88.8928%" y="117" width="0.3510%" height="15" fill="rgb(230,99,41)" fg:x="45842" fg:w="181"/><text x="89.1428%" y="127.50"></text></g><g><title>ntdll`RtlUnhandledExceptionFilter (46 samples, 0.09%)</title><rect x="89.1545%" y="101" width="0.0892%" height="15" fill="rgb(253,106,12)" fg:x="45977" fg:w="46"/><text x="89.4045%" y="111.50"></text></g><g><title>ntdll`RtlCopyMemory (9 samples, 0.02%)</title><rect x="89.2437%" y="133" width="0.0175%" height="15" fill="rgb(213,46,41)" fg:x="46023" fg:w="9"/><text x="89.4937%" y="143.50"></text></g><g><title>ntdll`RtlCopyMemory (38 samples, 0.07%)</title><rect x="89.2670%" y="117" width="0.0737%" height="15" fill="rgb(215,133,35)" fg:x="46035" fg:w="38"/><text x="89.5170%" y="127.50"></text></g><g><title>ntdll`RtlReAllocateHeap (301 samples, 0.58%)</title><rect x="88.7822%" y="149" width="0.5837%" height="15" fill="rgb(213,28,5)" fg:x="45785" fg:w="301"/><text x="89.0322%" y="159.50"></text></g><g><title>ntdll`RtlFreeHeap (54 samples, 0.10%)</title><rect x="89.2612%" y="133" width="0.1047%" height="15" fill="rgb(215,77,49)" fg:x="46032" fg:w="54"/><text x="89.5112%" y="143.50"></text></g><g><title>ntdll`RtlGetCurrentServiceSessionId (13 samples, 0.03%)</title><rect x="89.3407%" y="117" width="0.0252%" height="15" fill="rgb(248,100,22)" fg:x="46073" fg:w="13"/><text x="89.5907%" y="127.50"></text></g><g><title>ntdll`RtlReAllocateHeap (323 samples, 0.63%)</title><rect x="88.7415%" y="181" width="0.6263%" height="15" fill="rgb(208,67,9)" fg:x="45764" fg:w="323"/><text x="88.9915%" y="191.50"></text></g><g><title>ntdll`RtlReAllocateHeap (318 samples, 0.62%)</title><rect x="88.7512%" y="165" width="0.6166%" height="15" fill="rgb(219,133,21)" fg:x="45769" fg:w="318"/><text x="89.0012%" y="175.50"></text></g><g><title>toy`alloc::raw_vec::RawVec&lt;petgraph::scored::MinScored&lt;i32,petgraph::graph_impl::NodeIndex&lt;u32&gt; &gt;,alloc::alloc::Global&gt;::reserve_for_push&lt;petgraph::scored::MinScored&lt;i32,petgraph::graph_impl::NodeIndex (441 samples, 0.86%)</title><rect x="88.5243%" y="213" width="0.8551%" height="15" fill="rgb(246,46,29)" fg:x="45652" fg:w="441"/><text x="88.7743%" y="223.50"></text></g><g><title>toy`alloc::raw_vec::finish_grow (416 samples, 0.81%)</title><rect x="88.5728%" y="197" width="0.8067%" height="15" fill="rgb(246,185,52)" fg:x="45677" fg:w="416"/><text x="88.8228%" y="207.50"></text></g><g><title>toy`core::hash::BuildHasher::hash_one&lt;std::hash::random::RandomState,ref$&lt;petgraph::graph_impl::NodeIndex (265 samples, 0.51%)</title><rect x="89.3795%" y="213" width="0.5139%" height="15" fill="rgb(252,136,11)" fg:x="46093" fg:w="265"/><text x="89.6295%" y="223.50"></text></g><g><title>toy`core::hash::sip::impl$5::write (50 samples, 0.10%)</title><rect x="89.7964%" y="197" width="0.0970%" height="15" fill="rgb(219,138,53)" fg:x="46308" fg:w="50"/><text x="90.0464%" y="207.50"></text></g><g><title>toy`core::hash::sip::impl$5::write (129 samples, 0.25%)</title><rect x="89.8933%" y="213" width="0.2501%" height="15" fill="rgb(211,51,23)" fg:x="46358" fg:w="129"/><text x="90.1433%" y="223.50"></text></g><g><title>toy`core::hash::BuildHasher::hash_one&lt;std::hash::random::RandomState,ref$&lt;petgraph::graph_impl::NodeIndex (380 samples, 0.74%)</title><rect x="91.1557%" y="197" width="0.7369%" height="15" fill="rgb(247,221,28)" fg:x="47009" fg:w="380"/><text x="91.4057%" y="207.50"></text></g><g><title>toy`core::hash::sip::impl$5::write (74 samples, 0.14%)</title><rect x="91.7491%" y="181" width="0.1435%" height="15" fill="rgb(251,222,45)" fg:x="47315" fg:w="74"/><text x="91.9991%" y="191.50"></text></g><g><title>VCRUNTIME140`memset (20 samples, 0.04%)</title><rect x="92.8912%" y="181" width="0.0388%" height="15" fill="rgb(217,162,53)" fg:x="47904" fg:w="20"/><text x="93.1412%" y="191.50"></text></g><g><title>ntdll`RtlAllocateHeap (22 samples, 0.04%)</title><rect x="93.2752%" y="149" width="0.0427%" height="15" fill="rgb(229,93,14)" fg:x="48102" fg:w="22"/><text x="93.5252%" y="159.50"></text></g><g><title>ntdll`RtlAllocateHeap (239 samples, 0.46%)</title><rect x="92.9300%" y="181" width="0.4634%" height="15" fill="rgb(209,67,49)" fg:x="47924" fg:w="239"/><text x="93.1800%" y="191.50"></text></g><g><title>ntdll`RtlAllocateHeap (207 samples, 0.40%)</title><rect x="92.9920%" y="165" width="0.4014%" height="15" fill="rgb(213,87,29)" fg:x="47956" fg:w="207"/><text x="93.2420%" y="175.50"></text></g><g><title>ntdll`RtlUnhandledExceptionFilter (38 samples, 0.07%)</title><rect x="93.3198%" y="149" width="0.0737%" height="15" fill="rgb(205,151,52)" fg:x="48125" fg:w="38"/><text x="93.5698%" y="159.50"></text></g><g><title>ntdll`RtlCopyMemory (50 samples, 0.10%)</title><rect x="93.4070%" y="165" width="0.0970%" height="15" fill="rgb(253,215,39)" fg:x="48170" fg:w="50"/><text x="93.6570%" y="175.50"></text></g><g><title>ntdll`RtlFreeHeap (75 samples, 0.15%)</title><rect x="93.3934%" y="181" width="0.1454%" height="15" fill="rgb(221,220,41)" fg:x="48163" fg:w="75"/><text x="93.6434%" y="191.50"></text></g><g><title>ntdll`RtlGetCurrentServiceSessionId (18 samples, 0.03%)</title><rect x="93.5040%" y="165" width="0.0349%" height="15" fill="rgb(218,133,21)" fg:x="48220" fg:w="18"/><text x="93.7540%" y="175.50"></text></g><g><title>toy`core::hash::BuildHasher::hash_one&lt;std::hash::random::RandomState,ref$&lt;petgraph::graph_impl::NodeIndex (337 samples, 0.65%)</title><rect x="93.5389%" y="181" width="0.6535%" height="15" fill="rgb(221,193,43)" fg:x="48238" fg:w="337"/><text x="93.7889%" y="191.50"></text></g><g><title>toy`core::hash::sip::impl$5::write (72 samples, 0.14%)</title><rect x="94.0527%" y="165" width="0.1396%" height="15" fill="rgb(240,128,52)" fg:x="48503" fg:w="72"/><text x="94.3027%" y="175.50"></text></g><g><title>toy`hashbrown::map::HashMap&lt;petgraph::graph_impl::NodeIndex&lt;u32&gt;,petgraph::graph_impl::NodeIndex&lt;u32&gt;,std::hash::random::RandomState,alloc::alloc::Global&gt;::insert&lt;petgraph::graph_impl::NodeIndex&lt;u32&gt;,petgraph::graph_impl::NodeIndex (2,094 samples, 4.06%)</title><rect x="90.1435%" y="213" width="4.0605%" height="15" fill="rgb(253,114,12)" fg:x="46487" fg:w="2094"/><text x="90.3935%" y="223.50">toy`..</text></g><g><title>toy`hashbrown::raw::RawTable&lt;tuple$&lt;petgraph::graph_impl::NodeIndex&lt;u32&gt;,i32&gt;,alloc::alloc::Global&gt;::reserve_rehash&lt;tuple$&lt;petgraph::graph_impl::NodeIndex&lt;u32&gt;,i32&gt;,alloc::alloc::Global,hashbrown::map::make_hasher::closure_env$0&lt;petgraph::graph_impl::NodeIndex (1,192 samples, 2.31%)</title><rect x="91.8926%" y="197" width="2.3114%" height="15" fill="rgb(215,223,47)" fg:x="47389" fg:w="1192"/><text x="92.1426%" y="207.50">t..</text></g><g><title>toy`std::alloc::__default_lib_allocator::__rdl_alloc (6 samples, 0.01%)</title><rect x="94.1924%" y="181" width="0.0116%" height="15" fill="rgb(248,225,23)" fg:x="48575" fg:w="6"/><text x="94.4424%" y="191.50"></text></g><g><title>VCRUNTIME140`memset (28 samples, 0.05%)</title><rect x="95.3733%" y="197" width="0.0543%" height="15" fill="rgb(250,108,0)" fg:x="49184" fg:w="28"/><text x="95.6233%" y="207.50"></text></g><g><title>ntdll`RtlAllocateHeap (40 samples, 0.08%)</title><rect x="95.8639%" y="165" width="0.0776%" height="15" fill="rgb(228,208,7)" fg:x="49437" fg:w="40"/><text x="96.1139%" y="175.50"></text></g><g><title>ntdll`RtlAllocateHeap (18 samples, 0.03%)</title><rect x="95.9065%" y="149" width="0.0349%" height="15" fill="rgb(244,45,10)" fg:x="49459" fg:w="18"/><text x="96.1565%" y="159.50"></text></g><g><title>ntdll`RtlAllocateHeap (325 samples, 0.63%)</title><rect x="95.4276%" y="197" width="0.6302%" height="15" fill="rgb(207,125,25)" fg:x="49212" fg:w="325"/><text x="95.6776%" y="207.50"></text></g><g><title>ntdll`RtlAllocateHeap (277 samples, 0.54%)</title><rect x="95.5207%" y="181" width="0.5371%" height="15" fill="rgb(210,195,18)" fg:x="49260" fg:w="277"/><text x="95.7707%" y="191.50"></text></g><g><title>ntdll`RtlUnhandledExceptionFilter (59 samples, 0.11%)</title><rect x="95.9434%" y="165" width="0.1144%" height="15" fill="rgb(249,80,12)" fg:x="49478" fg:w="59"/><text x="96.1934%" y="175.50"></text></g><g><title>ntdll`RtlCopyMemory (72 samples, 0.14%)</title><rect x="96.0772%" y="181" width="0.1396%" height="15" fill="rgb(221,65,9)" fg:x="49547" fg:w="72"/><text x="96.3272%" y="191.50"></text></g><g><title>ntdll`RtlFreeHeap (114 samples, 0.22%)</title><rect x="96.0578%" y="197" width="0.2211%" height="15" fill="rgb(235,49,36)" fg:x="49537" fg:w="114"/><text x="96.3078%" y="207.50"></text></g><g><title>ntdll`RtlGetCurrentServiceSessionId (32 samples, 0.06%)</title><rect x="96.2168%" y="181" width="0.0621%" height="15" fill="rgb(225,32,20)" fg:x="49619" fg:w="32"/><text x="96.4668%" y="191.50"></text></g><g><title>ntdll`RtlFreeHeap (7 samples, 0.01%)</title><rect x="96.2653%" y="165" width="0.0136%" height="15" fill="rgb(215,141,46)" fg:x="49644" fg:w="7"/><text x="96.5153%" y="175.50"></text></g><g><title>toy`core::hash::BuildHasher::hash_one&lt;std::hash::random::RandomState,ref$&lt;petgraph::graph_impl::NodeIndex (478 samples, 0.93%)</title><rect x="96.2866%" y="197" width="0.9269%" height="15" fill="rgb(250,160,47)" fg:x="49655" fg:w="478"/><text x="96.5366%" y="207.50"></text></g><g><title>toy`core::hash::sip::impl$5::write (107 samples, 0.21%)</title><rect x="97.0060%" y="181" width="0.2075%" height="15" fill="rgb(216,222,40)" fg:x="50026" fg:w="107"/><text x="97.2560%" y="191.50"></text></g><g><title>toy`hashbrown::raw::RawTable&lt;tuple$&lt;petgraph::graph_impl::NodeIndex&lt;u32&gt;,i32&gt;,alloc::alloc::Global&gt;::reserve_rehash&lt;tuple$&lt;petgraph::graph_impl::NodeIndex&lt;u32&gt;,i32&gt;,alloc::alloc::Global,hashbrown::map::make_hasher::closure_env$0&lt;petgraph::graph_impl::NodeIndex (1,558 samples, 3.02%)</title><rect x="94.2040%" y="213" width="3.0211%" height="15" fill="rgb(234,217,39)" fg:x="48581" fg:w="1558"/><text x="94.4540%" y="223.50">toy..</text></g><g><title>toy`petgraph::algo::astar::astar&lt;ref$&lt;petgraph::graph_impl::Graph&lt;enum2$&lt;aeg::aeg::Node&gt;,aeg::aeg::AegEdge,enum2$ (7,025 samples, 13.62%)</title><rect x="83.6358%" y="229" width="13.6223%" height="15" fill="rgb(207,178,40)" fg:x="43131" fg:w="7025"/><text x="83.8858%" y="239.50">toy`petgraph::algo::a..</text></g><g><title>toy`std::hash::random::impl$0::new::KEYS::__getit::__KEY (13 samples, 0.03%)</title><rect x="97.2329%" y="213" width="0.0252%" height="15" fill="rgb(221,136,13)" fg:x="50143" fg:w="13"/><text x="97.4829%" y="223.50"></text></g><g><title>toy`std::alloc::__default_lib_allocator::__rdl_alloc (50 samples, 0.10%)</title><rect x="97.2581%" y="229" width="0.0970%" height="15" fill="rgb(249,199,10)" fg:x="50156" fg:w="50"/><text x="97.5081%" y="239.50"></text></g><g><title>toy`aeg::aeg::AbstractEventGraph::find_critical_cycles (49,909 samples, 96.78%)</title><rect x="0.6438%" y="261" width="96.7791%" height="15" fill="rgb(249,222,13)" fg:x="332" fg:w="49909"/><text x="0.8938%" y="271.50">toy`aeg::aeg::AbstractEventGraph::find_critical_cycles</text></g><g><title>toy`aeg::critical_cycles::critical_cycles (49,909 samples, 96.78%)</title><rect x="0.6438%" y="245" width="96.7791%" height="15" fill="rgb(244,185,38)" fg:x="332" fg:w="49909"/><text x="0.8938%" y="255.50">toy`aeg::critical_cycles::critical_cycles</text></g><g><title>toy`std::alloc::__default_lib_allocator::__rdl_dealloc (35 samples, 0.07%)</title><rect x="97.3551%" y="229" width="0.0679%" height="15" fill="rgb(236,202,9)" fg:x="50206" fg:w="35"/><text x="97.6051%" y="239.50"></text></g><g><title>VCRUNTIME140`memcpy (9 samples, 0.02%)</title><rect x="98.4720%" y="197" width="0.0175%" height="15" fill="rgb(250,229,37)" fg:x="50782" fg:w="9"/><text x="98.7220%" y="207.50"></text></g><g><title>VCRUNTIME140`memmove (34 samples, 0.07%)</title><rect x="98.4894%" y="197" width="0.0659%" height="15" fill="rgb(206,174,23)" fg:x="50791" fg:w="34"/><text x="98.7394%" y="207.50"></text></g><g><title>ntdll`RtlCopyMemory (32 samples, 0.06%)</title><rect x="98.5554%" y="117" width="0.0621%" height="15" fill="rgb(211,33,43)" fg:x="50825" fg:w="32"/><text x="98.8054%" y="127.50"></text></g><g><title>toy`petgraph::graph_impl::serialization::impl$2::serialize&lt;u32,ref_mut$&lt;serde_json::ser::Serializer&lt;ref_mut$&lt;alloc::vec::Vec (497 samples, 0.96%)</title><rect x="97.6576%" y="213" width="0.9637%" height="15" fill="rgb(245,58,50)" fg:x="50362" fg:w="497"/><text x="97.9076%" y="223.50"></text></g><g><title>toy`alloc::raw_vec::impl$2::reserve::do_reserve_and_handle (34 samples, 0.07%)</title><rect x="98.5554%" y="197" width="0.0659%" height="15" fill="rgb(244,68,36)" fg:x="50825" fg:w="34"/><text x="98.8054%" y="207.50"></text></g><g><title>toy`alloc::raw_vec::finish_grow (34 samples, 0.07%)</title><rect x="98.5554%" y="181" width="0.0659%" height="15" fill="rgb(232,229,15)" fg:x="50825" fg:w="34"/><text x="98.8054%" y="191.50"></text></g><g><title>ntdll`RtlReAllocateHeap (34 samples, 0.07%)</title><rect x="98.5554%" y="165" width="0.0659%" height="15" fill="rgb(254,30,23)" fg:x="50825" fg:w="34"/><text x="98.8054%" y="175.50"></text></g><g><title>ntdll`RtlReAllocateHeap (34 samples, 0.07%)</title><rect x="98.5554%" y="149" width="0.0659%" height="15" fill="rgb(235,160,14)" fg:x="50825" fg:w="34"/><text x="98.8054%" y="159.50"></text></g><g><title>ntdll`RtlReAllocateHeap (34 samples, 0.07%)</title><rect x="98.5554%" y="133" width="0.0659%" height="15" fill="rgb(212,155,44)" fg:x="50825" fg:w="34"/><text x="98.8054%" y="143.50"></text></g><g><title>VCRUNTIME140`memmove (11 samples, 0.02%)</title><rect x="98.7318%" y="197" width="0.0213%" height="15" fill="rgb(226,2,50)" fg:x="50916" fg:w="11"/><text x="98.9818%" y="207.50"></text></g><g><title>ntdll`RtlCopyMemory (6 samples, 0.01%)</title><rect x="98.7532%" y="117" width="0.0116%" height="15" fill="rgb(234,177,6)" fg:x="50927" fg:w="6"/><text x="99.0032%" y="127.50"></text></g><g><title>toy`serde::ser::Serializer::collect_seq&lt;ref_mut$&lt;serde_json::ser::Serializer&lt;ref_mut$&lt;alloc::vec::Vec&lt;u8,alloc::alloc::Global&gt; &gt;,serde_json::ser::CompactFormatter&gt; &gt;,ref$&lt;alloc::vec::Vec (687 samples, 1.33%)</title><rect x="97.4346%" y="261" width="1.3322%" height="15" fill="rgb(217,24,9)" fg:x="50247" fg:w="687"/><text x="97.6846%" y="271.50"></text></g><g><title>toy`aeg::critical_cycles::_::impl$0::serialize&lt;ref_mut$&lt;serde_json::ser::Serializer&lt;ref_mut$&lt;alloc::vec::Vec (686 samples, 1.33%)</title><rect x="97.4365%" y="245" width="1.3302%" height="15" fill="rgb(220,13,46)" fg:x="50248" fg:w="686"/><text x="97.6865%" y="255.50"></text></g><g><title>toy`serde::ser::SerializeMap::serialize_entry&lt;enum2$&lt;serde_json::ser::Compound&lt;ref_mut$&lt;alloc::vec::Vec&lt;u8,alloc::alloc::Global&gt; &gt;,serde_json::ser::CompactFormatter&gt; &gt;,str$,alloc::vec::Vec&lt;petgraph::graph_impl::EdgeIndex (670 samples, 1.30%)</title><rect x="97.4675%" y="229" width="1.2992%" height="15" fill="rgb(239,221,27)" fg:x="50264" fg:w="670"/><text x="97.7175%" y="239.50"></text></g><g><title>toy`serde_json::ser::format_escaped_str&lt;ref_mut$&lt;alloc::vec::Vec (75 samples, 0.15%)</title><rect x="98.6213%" y="213" width="0.1454%" height="15" fill="rgb(222,198,25)" fg:x="50859" fg:w="75"/><text x="98.8713%" y="223.50"></text></g><g><title>toy`alloc::raw_vec::impl$2::reserve::do_reserve_and_handle (7 samples, 0.01%)</title><rect x="98.7532%" y="197" width="0.0136%" height="15" fill="rgb(211,99,13)" fg:x="50927" fg:w="7"/><text x="99.0032%" y="207.50"></text></g><g><title>toy`alloc::raw_vec::finish_grow (7 samples, 0.01%)</title><rect x="98.7532%" y="181" width="0.0136%" height="15" fill="rgb(232,111,31)" fg:x="50927" fg:w="7"/><text x="99.0032%" y="191.50"></text></g><g><title>ntdll`RtlReAllocateHeap (7 samples, 0.01%)</title><rect x="98.7532%" y="165" width="0.0136%" height="15" fill="rgb(245,82,37)" fg:x="50927" fg:w="7"/><text x="99.0032%" y="175.50"></text></g><g><title>ntdll`RtlReAllocateHeap (7 samples, 0.01%)</title><rect x="98.7532%" y="149" width="0.0136%" height="15" fill="rgb(227,149,46)" fg:x="50927" fg:w="7"/><text x="99.0032%" y="159.50"></text></g><g><title>ntdll`RtlReAllocateHeap (7 samples, 0.01%)</title><rect x="98.7532%" y="133" width="0.0136%" height="15" fill="rgb(218,36,50)" fg:x="50927" fg:w="7"/><text x="99.0032%" y="143.50"></text></g><g><title>toy`core::slice::memchr::memrchr (14 samples, 0.03%)</title><rect x="98.7706%" y="181" width="0.0271%" height="15" fill="rgb(226,80,48)" fg:x="50936" fg:w="14"/><text x="99.0206%" y="191.50"></text></g><g><title>KERNELBASE`GetConsoleMode (232 samples, 0.45%)</title><rect x="98.8152%" y="133" width="0.4499%" height="15" fill="rgb(238,224,15)" fg:x="50959" fg:w="232"/><text x="99.0652%" y="143.50"></text></g><g><title>KERNELBASE`GetConsoleScreenBufferInfoEx (227 samples, 0.44%)</title><rect x="98.8249%" y="117" width="0.4402%" height="15" fill="rgb(241,136,10)" fg:x="50964" fg:w="227"/><text x="99.0749%" y="127.50"></text></g><g><title>KERNELBASE`GetConsoleScreenBufferInfoEx (227 samples, 0.44%)</title><rect x="98.8249%" y="101" width="0.4402%" height="15" fill="rgb(208,32,45)" fg:x="50964" fg:w="227"/><text x="99.0749%" y="111.50"></text></g><g><title>ntdll`NtDeviceIoControlFile (222 samples, 0.43%)</title><rect x="98.8346%" y="85" width="0.4305%" height="15" fill="rgb(207,135,9)" fg:x="50969" fg:w="222"/><text x="99.0846%" y="95.50"></text></g><g><title>toy`core::str::converts::from_utf8 (22 samples, 0.04%)</title><rect x="99.2748%" y="133" width="0.0427%" height="15" fill="rgb(206,86,44)" fg:x="51196" fg:w="22"/><text x="99.5248%" y="143.50"></text></g><g><title>KERNELBASE`MultiByteToWideChar (61 samples, 0.12%)</title><rect x="99.3310%" y="117" width="0.1183%" height="15" fill="rgb(245,177,15)" fg:x="51225" fg:w="61"/><text x="99.5810%" y="127.50"></text></g><g><title>ntdll`RtlUTF8ToUnicodeN (60 samples, 0.12%)</title><rect x="99.3329%" y="101" width="0.1163%" height="15" fill="rgb(206,64,50)" fg:x="51226" fg:w="60"/><text x="99.5829%" y="111.50"></text></g><g><title>KERNELBASE`WriteConsoleW (272 samples, 0.53%)</title><rect x="99.4493%" y="117" width="0.5274%" height="15" fill="rgb(234,36,40)" fg:x="51286" fg:w="272"/><text x="99.6993%" y="127.50"></text></g><g><title>KERNELBASE`WriteConsoleW (270 samples, 0.52%)</title><rect x="99.4532%" y="101" width="0.5236%" height="15" fill="rgb(213,64,8)" fg:x="51288" fg:w="270"/><text x="99.7032%" y="111.50"></text></g><g><title>KERNELBASE`GetConsoleScreenBufferInfoEx (267 samples, 0.52%)</title><rect x="99.4590%" y="85" width="0.5177%" height="15" fill="rgb(210,75,36)" fg:x="51291" fg:w="267"/><text x="99.7090%" y="95.50"></text></g><g><title>ntdll`NtDeviceIoControlFile (258 samples, 0.50%)</title><rect x="99.4764%" y="69" width="0.5003%" height="15" fill="rgb(229,88,21)" fg:x="51300" fg:w="258"/><text x="99.7264%" y="79.50"></text></g><g><title>toy`std::io::Write::write_all (612 samples, 1.19%)</title><rect x="98.7978%" y="165" width="1.1867%" height="15" fill="rgb(252,204,47)" fg:x="50950" fg:w="612"/><text x="99.0478%" y="175.50"></text></g><g><title>toy`std::sys::windows::stdio::write (611 samples, 1.18%)</title><rect x="98.7997%" y="149" width="1.1848%" height="15" fill="rgb(208,77,27)" fg:x="50951" fg:w="611"/><text x="99.0497%" y="159.50"></text></g><g><title>toy`std::sys::windows::stdio::write_valid_utf8_to_console (344 samples, 0.67%)</title><rect x="99.3174%" y="133" width="0.6671%" height="15" fill="rgb(221,76,26)" fg:x="51218" fg:w="344"/><text x="99.5674%" y="143.50"></text></g><g><title>toy`std::io::stdio::impl$12::write_fmt (627 samples, 1.22%)</title><rect x="98.7706%" y="245" width="1.2158%" height="15" fill="rgb(225,139,18)" fg:x="50936" fg:w="627"/><text x="99.0206%" y="255.50"></text></g><g><title>toy`core::fmt::write (627 samples, 1.22%)</title><rect x="98.7706%" y="229" width="1.2158%" height="15" fill="rgb(230,137,11)" fg:x="50936" fg:w="627"/><text x="99.0206%" y="239.50"></text></g><g><title>toy`std::io::Write::write_fmt::impl$0::write_str (627 samples, 1.22%)</title><rect x="98.7706%" y="213" width="1.2158%" height="15" fill="rgb(212,28,1)" fg:x="50936" fg:w="627"/><text x="99.0206%" y="223.50"></text></g><g><title>toy`std::io::stdio::impl$13::write_all (627 samples, 1.22%)</title><rect x="98.7706%" y="197" width="1.2158%" height="15" fill="rgb(248,164,17)" fg:x="50936" fg:w="627"/><text x="99.0206%" y="207.50"></text></g><g><title>toy`std::io::buffered::bufwriter::BufWriter::write_all_cold (613 samples, 1.19%)</title><rect x="98.7978%" y="181" width="1.1887%" height="15" fill="rgb(222,171,42)" fg:x="50950" fg:w="613"/><text x="99.0478%" y="191.50"></text></g><g><title>toy`std::io::stdio::_print (628 samples, 1.22%)</title><rect x="98.7706%" y="261" width="1.2178%" height="15" fill="rgb(243,84,45)" fg:x="50936" fg:w="628"/><text x="99.0206%" y="271.50"></text></g><g><title>toy`main (51,531 samples, 99.92%)</title><rect x="0.0659%" y="341" width="99.9244%" height="15" fill="rgb(252,49,23)" fg:x="34" fg:w="51531"/><text x="0.3159%" y="351.50">toy`main</text></g><g><title>toy`std::rt::lang_start_internal (51,531 samples, 99.92%)</title><rect x="0.0659%" y="325" width="99.9244%" height="15" fill="rgb(215,19,7)" fg:x="34" fg:w="51531"/><text x="0.3159%" y="335.50">toy`std::rt::lang_start_internal</text></g><g><title>toy`core::ops::function::FnOnce::call_once&lt;std::rt::lang_start::closure_env$0&lt;tuple$&lt;&gt; &gt;,tuple$ (51,531 samples, 99.92%)</title><rect x="0.0659%" y="309" width="99.9244%" height="15" fill="rgb(238,81,41)" fg:x="34" fg:w="51531"/><text x="0.3159%" y="319.50">toy`core::ops::function::FnOnce::call_once&lt;std::rt::lang_start::closure_env$0&lt;tuple$&lt;&gt; &gt;,tuple$</text></g><g><title>toy`std::sys_common::backtrace::__rust_begin_short_backtrace&lt;void (*)(),tuple$ (51,531 samples, 99.92%)</title><rect x="0.0659%" y="293" width="99.9244%" height="15" fill="rgb(210,199,37)" fg:x="34" fg:w="51531"/><text x="0.3159%" y="303.50">toy`std::sys_common::backtrace::__rust_begin_short_backtrace&lt;void (*)(),tuple$</text></g><g><title>toy`toy::main (51,531 samples, 99.92%)</title><rect x="0.0659%" y="277" width="99.9244%" height="15" fill="rgb(244,192,49)" fg:x="34" fg:w="51531"/><text x="0.3159%" y="287.50">toy`toy::main</text></g><g><title>all (51,570 samples, 100%)</title><rect x="0.0000%" y="405" width="100.0000%" height="15" fill="rgb(226,211,11)" fg:x="0" fg:w="51570"/><text x="0.2500%" y="415.50"></text></g><g><title>ntdll`RtlUserThreadStart (51,545 samples, 99.95%)</title><rect x="0.0485%" y="389" width="99.9515%" height="15" fill="rgb(236,162,54)" fg:x="25" fg:w="51545"/><text x="0.2985%" y="399.50">ntdll`RtlUserThreadStart</text></g><g><title>KERNEL32`BaseThreadInitThunk (51,544 samples, 99.95%)</title><rect x="0.0504%" y="373" width="99.9496%" height="15" fill="rgb(220,229,9)" fg:x="26" fg:w="51544"/><text x="0.3004%" y="383.50">KERNEL32`BaseThreadInitThunk</text></g><g><title>toy`__scrt_common_main_seh (51,536 samples, 99.93%)</title><rect x="0.0659%" y="357" width="99.9341%" height="15" fill="rgb(250,87,22)" fg:x="34" fg:w="51536"/><text x="0.3159%" y="367.50">toy`__scrt_common_main_seh</text></g></svg></svg>