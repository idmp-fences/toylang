<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="598" onload="init(evt)" viewBox="0 0 1200 598" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="598" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="581.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="581.00"> </text><svg id="frames" x="10" width="1180" total_samples="5016"><g><title>ntdll`CsrClientConnectToServer (1 samples, 0.02%)</title><rect x="0.0000%" y="469" width="0.0199%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="479.50"></text></g><g><title>ntdll`RtlWaitOnAddress (1 samples, 0.02%)</title><rect x="0.0000%" y="453" width="0.0199%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="1"/><text x="0.2500%" y="463.50"></text></g><g><title>ntdll`NtCreateWorkerFactory (1 samples, 0.02%)</title><rect x="0.0000%" y="437" width="0.0199%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="1"/><text x="0.2500%" y="447.50"></text></g><g><title>ntdll`LdrInitShimEngineDynamic (1 samples, 0.02%)</title><rect x="0.0199%" y="469" width="0.0199%" height="15" fill="rgb(248,212,6)" fg:x="1" fg:w="1"/><text x="0.2699%" y="479.50"></text></g><g><title>ntdll`RtlInitCodePageTable (1 samples, 0.02%)</title><rect x="0.0199%" y="453" width="0.0199%" height="15" fill="rgb(208,68,35)" fg:x="1" fg:w="1"/><text x="0.2699%" y="463.50"></text></g><g><title>ntdll`NtOpenKey (1 samples, 0.02%)</title><rect x="0.0199%" y="437" width="0.0199%" height="15" fill="rgb(232,128,0)" fg:x="1" fg:w="1"/><text x="0.2699%" y="447.50"></text></g><g><title>ntdll`LdrpResGetMappingSize (2 samples, 0.04%)</title><rect x="0.0399%" y="357" width="0.0399%" height="15" fill="rgb(207,160,47)" fg:x="2" fg:w="2"/><text x="0.2899%" y="367.50"></text></g><g><title>ntdll`LdrGetDllHandleByMapping (3 samples, 0.06%)</title><rect x="0.0399%" y="421" width="0.0598%" height="15" fill="rgb(228,23,34)" fg:x="2" fg:w="3"/><text x="0.2899%" y="431.50"></text></g><g><title>ntdll`LdrAddRefDll (3 samples, 0.06%)</title><rect x="0.0399%" y="405" width="0.0598%" height="15" fill="rgb(218,30,26)" fg:x="2" fg:w="3"/><text x="0.2899%" y="415.50"></text></g><g><title>ntdll`LdrControlFlowGuardEnforced (3 samples, 0.06%)</title><rect x="0.0399%" y="389" width="0.0598%" height="15" fill="rgb(220,122,19)" fg:x="2" fg:w="3"/><text x="0.2899%" y="399.50"></text></g><g><title>ntdll`RtlImageNtHeaderEx (3 samples, 0.06%)</title><rect x="0.0399%" y="373" width="0.0598%" height="15" fill="rgb(250,228,42)" fg:x="2" fg:w="3"/><text x="0.2899%" y="383.50"></text></g><g><title>ntdll`RtlImageNtHeaderEx (1 samples, 0.02%)</title><rect x="0.0797%" y="357" width="0.0199%" height="15" fill="rgb(240,193,28)" fg:x="4" fg:w="1"/><text x="0.3297%" y="367.50"></text></g><g><title>ntdll`RtlAnsiStringToUnicodeString (1 samples, 0.02%)</title><rect x="0.0797%" y="341" width="0.0199%" height="15" fill="rgb(216,20,37)" fg:x="4" fg:w="1"/><text x="0.3297%" y="351.50"></text></g><g><title>ntdll`RtlCopyMemory (1 samples, 0.02%)</title><rect x="0.0797%" y="325" width="0.0199%" height="15" fill="rgb(206,188,39)" fg:x="4" fg:w="1"/><text x="0.3297%" y="335.50"></text></g><g><title>ntdll`LdrGetDllHandleEx (1 samples, 0.02%)</title><rect x="0.0997%" y="421" width="0.0199%" height="15" fill="rgb(217,207,13)" fg:x="5" fg:w="1"/><text x="0.3497%" y="431.50"></text></g><g><title>ntdll`RtlQueryPerformanceCounter (1 samples, 0.02%)</title><rect x="0.0997%" y="405" width="0.0199%" height="15" fill="rgb(231,73,38)" fg:x="5" fg:w="1"/><text x="0.3497%" y="415.50"></text></g><g><title>ntdll`LdrpResGetMappingSize (1 samples, 0.02%)</title><rect x="0.0997%" y="389" width="0.0199%" height="15" fill="rgb(225,20,46)" fg:x="5" fg:w="1"/><text x="0.3497%" y="399.50"></text></g><g><title>KernelBase`GetCPHashNode (1 samples, 0.02%)</title><rect x="0.1196%" y="309" width="0.0199%" height="15" fill="rgb(210,31,41)" fg:x="6" fg:w="1"/><text x="0.3696%" y="319.50"></text></g><g><title>KernelBase`GetMUIStringFromCache (1 samples, 0.02%)</title><rect x="0.1196%" y="293" width="0.0199%" height="15" fill="rgb(221,200,47)" fg:x="6" fg:w="1"/><text x="0.3696%" y="303.50"></text></g><g><title>KernelBase`GetCPHashNode (1 samples, 0.02%)</title><rect x="0.1196%" y="277" width="0.0199%" height="15" fill="rgb(226,26,5)" fg:x="6" fg:w="1"/><text x="0.3696%" y="287.50"></text></g><g><title>ntdll`ZwGetNlsSectionPtr (1 samples, 0.02%)</title><rect x="0.1196%" y="261" width="0.0199%" height="15" fill="rgb(249,33,26)" fg:x="6" fg:w="1"/><text x="0.3696%" y="271.50"></text></g><g><title>KernelBase`TestCreate (1 samples, 0.02%)</title><rect x="0.1396%" y="309" width="0.0199%" height="15" fill="rgb(235,183,28)" fg:x="7" fg:w="1"/><text x="0.3896%" y="319.50"></text></g><g><title>KernelBase`time (1 samples, 0.02%)</title><rect x="0.1396%" y="293" width="0.0199%" height="15" fill="rgb(221,5,38)" fg:x="7" fg:w="1"/><text x="0.3896%" y="303.50"></text></g><g><title>KernelBase`time (1 samples, 0.02%)</title><rect x="0.1396%" y="277" width="0.0199%" height="15" fill="rgb(247,18,42)" fg:x="7" fg:w="1"/><text x="0.3896%" y="287.50"></text></g><g><title>KernelBase`time (1 samples, 0.02%)</title><rect x="0.1396%" y="261" width="0.0199%" height="15" fill="rgb(241,131,45)" fg:x="7" fg:w="1"/><text x="0.3896%" y="271.50"></text></g><g><title>KernelBase`time (1 samples, 0.02%)</title><rect x="0.1396%" y="245" width="0.0199%" height="15" fill="rgb(249,31,29)" fg:x="7" fg:w="1"/><text x="0.3896%" y="255.50"></text></g><g><title>KernelBase`GetPackageStatusForUser (1 samples, 0.02%)</title><rect x="0.1396%" y="229" width="0.0199%" height="15" fill="rgb(225,111,53)" fg:x="7" fg:w="1"/><text x="0.3896%" y="239.50"></text></g><g><title>KernelBase`GetPackageStatusForUser (1 samples, 0.02%)</title><rect x="0.1396%" y="213" width="0.0199%" height="15" fill="rgb(238,160,17)" fg:x="7" fg:w="1"/><text x="0.3896%" y="223.50"></text></g><g><title>KernelBase`EnumSystemLocalesA (1 samples, 0.02%)</title><rect x="0.1396%" y="197" width="0.0199%" height="15" fill="rgb(214,148,48)" fg:x="7" fg:w="1"/><text x="0.3896%" y="207.50"></text></g><g><title>ntdll`LdrLoadDll (7 samples, 0.14%)</title><rect x="0.0399%" y="469" width="0.1396%" height="15" fill="rgb(232,36,49)" fg:x="2" fg:w="7"/><text x="0.2899%" y="479.50"></text></g><g><title>ntdll`RtlUnicodeToCustomCPN (7 samples, 0.14%)</title><rect x="0.0399%" y="453" width="0.1396%" height="15" fill="rgb(209,103,24)" fg:x="2" fg:w="7"/><text x="0.2899%" y="463.50"></text></g><g><title>ntdll`RtlImageRvaToSection (7 samples, 0.14%)</title><rect x="0.0399%" y="437" width="0.1396%" height="15" fill="rgb(229,88,8)" fg:x="2" fg:w="7"/><text x="0.2899%" y="447.50"></text></g><g><title>ntdll`RtlCopyUnicodeString (3 samples, 0.06%)</title><rect x="0.1196%" y="421" width="0.0598%" height="15" fill="rgb(213,181,19)" fg:x="6" fg:w="3"/><text x="0.3696%" y="431.50"></text></g><g><title>ntdll`RtlEnumerateEntryHashTable (3 samples, 0.06%)</title><rect x="0.1196%" y="405" width="0.0598%" height="15" fill="rgb(254,191,54)" fg:x="6" fg:w="3"/><text x="0.3696%" y="415.50"></text></g><g><title>ntdll`RtlEnumerateEntryHashTable (3 samples, 0.06%)</title><rect x="0.1196%" y="389" width="0.0598%" height="15" fill="rgb(241,83,37)" fg:x="6" fg:w="3"/><text x="0.3696%" y="399.50"></text></g><g><title>ntdll`RtlEnumerateEntryHashTable (3 samples, 0.06%)</title><rect x="0.1196%" y="373" width="0.0598%" height="15" fill="rgb(233,36,39)" fg:x="6" fg:w="3"/><text x="0.3696%" y="383.50"></text></g><g><title>ntdll`RtlActivateActivationContextUnsafeFast (3 samples, 0.06%)</title><rect x="0.1196%" y="357" width="0.0598%" height="15" fill="rgb(226,3,54)" fg:x="6" fg:w="3"/><text x="0.3696%" y="367.50"></text></g><g><title>KernelBase`TestCreate (3 samples, 0.06%)</title><rect x="0.1196%" y="341" width="0.0598%" height="15" fill="rgb(245,192,40)" fg:x="6" fg:w="3"/><text x="0.3696%" y="351.50"></text></g><g><title>KernelBase`TestCreate (3 samples, 0.06%)</title><rect x="0.1196%" y="325" width="0.0598%" height="15" fill="rgb(238,167,29)" fg:x="6" fg:w="3"/><text x="0.3696%" y="335.50"></text></g><g><title>KernelBase`time (1 samples, 0.02%)</title><rect x="0.1595%" y="309" width="0.0199%" height="15" fill="rgb(232,182,51)" fg:x="8" fg:w="1"/><text x="0.4095%" y="319.50"></text></g><g><title>KernelBase`GetCPHashNode (1 samples, 0.02%)</title><rect x="0.1595%" y="293" width="0.0199%" height="15" fill="rgb(231,60,39)" fg:x="8" fg:w="1"/><text x="0.4095%" y="303.50"></text></g><g><title>KernelBase`TestCreate (1 samples, 0.02%)</title><rect x="0.1595%" y="277" width="0.0199%" height="15" fill="rgb(208,69,12)" fg:x="8" fg:w="1"/><text x="0.4095%" y="287.50"></text></g><g><title>KernelBase`GetCurrentProcessId (1 samples, 0.02%)</title><rect x="0.1595%" y="261" width="0.0199%" height="15" fill="rgb(235,93,37)" fg:x="8" fg:w="1"/><text x="0.4095%" y="271.50"></text></g><g><title>KernelBase`GetAdjustObjectAttributesForPrivateNamespaceRoutine (1 samples, 0.02%)</title><rect x="0.1595%" y="245" width="0.0199%" height="15" fill="rgb(213,116,39)" fg:x="8" fg:w="1"/><text x="0.4095%" y="255.50"></text></g><g><title>KernelBase`GetAdjustObjectAttributesForPrivateNamespaceRoutine (1 samples, 0.02%)</title><rect x="0.1595%" y="229" width="0.0199%" height="15" fill="rgb(222,207,29)" fg:x="8" fg:w="1"/><text x="0.4095%" y="239.50"></text></g><g><title>KernelBase`OpenSemaphoreW (1 samples, 0.02%)</title><rect x="0.1595%" y="213" width="0.0199%" height="15" fill="rgb(206,96,30)" fg:x="8" fg:w="1"/><text x="0.4095%" y="223.50"></text></g><g><title>ntdll`ZwOpenSemaphore (1 samples, 0.02%)</title><rect x="0.1595%" y="197" width="0.0199%" height="15" fill="rgb(218,138,4)" fg:x="8" fg:w="1"/><text x="0.4095%" y="207.50"></text></g><g><title>ntdll`RtlCreateEnvironmentEx (1 samples, 0.02%)</title><rect x="0.1794%" y="469" width="0.0199%" height="15" fill="rgb(250,191,14)" fg:x="9" fg:w="1"/><text x="0.4294%" y="479.50"></text></g><g><title>ntdll`RtlCreateEnvironmentEx (1 samples, 0.02%)</title><rect x="0.1794%" y="453" width="0.0199%" height="15" fill="rgb(239,60,40)" fg:x="9" fg:w="1"/><text x="0.4294%" y="463.50"></text></g><g><title>ntdll`RtlQueryEnvironmentVariable_U (1 samples, 0.02%)</title><rect x="0.1794%" y="437" width="0.0199%" height="15" fill="rgb(206,27,48)" fg:x="9" fg:w="1"/><text x="0.4294%" y="447.50"></text></g><g><title>ntdll`RtlQueryEnvironmentVariable (1 samples, 0.02%)</title><rect x="0.1794%" y="421" width="0.0199%" height="15" fill="rgb(225,35,8)" fg:x="9" fg:w="1"/><text x="0.4294%" y="431.50"></text></g><g><title>ntdll`RtlCreateEnvironmentEx (1 samples, 0.02%)</title><rect x="0.1794%" y="405" width="0.0199%" height="15" fill="rgb(250,213,24)" fg:x="9" fg:w="1"/><text x="0.4294%" y="415.50"></text></g><g><title>ntdll`RtlCreateEnvironmentEx (1 samples, 0.02%)</title><rect x="0.1794%" y="389" width="0.0199%" height="15" fill="rgb(247,123,22)" fg:x="9" fg:w="1"/><text x="0.4294%" y="399.50"></text></g><g><title>ntdll`RtlAllocateHeap (1 samples, 0.02%)</title><rect x="0.1794%" y="373" width="0.0199%" height="15" fill="rgb(231,138,38)" fg:x="9" fg:w="1"/><text x="0.4294%" y="383.50"></text></g><g><title>ntdll`RtlAllocateHeap (1 samples, 0.02%)</title><rect x="0.1794%" y="357" width="0.0199%" height="15" fill="rgb(231,145,46)" fg:x="9" fg:w="1"/><text x="0.4294%" y="367.50"></text></g><g><title>ntdll`RtlGetNtProductType (1 samples, 0.02%)</title><rect x="0.1794%" y="341" width="0.0199%" height="15" fill="rgb(251,118,11)" fg:x="9" fg:w="1"/><text x="0.4294%" y="351.50"></text></g><g><title>ntdll`RtlDestroyHeap (1 samples, 0.02%)</title><rect x="0.1794%" y="325" width="0.0199%" height="15" fill="rgb(217,147,25)" fg:x="9" fg:w="1"/><text x="0.4294%" y="335.50"></text></g><g><title>ntdll`RtlProtectHeap (1 samples, 0.02%)</title><rect x="0.1794%" y="309" width="0.0199%" height="15" fill="rgb(247,81,37)" fg:x="9" fg:w="1"/><text x="0.4294%" y="319.50"></text></g><g><title>ntdll`RtlQueryResourcePolicy (1 samples, 0.02%)</title><rect x="0.1794%" y="293" width="0.0199%" height="15" fill="rgb(209,12,38)" fg:x="9" fg:w="1"/><text x="0.4294%" y="303.50"></text></g><g><title>ntdll`RtlRunOnceExecuteOnce (1 samples, 0.02%)</title><rect x="0.1794%" y="277" width="0.0199%" height="15" fill="rgb(227,1,9)" fg:x="9" fg:w="1"/><text x="0.4294%" y="287.50"></text></g><g><title>ntdll`RtlGetGroupSecurityDescriptor (1 samples, 0.02%)</title><rect x="0.1794%" y="261" width="0.0199%" height="15" fill="rgb(248,47,43)" fg:x="9" fg:w="1"/><text x="0.4294%" y="271.50"></text></g><g><title>ntdll`NtOpenKey (1 samples, 0.02%)</title><rect x="0.1794%" y="245" width="0.0199%" height="15" fill="rgb(221,10,30)" fg:x="9" fg:w="1"/><text x="0.4294%" y="255.50"></text></g><g><title>advapi32`RegDeleteKeyExW (1 samples, 0.02%)</title><rect x="0.1994%" y="405" width="0.0199%" height="15" fill="rgb(210,229,1)" fg:x="10" fg:w="1"/><text x="0.4494%" y="415.50"></text></g><g><title>advapi32`RegDeleteKeyExW (1 samples, 0.02%)</title><rect x="0.1994%" y="389" width="0.0199%" height="15" fill="rgb(222,148,37)" fg:x="10" fg:w="1"/><text x="0.4494%" y="399.50"></text></g><g><title>advapi32`GetUserNameW (1 samples, 0.02%)</title><rect x="0.1994%" y="373" width="0.0199%" height="15" fill="rgb(234,67,33)" fg:x="10" fg:w="1"/><text x="0.4494%" y="383.50"></text></g><g><title>ntdll`RtlActivateActivationContextUnsafeFast (2 samples, 0.04%)</title><rect x="0.1994%" y="421" width="0.0399%" height="15" fill="rgb(247,98,35)" fg:x="10" fg:w="2"/><text x="0.4494%" y="431.50"></text></g><g><title>bcrypt`BCryptRegisterConfigChangeNotify (1 samples, 0.02%)</title><rect x="0.2193%" y="405" width="0.0199%" height="15" fill="rgb(247,138,52)" fg:x="11" fg:w="1"/><text x="0.4693%" y="415.50"></text></g><g><title>bcrypt`BCryptDestroyHash (1 samples, 0.02%)</title><rect x="0.2193%" y="389" width="0.0199%" height="15" fill="rgb(213,79,30)" fg:x="11" fg:w="1"/><text x="0.4693%" y="399.50"></text></g><g><title>bcrypt`BCryptDestroyHash (1 samples, 0.02%)</title><rect x="0.2193%" y="373" width="0.0199%" height="15" fill="rgb(246,177,23)" fg:x="11" fg:w="1"/><text x="0.4693%" y="383.50"></text></g><g><title>bcrypt`BCryptDestroyHash (1 samples, 0.02%)</title><rect x="0.2193%" y="357" width="0.0199%" height="15" fill="rgb(230,62,27)" fg:x="11" fg:w="1"/><text x="0.4693%" y="367.50"></text></g><g><title>bcrypt`BCryptOpenAlgorithmProvider (1 samples, 0.02%)</title><rect x="0.2193%" y="341" width="0.0199%" height="15" fill="rgb(216,154,8)" fg:x="11" fg:w="1"/><text x="0.4693%" y="351.50"></text></g><g><title>ntdll`NtDeviceIoControlFile (1 samples, 0.02%)</title><rect x="0.2193%" y="325" width="0.0199%" height="15" fill="rgb(244,35,45)" fg:x="11" fg:w="1"/><text x="0.4693%" y="335.50"></text></g><g><title>msvcrt`wfindnexti64 (1 samples, 0.02%)</title><rect x="0.2392%" y="389" width="0.0199%" height="15" fill="rgb(251,115,12)" fg:x="12" fg:w="1"/><text x="0.4892%" y="399.50"></text></g><g><title>msvcrt`write (1 samples, 0.02%)</title><rect x="0.2392%" y="373" width="0.0199%" height="15" fill="rgb(240,54,50)" fg:x="12" fg:w="1"/><text x="0.4892%" y="383.50"></text></g><g><title>msvcrt`setmbcp (1 samples, 0.02%)</title><rect x="0.2392%" y="357" width="0.0199%" height="15" fill="rgb(233,84,52)" fg:x="12" fg:w="1"/><text x="0.4892%" y="367.50"></text></g><g><title>msvcrt`setmbcp (1 samples, 0.02%)</title><rect x="0.2392%" y="341" width="0.0199%" height="15" fill="rgb(207,117,47)" fg:x="12" fg:w="1"/><text x="0.4892%" y="351.50"></text></g><g><title>msvcrt`write (1 samples, 0.02%)</title><rect x="0.2392%" y="325" width="0.0199%" height="15" fill="rgb(249,43,39)" fg:x="12" fg:w="1"/><text x="0.4892%" y="335.50"></text></g><g><title>msvcrt`strerror_s (1 samples, 0.02%)</title><rect x="0.2392%" y="309" width="0.0199%" height="15" fill="rgb(209,38,44)" fg:x="12" fg:w="1"/><text x="0.4892%" y="319.50"></text></g><g><title>msvcrt`strerror_s (1 samples, 0.02%)</title><rect x="0.2392%" y="293" width="0.0199%" height="15" fill="rgb(236,212,23)" fg:x="12" fg:w="1"/><text x="0.4892%" y="303.50"></text></g><g><title>KernelBase`MultiByteToWideChar (1 samples, 0.02%)</title><rect x="0.2392%" y="277" width="0.0199%" height="15" fill="rgb(242,79,21)" fg:x="12" fg:w="1"/><text x="0.4892%" y="287.50"></text></g><g><title>ntdll`RtlEnumerateEntryHashTable (4 samples, 0.08%)</title><rect x="0.1994%" y="469" width="0.0797%" height="15" fill="rgb(211,96,35)" fg:x="10" fg:w="4"/><text x="0.4494%" y="479.50"></text></g><g><title>ntdll`RtlEnumerateEntryHashTable (4 samples, 0.08%)</title><rect x="0.1994%" y="453" width="0.0797%" height="15" fill="rgb(253,215,40)" fg:x="10" fg:w="4"/><text x="0.4494%" y="463.50"></text></g><g><title>ntdll`RtlEnumerateEntryHashTable (4 samples, 0.08%)</title><rect x="0.1994%" y="437" width="0.0797%" height="15" fill="rgb(211,81,21)" fg:x="10" fg:w="4"/><text x="0.4494%" y="447.50"></text></g><g><title>ntdll`RtlEnumerateEntryHashTable (2 samples, 0.04%)</title><rect x="0.2392%" y="421" width="0.0399%" height="15" fill="rgb(208,190,38)" fg:x="12" fg:w="2"/><text x="0.4892%" y="431.50"></text></g><g><title>ntdll`RtlActivateActivationContextUnsafeFast (2 samples, 0.04%)</title><rect x="0.2392%" y="405" width="0.0399%" height="15" fill="rgb(235,213,38)" fg:x="12" fg:w="2"/><text x="0.4892%" y="415.50"></text></g><g><title>ucrtbase`free_base (1 samples, 0.02%)</title><rect x="0.2592%" y="389" width="0.0199%" height="15" fill="rgb(237,122,38)" fg:x="13" fg:w="1"/><text x="0.5092%" y="399.50"></text></g><g><title>ucrtbase`free_base (1 samples, 0.02%)</title><rect x="0.2592%" y="373" width="0.0199%" height="15" fill="rgb(244,218,35)" fg:x="13" fg:w="1"/><text x="0.5092%" y="383.50"></text></g><g><title>ucrtbase`initialize_narrow_environment (1 samples, 0.02%)</title><rect x="0.2592%" y="357" width="0.0199%" height="15" fill="rgb(240,68,47)" fg:x="13" fg:w="1"/><text x="0.5092%" y="367.50"></text></g><g><title>ucrtbase`initialize_narrow_environment (1 samples, 0.02%)</title><rect x="0.2592%" y="341" width="0.0199%" height="15" fill="rgb(210,16,53)" fg:x="13" fg:w="1"/><text x="0.5092%" y="351.50"></text></g><g><title>ucrtbase`aligned_free (1 samples, 0.02%)</title><rect x="0.2592%" y="325" width="0.0199%" height="15" fill="rgb(235,124,12)" fg:x="13" fg:w="1"/><text x="0.5092%" y="335.50"></text></g><g><title>ucrtbase`calloc_base (1 samples, 0.02%)</title><rect x="0.2592%" y="309" width="0.0199%" height="15" fill="rgb(224,169,11)" fg:x="13" fg:w="1"/><text x="0.5092%" y="319.50"></text></g><g><title>ntdll`RtlAllocateHeap (1 samples, 0.02%)</title><rect x="0.2592%" y="293" width="0.0199%" height="15" fill="rgb(250,166,2)" fg:x="13" fg:w="1"/><text x="0.5092%" y="303.50"></text></g><g><title>ntdll`RtlAllocateHeap (1 samples, 0.02%)</title><rect x="0.2592%" y="277" width="0.0199%" height="15" fill="rgb(242,216,29)" fg:x="13" fg:w="1"/><text x="0.5092%" y="287.50"></text></g><g><title>ntdll`RtlGetCurrentDirectory_U (1 samples, 0.02%)</title><rect x="0.2791%" y="469" width="0.0199%" height="15" fill="rgb(230,116,27)" fg:x="14" fg:w="1"/><text x="0.5291%" y="479.50"></text></g><g><title>ntdll`RtlGetCurrentDirectory_U (1 samples, 0.02%)</title><rect x="0.2791%" y="453" width="0.0199%" height="15" fill="rgb(228,99,48)" fg:x="14" fg:w="1"/><text x="0.5291%" y="463.50"></text></g><g><title>ntdll`NtOpenFile (1 samples, 0.02%)</title><rect x="0.2791%" y="437" width="0.0199%" height="15" fill="rgb(253,11,6)" fg:x="14" fg:w="1"/><text x="0.5291%" y="447.50"></text></g><g><title>ntdll`RtlAddressInSectionTable (1 samples, 0.02%)</title><rect x="0.2990%" y="389" width="0.0199%" height="15" fill="rgb(247,143,39)" fg:x="15" fg:w="1"/><text x="0.5490%" y="399.50"></text></g><g><title>ntdll`RtlIsProcessorFeaturePresent (1 samples, 0.02%)</title><rect x="0.2990%" y="373" width="0.0199%" height="15" fill="rgb(236,97,10)" fg:x="15" fg:w="1"/><text x="0.5490%" y="383.50"></text></g><g><title>ntdll`RtlReleasePath (1 samples, 0.02%)</title><rect x="0.2990%" y="357" width="0.0199%" height="15" fill="rgb(233,208,19)" fg:x="15" fg:w="1"/><text x="0.5490%" y="367.50"></text></g><g><title>ntdll`RtlReleasePath (1 samples, 0.02%)</title><rect x="0.2990%" y="341" width="0.0199%" height="15" fill="rgb(216,164,2)" fg:x="15" fg:w="1"/><text x="0.5490%" y="351.50"></text></g><g><title>ntdll`NtProtectVirtualMemory (1 samples, 0.02%)</title><rect x="0.2990%" y="325" width="0.0199%" height="15" fill="rgb(220,129,5)" fg:x="15" fg:w="1"/><text x="0.5490%" y="335.50"></text></g><g><title>ntdll`RtlAddressInSectionTable (1 samples, 0.02%)</title><rect x="0.3190%" y="309" width="0.0199%" height="15" fill="rgb(242,17,10)" fg:x="16" fg:w="1"/><text x="0.5690%" y="319.50"></text></g><g><title>ntdll`RtlIsProcessorFeaturePresent (1 samples, 0.02%)</title><rect x="0.3190%" y="293" width="0.0199%" height="15" fill="rgb(242,107,0)" fg:x="16" fg:w="1"/><text x="0.5690%" y="303.50"></text></g><g><title>ntdll`RtlReleasePath (1 samples, 0.02%)</title><rect x="0.3190%" y="277" width="0.0199%" height="15" fill="rgb(251,28,31)" fg:x="16" fg:w="1"/><text x="0.5690%" y="287.50"></text></g><g><title>ntdll`RtlReleasePath (1 samples, 0.02%)</title><rect x="0.3190%" y="261" width="0.0199%" height="15" fill="rgb(233,223,10)" fg:x="16" fg:w="1"/><text x="0.5690%" y="271.50"></text></g><g><title>ntdll`NtProtectVirtualMemory (1 samples, 0.02%)</title><rect x="0.3190%" y="245" width="0.0199%" height="15" fill="rgb(215,21,27)" fg:x="16" fg:w="1"/><text x="0.5690%" y="255.50"></text></g><g><title>ntdll`RtlImageNtHeaderEx (2 samples, 0.04%)</title><rect x="0.3190%" y="373" width="0.0399%" height="15" fill="rgb(232,23,21)" fg:x="16" fg:w="2"/><text x="0.5690%" y="383.50"></text></g><g><title>ntdll`RtlAnsiStringToUnicodeString (2 samples, 0.04%)</title><rect x="0.3190%" y="357" width="0.0399%" height="15" fill="rgb(244,5,23)" fg:x="16" fg:w="2"/><text x="0.5690%" y="367.50"></text></g><g><title>ntdll`LdrAddRefDll (2 samples, 0.04%)</title><rect x="0.3190%" y="341" width="0.0399%" height="15" fill="rgb(226,81,46)" fg:x="16" fg:w="2"/><text x="0.5690%" y="351.50"></text></g><g><title>ntdll`LdrControlFlowGuardEnforced (2 samples, 0.04%)</title><rect x="0.3190%" y="325" width="0.0399%" height="15" fill="rgb(247,70,30)" fg:x="16" fg:w="2"/><text x="0.5690%" y="335.50"></text></g><g><title>ntdll`ZwOpenSection (1 samples, 0.02%)</title><rect x="0.3389%" y="309" width="0.0199%" height="15" fill="rgb(212,68,19)" fg:x="17" fg:w="1"/><text x="0.5889%" y="319.50"></text></g><g><title>ntdll`RtlImageNtHeaderEx (4 samples, 0.08%)</title><rect x="0.2990%" y="469" width="0.0797%" height="15" fill="rgb(240,187,13)" fg:x="15" fg:w="4"/><text x="0.5490%" y="479.50"></text></g><g><title>ntdll`RtlImageNtHeaderEx (4 samples, 0.08%)</title><rect x="0.2990%" y="453" width="0.0797%" height="15" fill="rgb(223,113,26)" fg:x="15" fg:w="4"/><text x="0.5490%" y="463.50"></text></g><g><title>ntdll`RtlAnsiStringToUnicodeString (4 samples, 0.08%)</title><rect x="0.2990%" y="437" width="0.0797%" height="15" fill="rgb(206,192,2)" fg:x="15" fg:w="4"/><text x="0.5490%" y="447.50"></text></g><g><title>ntdll`LdrAddRefDll (4 samples, 0.08%)</title><rect x="0.2990%" y="421" width="0.0797%" height="15" fill="rgb(241,108,4)" fg:x="15" fg:w="4"/><text x="0.5490%" y="431.50"></text></g><g><title>ntdll`LdrControlFlowGuardEnforced (4 samples, 0.08%)</title><rect x="0.2990%" y="405" width="0.0797%" height="15" fill="rgb(247,173,49)" fg:x="15" fg:w="4"/><text x="0.5490%" y="415.50"></text></g><g><title>ntdll`RtlImageNtHeaderEx (3 samples, 0.06%)</title><rect x="0.3190%" y="389" width="0.0598%" height="15" fill="rgb(224,114,35)" fg:x="16" fg:w="3"/><text x="0.5690%" y="399.50"></text></g><g><title>ntdll`RtlInterlockedFlushSList (1 samples, 0.02%)</title><rect x="0.3589%" y="373" width="0.0199%" height="15" fill="rgb(245,159,27)" fg:x="18" fg:w="1"/><text x="0.6089%" y="383.50"></text></g><g><title>ntdll`TpPostWork (1 samples, 0.02%)</title><rect x="0.3589%" y="357" width="0.0199%" height="15" fill="rgb(245,172,44)" fg:x="18" fg:w="1"/><text x="0.6089%" y="367.50"></text></g><g><title>ntdll`TpPostWork (1 samples, 0.02%)</title><rect x="0.3589%" y="341" width="0.0199%" height="15" fill="rgb(236,23,11)" fg:x="18" fg:w="1"/><text x="0.6089%" y="351.50"></text></g><g><title>ntdll`ZwReleaseWorkerFactoryWorker (1 samples, 0.02%)</title><rect x="0.3589%" y="325" width="0.0199%" height="15" fill="rgb(205,117,38)" fg:x="18" fg:w="1"/><text x="0.6089%" y="335.50"></text></g><g><title>ntdll`RtlNotifyFeatureUsage (1 samples, 0.02%)</title><rect x="0.3788%" y="469" width="0.0199%" height="15" fill="rgb(237,72,25)" fg:x="19" fg:w="1"/><text x="0.6288%" y="479.50"></text></g><g><title>ntdll`_misaligned_access (1 samples, 0.02%)</title><rect x="0.3788%" y="453" width="0.0199%" height="15" fill="rgb(244,70,9)" fg:x="19" fg:w="1"/><text x="0.6288%" y="463.50"></text></g><g><title>ntdll`RtlNotifyFeatureUsage (1 samples, 0.02%)</title><rect x="0.3788%" y="437" width="0.0199%" height="15" fill="rgb(217,125,39)" fg:x="19" fg:w="1"/><text x="0.6288%" y="447.50"></text></g><g><title>ntdll`RtlTryEnterCriticalSection (1 samples, 0.02%)</title><rect x="0.3788%" y="421" width="0.0199%" height="15" fill="rgb(235,36,10)" fg:x="19" fg:w="1"/><text x="0.6288%" y="431.50"></text></g><g><title>ntdll`NtAllocateVirtualMemoryEx (1 samples, 0.02%)</title><rect x="0.3788%" y="405" width="0.0199%" height="15" fill="rgb(251,123,47)" fg:x="19" fg:w="1"/><text x="0.6288%" y="415.50"></text></g><g><title>ntdll`LdrInitializeThunk (21 samples, 0.42%)</title><rect x="0.0000%" y="533" width="0.4187%" height="15" fill="rgb(221,13,13)" fg:x="0" fg:w="21"/><text x="0.2500%" y="543.50"></text></g><g><title>ntdll`LdrInitializeThunk (21 samples, 0.42%)</title><rect x="0.0000%" y="517" width="0.4187%" height="15" fill="rgb(238,131,9)" fg:x="0" fg:w="21"/><text x="0.2500%" y="527.50"></text></g><g><title>ntdll`EtwLogTraceEvent (21 samples, 0.42%)</title><rect x="0.0000%" y="501" width="0.4187%" height="15" fill="rgb(211,50,8)" fg:x="0" fg:w="21"/><text x="0.2500%" y="511.50"></text></g><g><title>ntdll`LdrInitShimEngineDynamic (21 samples, 0.42%)</title><rect x="0.0000%" y="485" width="0.4187%" height="15" fill="rgb(245,182,24)" fg:x="0" fg:w="21"/><text x="0.2500%" y="495.50"></text></g><g><title>ntdll`RtlUnicodeToMultiByteN (1 samples, 0.02%)</title><rect x="0.3987%" y="469" width="0.0199%" height="15" fill="rgb(242,14,37)" fg:x="20" fg:w="1"/><text x="0.6487%" y="479.50"></text></g><g><title>ntdll`RtlAddressInSectionTable (1 samples, 0.02%)</title><rect x="0.3987%" y="453" width="0.0199%" height="15" fill="rgb(246,228,12)" fg:x="20" fg:w="1"/><text x="0.6487%" y="463.50"></text></g><g><title>ntdll`LdrResolveDelayLoadedAPI (1 samples, 0.02%)</title><rect x="0.3987%" y="437" width="0.0199%" height="15" fill="rgb(213,55,15)" fg:x="20" fg:w="1"/><text x="0.6487%" y="447.50"></text></g><g><title>ntdll`LdrpResGetMappingSize (1 samples, 0.02%)</title><rect x="0.3987%" y="421" width="0.0199%" height="15" fill="rgb(209,9,3)" fg:x="20" fg:w="1"/><text x="0.6487%" y="431.50"></text></g><g><title>ntdll`RtlWakeConditionVariable (1 samples, 0.02%)</title><rect x="0.3987%" y="405" width="0.0199%" height="15" fill="rgb(230,59,30)" fg:x="20" fg:w="1"/><text x="0.6487%" y="415.50"></text></g><g><title>ntdll`LdrpResGetMappingSize (2 samples, 0.04%)</title><rect x="0.4386%" y="437" width="0.0399%" height="15" fill="rgb(209,121,21)" fg:x="22" fg:w="2"/><text x="0.6886%" y="447.50"></text></g><g><title>ntdll`RtlImageNtHeaderEx (1 samples, 0.02%)</title><rect x="0.4585%" y="421" width="0.0199%" height="15" fill="rgb(220,109,13)" fg:x="23" fg:w="1"/><text x="0.7085%" y="431.50"></text></g><g><title>ntdll`RtlAnsiStringToUnicodeString (1 samples, 0.02%)</title><rect x="0.4585%" y="405" width="0.0199%" height="15" fill="rgb(232,18,1)" fg:x="23" fg:w="1"/><text x="0.7085%" y="415.50"></text></g><g><title>ntdll`LdrGetDllHandleByMapping (2 samples, 0.04%)</title><rect x="0.4785%" y="421" width="0.0399%" height="15" fill="rgb(215,41,42)" fg:x="24" fg:w="2"/><text x="0.7285%" y="431.50"></text></g><g><title>ntdll`LdrLoadDll (2 samples, 0.04%)</title><rect x="0.4785%" y="405" width="0.0399%" height="15" fill="rgb(224,123,36)" fg:x="24" fg:w="2"/><text x="0.7285%" y="415.50"></text></g><g><title>ntdll`RtlAddressInSectionTable (2 samples, 0.04%)</title><rect x="0.4785%" y="389" width="0.0399%" height="15" fill="rgb(240,125,3)" fg:x="24" fg:w="2"/><text x="0.7285%" y="399.50"></text></g><g><title>ntdll`ZwQueryAttributesFile (2 samples, 0.04%)</title><rect x="0.4785%" y="373" width="0.0399%" height="15" fill="rgb(205,98,50)" fg:x="24" fg:w="2"/><text x="0.7285%" y="383.50"></text></g><g><title>ntdll`LdrControlFlowGuardEnforced (1 samples, 0.02%)</title><rect x="0.5183%" y="389" width="0.0199%" height="15" fill="rgb(205,185,37)" fg:x="26" fg:w="1"/><text x="0.7683%" y="399.50"></text></g><g><title>ntdll`LdrControlFlowGuardEnforced (1 samples, 0.02%)</title><rect x="0.5183%" y="373" width="0.0199%" height="15" fill="rgb(238,207,15)" fg:x="26" fg:w="1"/><text x="0.7683%" y="383.50"></text></g><g><title>ntdll`NtMapViewOfSection (1 samples, 0.02%)</title><rect x="0.5183%" y="357" width="0.0199%" height="15" fill="rgb(213,199,42)" fg:x="26" fg:w="1"/><text x="0.7683%" y="367.50"></text></g><g><title>ntdll`RtlClearThreadWorkOnBehalfTicket (6 samples, 0.12%)</title><rect x="0.4386%" y="501" width="0.1196%" height="15" fill="rgb(235,201,11)" fg:x="22" fg:w="6"/><text x="0.6886%" y="511.50"></text></g><g><title>ntdll`RtlHashUnicodeString (6 samples, 0.12%)</title><rect x="0.4386%" y="485" width="0.1196%" height="15" fill="rgb(207,46,11)" fg:x="22" fg:w="6"/><text x="0.6886%" y="495.50"></text></g><g><title>ntdll`RtlQueryPerformanceCounter (6 samples, 0.12%)</title><rect x="0.4386%" y="469" width="0.1196%" height="15" fill="rgb(241,35,35)" fg:x="22" fg:w="6"/><text x="0.6886%" y="479.50"></text></g><g><title>ntdll`RtlQueryPerformanceCounter (6 samples, 0.12%)</title><rect x="0.4386%" y="453" width="0.1196%" height="15" fill="rgb(243,32,47)" fg:x="22" fg:w="6"/><text x="0.6886%" y="463.50"></text></g><g><title>ntdll`RtlQueryPerformanceCounter (4 samples, 0.08%)</title><rect x="0.4785%" y="437" width="0.0797%" height="15" fill="rgb(247,202,23)" fg:x="24" fg:w="4"/><text x="0.7285%" y="447.50"></text></g><g><title>ntdll`RtlQueryPerformanceCounter (2 samples, 0.04%)</title><rect x="0.5183%" y="421" width="0.0399%" height="15" fill="rgb(219,102,11)" fg:x="26" fg:w="2"/><text x="0.7683%" y="431.50"></text></g><g><title>ntdll`LdrControlFlowGuardEnforced (2 samples, 0.04%)</title><rect x="0.5183%" y="405" width="0.0399%" height="15" fill="rgb(243,110,44)" fg:x="26" fg:w="2"/><text x="0.7683%" y="415.50"></text></g><g><title>ntdll`RtlAddressInSectionTable (1 samples, 0.02%)</title><rect x="0.5383%" y="389" width="0.0199%" height="15" fill="rgb(222,74,54)" fg:x="27" fg:w="1"/><text x="0.7883%" y="399.50"></text></g><g><title>ntdll`RtlAddressInSectionTable (1 samples, 0.02%)</title><rect x="0.5383%" y="373" width="0.0199%" height="15" fill="rgb(216,99,12)" fg:x="27" fg:w="1"/><text x="0.7883%" y="383.50"></text></g><g><title>ntdll`RtlCopyUnicodeString (1 samples, 0.02%)</title><rect x="0.5383%" y="357" width="0.0199%" height="15" fill="rgb(226,22,26)" fg:x="27" fg:w="1"/><text x="0.7883%" y="367.50"></text></g><g><title>toy`alloc::ffi::c_str::impl$1::new::impl$2::spec_new_impl (1 samples, 0.02%)</title><rect x="0.5582%" y="453" width="0.0199%" height="15" fill="rgb(217,163,10)" fg:x="28" fg:w="1"/><text x="0.8082%" y="463.50"></text></g><g><title>ntdll`RtlCopyMemory (1 samples, 0.02%)</title><rect x="0.5781%" y="389" width="0.0199%" height="15" fill="rgb(213,25,53)" fg:x="29" fg:w="1"/><text x="0.8281%" y="399.50"></text></g><g><title>ntdll`RtlTryAcquirePebLock (1 samples, 0.02%)</title><rect x="0.5781%" y="373" width="0.0199%" height="15" fill="rgb(252,105,26)" fg:x="29" fg:w="1"/><text x="0.8281%" y="383.50"></text></g><g><title>ntdll`RtlTryAcquirePebLock (1 samples, 0.02%)</title><rect x="0.5781%" y="357" width="0.0199%" height="15" fill="rgb(220,39,43)" fg:x="29" fg:w="1"/><text x="0.8281%" y="367.50"></text></g><g><title>ntdll`RtlFreeHeap (1 samples, 0.02%)</title><rect x="0.5781%" y="341" width="0.0199%" height="15" fill="rgb(229,68,48)" fg:x="29" fg:w="1"/><text x="0.8281%" y="351.50"></text></g><g><title>ntdll`RtlGetCurrentServiceSessionId (1 samples, 0.02%)</title><rect x="0.5781%" y="325" width="0.0199%" height="15" fill="rgb(252,8,32)" fg:x="29" fg:w="1"/><text x="0.8281%" y="335.50"></text></g><g><title>ntdll`RtlDeleteBoundaryDescriptor (1 samples, 0.02%)</title><rect x="0.5781%" y="309" width="0.0199%" height="15" fill="rgb(223,20,43)" fg:x="29" fg:w="1"/><text x="0.8281%" y="319.50"></text></g><g><title>ntdll`RtlTryEnterCriticalSection (1 samples, 0.02%)</title><rect x="0.5781%" y="293" width="0.0199%" height="15" fill="rgb(229,81,49)" fg:x="29" fg:w="1"/><text x="0.8281%" y="303.50"></text></g><g><title>ntdll`RtlTryEnterCriticalSection (1 samples, 0.02%)</title><rect x="0.5781%" y="277" width="0.0199%" height="15" fill="rgb(236,28,36)" fg:x="29" fg:w="1"/><text x="0.8281%" y="287.50"></text></g><g><title>ntdll`RtlTryEnterCriticalSection (1 samples, 0.02%)</title><rect x="0.5781%" y="261" width="0.0199%" height="15" fill="rgb(249,185,26)" fg:x="29" fg:w="1"/><text x="0.8281%" y="271.50"></text></g><g><title>ntdll`RtlTryEnterCriticalSection (1 samples, 0.02%)</title><rect x="0.5781%" y="245" width="0.0199%" height="15" fill="rgb(249,174,33)" fg:x="29" fg:w="1"/><text x="0.8281%" y="255.50"></text></g><g><title>ntdll`NtFreeVirtualMemory (1 samples, 0.02%)</title><rect x="0.5781%" y="229" width="0.0199%" height="15" fill="rgb(233,201,37)" fg:x="29" fg:w="1"/><text x="0.8281%" y="239.50"></text></g><g><title>ntdll`NtFreeVirtualMemory (1 samples, 0.02%)</title><rect x="0.6978%" y="341" width="0.0199%" height="15" fill="rgb(221,78,26)" fg:x="35" fg:w="1"/><text x="0.9478%" y="351.50"></text></g><g><title>ntdll`RtlFreeHeap (8 samples, 0.16%)</title><rect x="0.5781%" y="405" width="0.1595%" height="15" fill="rgb(250,127,30)" fg:x="29" fg:w="8"/><text x="0.8281%" y="415.50"></text></g><g><title>ntdll`RtlGetCurrentServiceSessionId (7 samples, 0.14%)</title><rect x="0.5981%" y="389" width="0.1396%" height="15" fill="rgb(230,49,44)" fg:x="30" fg:w="7"/><text x="0.8481%" y="399.50"></text></g><g><title>ntdll`RtlDeleteBoundaryDescriptor (2 samples, 0.04%)</title><rect x="0.6978%" y="373" width="0.0399%" height="15" fill="rgb(229,67,23)" fg:x="35" fg:w="2"/><text x="0.9478%" y="383.50"></text></g><g><title>ntdll`RtlTryEnterCriticalSection (2 samples, 0.04%)</title><rect x="0.6978%" y="357" width="0.0399%" height="15" fill="rgb(249,83,47)" fg:x="35" fg:w="2"/><text x="0.9478%" y="367.50"></text></g><g><title>ntdll`RtlTryEnterCriticalSection (1 samples, 0.02%)</title><rect x="0.7177%" y="341" width="0.0199%" height="15" fill="rgb(215,43,3)" fg:x="36" fg:w="1"/><text x="0.9677%" y="351.50"></text></g><g><title>ntdll`NtFreeVirtualMemory (1 samples, 0.02%)</title><rect x="0.7177%" y="325" width="0.0199%" height="15" fill="rgb(238,154,13)" fg:x="36" fg:w="1"/><text x="0.9677%" y="335.50"></text></g><g><title>kernel32`HeapFree (1 samples, 0.02%)</title><rect x="38.7360%" y="373" width="0.0199%" height="15" fill="rgb(219,56,2)" fg:x="1943" fg:w="1"/><text x="38.9860%" y="383.50"></text></g><g><title>ntdll`RtlAllocateHeap (112 samples, 2.23%)</title><rect x="43.7998%" y="341" width="2.2329%" height="15" fill="rgb(233,0,4)" fg:x="2197" fg:w="112"/><text x="44.0498%" y="351.50">n..</text></g><g><title>ntdll`RtlAllocateHeap (7 samples, 0.14%)</title><rect x="45.8931%" y="325" width="0.1396%" height="15" fill="rgb(235,30,7)" fg:x="2302" fg:w="7"/><text x="46.1431%" y="335.50"></text></g><g><title>ntdll`RtlIsStateSeparationEnabled (1 samples, 0.02%)</title><rect x="46.0327%" y="341" width="0.0199%" height="15" fill="rgb(250,79,13)" fg:x="2309" fg:w="1"/><text x="46.2827%" y="351.50"></text></g><g><title>ntdll`RtlAllocateHeap (438 samples, 8.73%)</title><rect x="38.7560%" y="373" width="8.7321%" height="15" fill="rgb(211,146,34)" fg:x="1944" fg:w="438"/><text x="39.0060%" y="383.50">ntdll`RtlAll..</text></g><g><title>ntdll`RtlAllocateHeap (373 samples, 7.44%)</title><rect x="40.0518%" y="357" width="7.4362%" height="15" fill="rgb(228,22,38)" fg:x="2009" fg:w="373"/><text x="40.3018%" y="367.50">ntdll`RtlA..</text></g><g><title>ntdll`RtlUnhandledExceptionFilter (72 samples, 1.44%)</title><rect x="46.0526%" y="341" width="1.4354%" height="15" fill="rgb(235,168,5)" fg:x="2310" fg:w="72"/><text x="46.3026%" y="351.50"></text></g><g><title>ntdll`RtlCopyMemory (384 samples, 7.66%)</title><rect x="48.7041%" y="357" width="7.6555%" height="15" fill="rgb(221,155,16)" fg:x="2443" fg:w="384"/><text x="48.9541%" y="367.50">ntdll`RtlC..</text></g><g><title>ntdll`RtlDeleteBoundaryDescriptor (2 samples, 0.04%)</title><rect x="59.7089%" y="341" width="0.0399%" height="15" fill="rgb(215,215,53)" fg:x="2995" fg:w="2"/><text x="59.9589%" y="351.50"></text></g><g><title>ntdll`RtlTryEnterCriticalSection (1 samples, 0.02%)</title><rect x="59.7289%" y="325" width="0.0199%" height="15" fill="rgb(223,4,10)" fg:x="2996" fg:w="1"/><text x="59.9789%" y="335.50"></text></g><g><title>ntdll`RtlFreeHeap (634 samples, 12.64%)</title><rect x="47.4880%" y="373" width="12.6396%" height="15" fill="rgb(234,103,6)" fg:x="2382" fg:w="634"/><text x="47.7380%" y="383.50">ntdll`RtlFreeHeap</text></g><g><title>ntdll`RtlGetCurrentServiceSessionId (189 samples, 3.77%)</title><rect x="56.3596%" y="357" width="3.7679%" height="15" fill="rgb(227,97,0)" fg:x="2827" fg:w="189"/><text x="56.6096%" y="367.50">ntdl..</text></g><g><title>ntdll`RtlFreeHeap (19 samples, 0.38%)</title><rect x="59.7488%" y="341" width="0.3788%" height="15" fill="rgb(234,150,53)" fg:x="2997" fg:w="19"/><text x="59.9988%" y="351.50"></text></g><g><title>toy`_rust_dealloc (1 samples, 0.02%)</title><rect x="60.1276%" y="373" width="0.0199%" height="15" fill="rgb(228,201,54)" fg:x="3016" fg:w="1"/><text x="60.3776%" y="383.50"></text></g><g><title>ntdll`RtlCopyMemory (1 samples, 0.02%)</title><rect x="60.7656%" y="341" width="0.0199%" height="15" fill="rgb(222,22,37)" fg:x="3048" fg:w="1"/><text x="61.0156%" y="351.50"></text></g><g><title>ntdll`RtlFreeHeap (4 samples, 0.08%)</title><rect x="60.7656%" y="357" width="0.0797%" height="15" fill="rgb(237,53,32)" fg:x="3048" fg:w="4"/><text x="61.0156%" y="367.50"></text></g><g><title>ntdll`RtlGetCurrentServiceSessionId (3 samples, 0.06%)</title><rect x="60.7855%" y="341" width="0.0598%" height="15" fill="rgb(233,25,53)" fg:x="3049" fg:w="3"/><text x="61.0355%" y="351.50"></text></g><g><title>toy`alloc::raw_vec::RawVec&lt;petgraph::graph_impl::NodeIndex&lt;u32&gt;,alloc::alloc::Global&gt;::reserve_for_push&lt;petgraph::graph_impl::NodeIndex (3 samples, 0.06%)</title><rect x="60.8453%" y="357" width="0.0598%" height="15" fill="rgb(210,40,34)" fg:x="3052" fg:w="3"/><text x="61.0953%" y="367.50"></text></g><g><title>toy`alloc::raw_vec::finish_grow (3 samples, 0.06%)</title><rect x="60.8453%" y="341" width="0.0598%" height="15" fill="rgb(241,220,44)" fg:x="3052" fg:w="3"/><text x="61.0953%" y="351.50"></text></g><g><title>ntdll`RtlReAllocateHeap (3 samples, 0.06%)</title><rect x="60.8453%" y="325" width="0.0598%" height="15" fill="rgb(235,28,35)" fg:x="3052" fg:w="3"/><text x="61.0953%" y="335.50"></text></g><g><title>ntdll`RtlReAllocateHeap (3 samples, 0.06%)</title><rect x="60.8453%" y="309" width="0.0598%" height="15" fill="rgb(210,56,17)" fg:x="3052" fg:w="3"/><text x="61.0953%" y="319.50"></text></g><g><title>ntdll`RtlReAllocateHeap (3 samples, 0.06%)</title><rect x="60.8453%" y="293" width="0.0598%" height="15" fill="rgb(224,130,29)" fg:x="3052" fg:w="3"/><text x="61.0953%" y="303.50"></text></g><g><title>ntdll`RtlFreeHeap (2 samples, 0.04%)</title><rect x="60.8652%" y="277" width="0.0399%" height="15" fill="rgb(235,212,8)" fg:x="3053" fg:w="2"/><text x="61.1152%" y="287.50"></text></g><g><title>ntdll`RtlGetCurrentServiceSessionId (2 samples, 0.04%)</title><rect x="60.8652%" y="261" width="0.0399%" height="15" fill="rgb(223,33,50)" fg:x="3053" fg:w="2"/><text x="61.1152%" y="271.50"></text></g><g><title>ntdll`RtlAllocateHeap (4 samples, 0.08%)</title><rect x="60.9649%" y="341" width="0.0797%" height="15" fill="rgb(219,149,13)" fg:x="3058" fg:w="4"/><text x="61.2149%" y="351.50"></text></g><g><title>ntdll`RtlAllocateHeap (4 samples, 0.08%)</title><rect x="60.9649%" y="325" width="0.0797%" height="15" fill="rgb(250,156,29)" fg:x="3058" fg:w="4"/><text x="61.2149%" y="335.50"></text></g><g><title>ntdll`RtlAllocateHeap (1 samples, 0.02%)</title><rect x="61.0247%" y="309" width="0.0199%" height="15" fill="rgb(216,193,19)" fg:x="3061" fg:w="1"/><text x="61.2747%" y="319.50"></text></g><g><title>toy`alloc::vec::spec_from_iter::impl$0::from_iter&lt;petgraph::graph_impl::NodeIndex&lt;u32&gt;,core::iter::adapters::filter_map::FilterMap&lt;petgraph::graph_impl::Edges&lt;aeg::aeg::AegEdge,enum2$ (8 samples, 0.16%)</title><rect x="60.9051%" y="357" width="0.1595%" height="15" fill="rgb(216,135,14)" fg:x="3055" fg:w="8"/><text x="61.1551%" y="367.50"></text></g><g><title>toy`std::alloc::__default_lib_allocator::__rdl_alloc (1 samples, 0.02%)</title><rect x="61.0447%" y="341" width="0.0199%" height="15" fill="rgb(241,47,5)" fg:x="3062" fg:w="1"/><text x="61.2947%" y="351.50"></text></g><g><title>toy`aeg::aeg::AbstractEventGraph::is_po_connected (51 samples, 1.02%)</title><rect x="60.1475%" y="373" width="1.0167%" height="15" fill="rgb(233,42,35)" fg:x="3017" fg:w="51"/><text x="60.3975%" y="383.50"></text></g><g><title>toy`fixedbitset::FixedBitSet::with_capacity (5 samples, 0.10%)</title><rect x="61.0646%" y="357" width="0.0997%" height="15" fill="rgb(231,13,6)" fg:x="3063" fg:w="5"/><text x="61.3146%" y="367.50"></text></g><g><title>ntdll`RtlAllocateHeap (5 samples, 0.10%)</title><rect x="61.0646%" y="341" width="0.0997%" height="15" fill="rgb(207,181,40)" fg:x="3063" fg:w="5"/><text x="61.3146%" y="351.50"></text></g><g><title>ntdll`RtlAllocateHeap (5 samples, 0.10%)</title><rect x="61.0646%" y="325" width="0.0997%" height="15" fill="rgb(254,173,49)" fg:x="3063" fg:w="5"/><text x="61.3146%" y="335.50"></text></g><g><title>ntdll`RtlUnhandledExceptionFilter (3 samples, 0.06%)</title><rect x="61.1045%" y="309" width="0.0598%" height="15" fill="rgb(221,1,38)" fg:x="3065" fg:w="3"/><text x="61.3545%" y="319.50"></text></g><g><title>ntdll`RtlAllocateHeap (11 samples, 0.22%)</title><rect x="62.7592%" y="309" width="0.2193%" height="15" fill="rgb(206,124,46)" fg:x="3148" fg:w="11"/><text x="63.0092%" y="319.50"></text></g><g><title>toy`alloc::vec::spec_from_iter::impl$0::from_iter&lt;petgraph::graph_impl::NodeIndex&lt;u32&gt;,core::iter::adapters::filter_map::FilterMap&lt;petgraph::graph_impl::Edges&lt;aeg::aeg::AegEdge,enum2$ (81 samples, 1.61%)</title><rect x="61.4035%" y="357" width="1.6148%" height="15" fill="rgb(249,21,11)" fg:x="3080" fg:w="81"/><text x="61.6535%" y="367.50"></text></g><g><title>ntdll`RtlAllocateHeap (73 samples, 1.46%)</title><rect x="61.5630%" y="341" width="1.4553%" height="15" fill="rgb(222,201,40)" fg:x="3088" fg:w="73"/><text x="61.8130%" y="351.50"></text></g><g><title>ntdll`RtlAllocateHeap (62 samples, 1.24%)</title><rect x="61.7823%" y="325" width="1.2360%" height="15" fill="rgb(235,61,29)" fg:x="3099" fg:w="62"/><text x="62.0323%" y="335.50"></text></g><g><title>ntdll`RtlUnhandledExceptionFilter (2 samples, 0.04%)</title><rect x="62.9785%" y="309" width="0.0399%" height="15" fill="rgb(219,207,3)" fg:x="3159" fg:w="2"/><text x="63.2285%" y="319.50"></text></g><g><title>ntdll`RtlAllocateHeap (7 samples, 0.14%)</title><rect x="63.4370%" y="309" width="0.1396%" height="15" fill="rgb(222,56,46)" fg:x="3182" fg:w="7"/><text x="63.6870%" y="319.50"></text></g><g><title>ntdll`RtlCopyMemory (4 samples, 0.08%)</title><rect x="63.5766%" y="309" width="0.0797%" height="15" fill="rgb(239,76,54)" fg:x="3189" fg:w="4"/><text x="63.8266%" y="319.50"></text></g><g><title>ntdll`RtlAllocateHeap (35 samples, 0.70%)</title><rect x="63.0383%" y="341" width="0.6978%" height="15" fill="rgb(231,124,27)" fg:x="3162" fg:w="35"/><text x="63.2883%" y="351.50"></text></g><g><title>ntdll`RtlAllocateHeap (30 samples, 0.60%)</title><rect x="63.1380%" y="325" width="0.5981%" height="15" fill="rgb(249,195,6)" fg:x="3167" fg:w="30"/><text x="63.3880%" y="335.50"></text></g><g><title>ntdll`RtlUnhandledExceptionFilter (4 samples, 0.08%)</title><rect x="63.6563%" y="309" width="0.0797%" height="15" fill="rgb(237,174,47)" fg:x="3193" fg:w="4"/><text x="63.9063%" y="319.50"></text></g><g><title>toy`aeg::aeg::AbstractEventGraph::neighbors (132 samples, 2.63%)</title><rect x="61.1643%" y="373" width="2.6316%" height="15" fill="rgb(206,201,31)" fg:x="3068" fg:w="132"/><text x="61.4143%" y="383.50">to..</text></g><g><title>toy`fixedbitset::FixedBitSet::with_capacity (39 samples, 0.78%)</title><rect x="63.0183%" y="357" width="0.7775%" height="15" fill="rgb(231,57,52)" fg:x="3161" fg:w="39"/><text x="63.2683%" y="367.50"></text></g><g><title>toy`std::alloc::__default_lib_allocator::__rdl_alloc_zeroed (3 samples, 0.06%)</title><rect x="63.7360%" y="341" width="0.0598%" height="15" fill="rgb(248,177,22)" fg:x="3197" fg:w="3"/><text x="63.9860%" y="351.50"></text></g><g><title>ntdll`RtlAllocateHeap (17 samples, 0.34%)</title><rect x="67.2847%" y="245" width="0.3389%" height="15" fill="rgb(215,211,37)" fg:x="3375" fg:w="17"/><text x="67.5347%" y="255.50"></text></g><g><title>ntdll`RtlAllocateHeap (8 samples, 0.16%)</title><rect x="67.4641%" y="229" width="0.1595%" height="15" fill="rgb(241,128,51)" fg:x="3384" fg:w="8"/><text x="67.7141%" y="239.50"></text></g><g><title>ntdll`RtlAllocateHeap (40 samples, 0.80%)</title><rect x="66.9657%" y="277" width="0.7974%" height="15" fill="rgb(227,165,31)" fg:x="3359" fg:w="40"/><text x="67.2157%" y="287.50"></text></g><g><title>ntdll`RtlAllocateHeap (37 samples, 0.74%)</title><rect x="67.0255%" y="261" width="0.7376%" height="15" fill="rgb(228,167,24)" fg:x="3362" fg:w="37"/><text x="67.2755%" y="271.50"></text></g><g><title>ntdll`RtlUnhandledExceptionFilter (7 samples, 0.14%)</title><rect x="67.6236%" y="245" width="0.1396%" height="15" fill="rgb(228,143,12)" fg:x="3392" fg:w="7"/><text x="67.8736%" y="255.50"></text></g><g><title>ntdll`RtlCopyMemory (5 samples, 0.10%)</title><rect x="67.7632%" y="261" width="0.0997%" height="15" fill="rgb(249,149,8)" fg:x="3399" fg:w="5"/><text x="68.0132%" y="271.50"></text></g><g><title>ntdll`RtlReAllocateHeap (55 samples, 1.10%)</title><rect x="66.8062%" y="325" width="1.0965%" height="15" fill="rgb(243,35,44)" fg:x="3351" fg:w="55"/><text x="67.0562%" y="335.50"></text></g><g><title>ntdll`RtlReAllocateHeap (55 samples, 1.10%)</title><rect x="66.8062%" y="309" width="1.0965%" height="15" fill="rgb(246,89,9)" fg:x="3351" fg:w="55"/><text x="67.0562%" y="319.50"></text></g><g><title>ntdll`RtlReAllocateHeap (52 samples, 1.04%)</title><rect x="66.8660%" y="293" width="1.0367%" height="15" fill="rgb(233,213,13)" fg:x="3354" fg:w="52"/><text x="67.1160%" y="303.50"></text></g><g><title>ntdll`RtlFreeHeap (7 samples, 0.14%)</title><rect x="67.7632%" y="277" width="0.1396%" height="15" fill="rgb(233,141,41)" fg:x="3399" fg:w="7"/><text x="68.0132%" y="287.50"></text></g><g><title>ntdll`RtlGetCurrentServiceSessionId (2 samples, 0.04%)</title><rect x="67.8628%" y="261" width="0.0399%" height="15" fill="rgb(239,167,4)" fg:x="3404" fg:w="2"/><text x="68.1128%" y="271.50"></text></g><g><title>toy`alloc::raw_vec::RawVec&lt;petgraph::graph_impl::NodeIndex&lt;u32&gt;,alloc::alloc::Global&gt;::reserve_for_push&lt;petgraph::graph_impl::NodeIndex (63 samples, 1.26%)</title><rect x="66.6667%" y="357" width="1.2560%" height="15" fill="rgb(209,217,16)" fg:x="3344" fg:w="63"/><text x="66.9167%" y="367.50"></text></g><g><title>toy`alloc::raw_vec::finish_grow (61 samples, 1.22%)</title><rect x="66.7065%" y="341" width="1.2161%" height="15" fill="rgb(219,88,35)" fg:x="3346" fg:w="61"/><text x="66.9565%" y="351.50"></text></g><g><title>toy`std::alloc::__default_lib_allocator::__rdl_realloc (1 samples, 0.02%)</title><rect x="67.9027%" y="325" width="0.0199%" height="15" fill="rgb(220,193,23)" fg:x="3406" fg:w="1"/><text x="68.1527%" y="335.50"></text></g><g><title>toy`hashbrown::map::VacantEntry&lt;usize,smallvec::SmallVec&lt;array$&lt;usize,2&gt; &gt;,core::hash::BuildHasherDefault&lt;ahash::fallback_hash::AHasher&gt;,allocator_api2::stable::alloc::global::Global&gt;::insert&lt;usize,smallvec::SmallVec&lt;array$&lt;usize,2&gt; &gt;,core::hash::BuildHasherDefault (2 samples, 0.04%)</title><rect x="67.9226%" y="357" width="0.0399%" height="15" fill="rgb(230,90,52)" fg:x="3407" fg:w="2"/><text x="68.1726%" y="367.50"></text></g><g><title>toy`hashbrown::raw::inner::RawTable&lt;tuple$&lt;usize,smallvec::SmallVec&lt;array$&lt;usize,2&gt; &gt; &gt;,allocator_api2::stable::alloc::global::Global&gt;::reserve_rehash&lt;tuple$&lt;usize,smallvec::SmallVec&lt;array$&lt;usize,2&gt; &gt; &gt;,allocator_api2::stable::alloc::global::Global,hashbrown::map::make_hasher::closure_env$0&lt;usize,smallvec::SmallVec&lt;array$&lt;usize,2&gt; &gt;,core::hash::BuildHasherDefault (1 samples, 0.02%)</title><rect x="67.9426%" y="341" width="0.0199%" height="15" fill="rgb(252,106,19)" fg:x="3408" fg:w="1"/><text x="68.1926%" y="351.50"></text></g><g><title>toy`hashbrown::raw::inner::RawTableInner::fallible_with_capacity (1 samples, 0.02%)</title><rect x="67.9426%" y="325" width="0.0199%" height="15" fill="rgb(206,74,20)" fg:x="3408" fg:w="1"/><text x="68.1926%" y="335.50"></text></g><g><title>ntdll`RtlCopyMemory (16 samples, 0.32%)</title><rect x="71.0726%" y="309" width="0.3190%" height="15" fill="rgb(230,138,44)" fg:x="3565" fg:w="16"/><text x="71.3226%" y="319.50"></text></g><g><title>ntdll`RtlFreeHeap (27 samples, 0.54%)</title><rect x="70.9729%" y="325" width="0.5383%" height="15" fill="rgb(235,182,43)" fg:x="3560" fg:w="27"/><text x="71.2229%" y="335.50"></text></g><g><title>ntdll`RtlGetCurrentServiceSessionId (6 samples, 0.12%)</title><rect x="71.3915%" y="309" width="0.1196%" height="15" fill="rgb(242,16,51)" fg:x="3581" fg:w="6"/><text x="71.6415%" y="319.50"></text></g><g><title>ntdll`RtlAllocateHeap (21 samples, 0.42%)</title><rect x="72.4083%" y="277" width="0.4187%" height="15" fill="rgb(248,9,4)" fg:x="3632" fg:w="21"/><text x="72.6583%" y="287.50"></text></g><g><title>ntdll`RtlTryEnterCriticalSection (1 samples, 0.02%)</title><rect x="72.8270%" y="277" width="0.0199%" height="15" fill="rgb(210,31,22)" fg:x="3653" fg:w="1"/><text x="73.0770%" y="287.50"></text></g><g><title>ntdll`RtlAllocateHeap (68 samples, 1.36%)</title><rect x="71.7305%" y="309" width="1.3557%" height="15" fill="rgb(239,54,39)" fg:x="3598" fg:w="68"/><text x="71.9805%" y="319.50"></text></g><g><title>ntdll`RtlAllocateHeap (56 samples, 1.12%)</title><rect x="71.9697%" y="293" width="1.1164%" height="15" fill="rgb(230,99,41)" fg:x="3610" fg:w="56"/><text x="72.2197%" y="303.50"></text></g><g><title>ntdll`RtlUnhandledExceptionFilter (12 samples, 0.24%)</title><rect x="72.8469%" y="277" width="0.2392%" height="15" fill="rgb(253,106,12)" fg:x="3654" fg:w="12"/><text x="73.0969%" y="287.50"></text></g><g><title>toy`_rust_alloc (1 samples, 0.02%)</title><rect x="73.0861%" y="309" width="0.0199%" height="15" fill="rgb(213,46,41)" fg:x="3666" fg:w="1"/><text x="73.3361%" y="319.50"></text></g><g><title>toy`std::alloc::__default_lib_allocator::__rdl_alloc (1 samples, 0.02%)</title><rect x="73.1061%" y="309" width="0.0199%" height="15" fill="rgb(215,133,35)" fg:x="3667" fg:w="1"/><text x="73.3561%" y="319.50"></text></g><g><title>toy`aeg::critical_cycles::IncompleteMinimalCycle (472 samples, 9.41%)</title><rect x="63.7959%" y="373" width="9.4099%" height="15" fill="rgb(213,28,5)" fg:x="3200" fg:w="472"/><text x="64.0459%" y="383.50">toy`aeg::crit..</text></g><g><title>toy`hashbrown::map::VacantEntry&lt;usize,smallvec::SmallVec&lt;array$&lt;usize,3&gt; &gt;,core::hash::BuildHasherDefault&lt;ahash::fallback_hash::AHasher&gt;,allocator_api2::stable::alloc::global::Global&gt;::insert&lt;usize,smallvec::SmallVec&lt;array$&lt;usize,3&gt; &gt;,core::hash::BuildHasherDefault (263 samples, 5.24%)</title><rect x="67.9625%" y="357" width="5.2432%" height="15" fill="rgb(215,77,49)" fg:x="3409" fg:w="263"/><text x="68.2125%" y="367.50">toy`ha..</text></g><g><title>toy`hashbrown::raw::inner::RawTable&lt;tuple$&lt;usize,smallvec::SmallVec&lt;array$&lt;usize,3&gt; &gt; &gt;,allocator_api2::stable::alloc::global::Global&gt;::reserve_rehash&lt;tuple$&lt;usize,smallvec::SmallVec&lt;array$&lt;usize,3&gt; &gt; &gt;,allocator_api2::stable::alloc::global::Global,hashbrown::map::make_hasher::closure_env$0&lt;usize,smallvec::SmallVec&lt;array$&lt;usize,3&gt; &gt;,core::hash::BuildHasherDefault (215 samples, 4.29%)</title><rect x="68.9195%" y="341" width="4.2863%" height="15" fill="rgb(248,100,22)" fg:x="3457" fg:w="215"/><text x="69.1695%" y="351.50">toy`h..</text></g><g><title>toy`hashbrown::raw::inner::RawTableInner::fallible_with_capacity (85 samples, 1.69%)</title><rect x="71.5112%" y="325" width="1.6946%" height="15" fill="rgb(208,67,9)" fg:x="3587" fg:w="85"/><text x="71.7612%" y="335.50"></text></g><g><title>vcruntime140`memset (4 samples, 0.08%)</title><rect x="73.1260%" y="309" width="0.0797%" height="15" fill="rgb(219,133,21)" fg:x="3668" fg:w="4"/><text x="73.3760%" y="319.50"></text></g><g><title>ntdll`RtlAllocateHeap (5 samples, 0.10%)</title><rect x="73.7041%" y="261" width="0.0997%" height="15" fill="rgb(246,46,29)" fg:x="3697" fg:w="5"/><text x="73.9541%" y="271.50"></text></g><g><title>ntdll`RtlAllocateHeap (24 samples, 0.48%)</title><rect x="73.4250%" y="293" width="0.4785%" height="15" fill="rgb(246,185,52)" fg:x="3683" fg:w="24"/><text x="73.6750%" y="303.50"></text></g><g><title>ntdll`RtlAllocateHeap (18 samples, 0.36%)</title><rect x="73.5447%" y="277" width="0.3589%" height="15" fill="rgb(252,136,11)" fg:x="3689" fg:w="18"/><text x="73.7947%" y="287.50"></text></g><g><title>ntdll`RtlUnhandledExceptionFilter (5 samples, 0.10%)</title><rect x="73.8038%" y="261" width="0.0997%" height="15" fill="rgb(219,138,53)" fg:x="3702" fg:w="5"/><text x="74.0538%" y="271.50"></text></g><g><title>ntdll`RtlCopyMemory (1 samples, 0.02%)</title><rect x="73.9035%" y="293" width="0.0199%" height="15" fill="rgb(211,51,23)" fg:x="3707" fg:w="1"/><text x="74.1535%" y="303.50"></text></g><g><title>ntdll`RtlCopyMemory (6 samples, 0.12%)</title><rect x="73.9234%" y="277" width="0.1196%" height="15" fill="rgb(247,221,28)" fg:x="3708" fg:w="6"/><text x="74.1734%" y="287.50"></text></g><g><title>ntdll`RtlReAllocateHeap (39 samples, 0.78%)</title><rect x="73.2855%" y="341" width="0.7775%" height="15" fill="rgb(251,222,45)" fg:x="3676" fg:w="39"/><text x="73.5355%" y="351.50"></text></g><g><title>ntdll`RtlReAllocateHeap (39 samples, 0.78%)</title><rect x="73.2855%" y="325" width="0.7775%" height="15" fill="rgb(217,162,53)" fg:x="3676" fg:w="39"/><text x="73.5355%" y="335.50"></text></g><g><title>ntdll`RtlReAllocateHeap (34 samples, 0.68%)</title><rect x="73.3852%" y="309" width="0.6778%" height="15" fill="rgb(229,93,14)" fg:x="3681" fg:w="34"/><text x="73.6352%" y="319.50"></text></g><g><title>ntdll`RtlFreeHeap (7 samples, 0.14%)</title><rect x="73.9234%" y="293" width="0.1396%" height="15" fill="rgb(209,67,49)" fg:x="3708" fg:w="7"/><text x="74.1734%" y="303.50"></text></g><g><title>ntdll`RtlGetCurrentServiceSessionId (1 samples, 0.02%)</title><rect x="74.0431%" y="277" width="0.0199%" height="15" fill="rgb(213,87,29)" fg:x="3714" fg:w="1"/><text x="74.2931%" y="287.50"></text></g><g><title>ntdll`RtlFreeHeap (1 samples, 0.02%)</title><rect x="74.0431%" y="261" width="0.0199%" height="15" fill="rgb(205,151,52)" fg:x="3714" fg:w="1"/><text x="74.2931%" y="271.50"></text></g><g><title>toy`_rust_realloc (1 samples, 0.02%)</title><rect x="74.0630%" y="341" width="0.0199%" height="15" fill="rgb(253,215,39)" fg:x="3715" fg:w="1"/><text x="74.3130%" y="351.50"></text></g><g><title>toy`alloc::raw_vec::RawVec&lt;petgraph::graph_impl::NodeIndex&lt;u32&gt;,alloc::alloc::Global&gt;::reserve_for_push&lt;petgraph::graph_impl::NodeIndex (46 samples, 0.92%)</title><rect x="73.2057%" y="373" width="0.9171%" height="15" fill="rgb(221,220,41)" fg:x="3672" fg:w="46"/><text x="73.4557%" y="383.50"></text></g><g><title>toy`alloc::raw_vec::finish_grow (43 samples, 0.86%)</title><rect x="73.2656%" y="357" width="0.8573%" height="15" fill="rgb(218,133,21)" fg:x="3675" fg:w="43"/><text x="73.5156%" y="367.50"></text></g><g><title>toy`std::alloc::__default_lib_allocator::__rdl_realloc (2 samples, 0.04%)</title><rect x="74.0829%" y="341" width="0.0399%" height="15" fill="rgb(221,193,43)" fg:x="3716" fg:w="2"/><text x="74.3329%" y="351.50"></text></g><g><title>ntdll`RtlAllocateHeap (1 samples, 0.02%)</title><rect x="74.1228%" y="293" width="0.0199%" height="15" fill="rgb(240,128,52)" fg:x="3718" fg:w="1"/><text x="74.3728%" y="303.50"></text></g><g><title>ntdll`RtlAllocateHeap (1 samples, 0.02%)</title><rect x="74.1228%" y="277" width="0.0199%" height="15" fill="rgb(253,114,12)" fg:x="3718" fg:w="1"/><text x="74.3728%" y="287.50"></text></g><g><title>ntdll`RtlTryEnterCriticalSection (1 samples, 0.02%)</title><rect x="74.1228%" y="261" width="0.0199%" height="15" fill="rgb(215,223,47)" fg:x="3718" fg:w="1"/><text x="74.3728%" y="271.50"></text></g><g><title>ntdll`RtlTryEnterCriticalSection (1 samples, 0.02%)</title><rect x="74.1228%" y="245" width="0.0199%" height="15" fill="rgb(248,225,23)" fg:x="3718" fg:w="1"/><text x="74.3728%" y="255.50"></text></g><g><title>ntdll`NtAllocateVirtualMemory (1 samples, 0.02%)</title><rect x="74.1228%" y="229" width="0.0199%" height="15" fill="rgb(250,108,0)" fg:x="3718" fg:w="1"/><text x="74.3728%" y="239.50"></text></g><g><title>toy`alloc::raw_vec::impl$2::reserve::do_reserve_and_handle (3 samples, 0.06%)</title><rect x="74.1228%" y="373" width="0.0598%" height="15" fill="rgb(228,208,7)" fg:x="3718" fg:w="3"/><text x="74.3728%" y="383.50"></text></g><g><title>toy`alloc::raw_vec::finish_grow (3 samples, 0.06%)</title><rect x="74.1228%" y="357" width="0.0598%" height="15" fill="rgb(244,45,10)" fg:x="3718" fg:w="3"/><text x="74.3728%" y="367.50"></text></g><g><title>ntdll`RtlReAllocateHeap (3 samples, 0.06%)</title><rect x="74.1228%" y="341" width="0.0598%" height="15" fill="rgb(207,125,25)" fg:x="3718" fg:w="3"/><text x="74.3728%" y="351.50"></text></g><g><title>ntdll`RtlReAllocateHeap (3 samples, 0.06%)</title><rect x="74.1228%" y="325" width="0.0598%" height="15" fill="rgb(210,195,18)" fg:x="3718" fg:w="3"/><text x="74.3728%" y="335.50"></text></g><g><title>ntdll`RtlReAllocateHeap (3 samples, 0.06%)</title><rect x="74.1228%" y="309" width="0.0598%" height="15" fill="rgb(249,80,12)" fg:x="3718" fg:w="3"/><text x="74.3728%" y="319.50"></text></g><g><title>ntdll`RtlCopyMemory (2 samples, 0.04%)</title><rect x="74.1427%" y="293" width="0.0399%" height="15" fill="rgb(221,65,9)" fg:x="3719" fg:w="2"/><text x="74.3927%" y="303.50"></text></g><g><title>ntdll`RtlAllocateHeap (1 samples, 0.02%)</title><rect x="74.1826%" y="325" width="0.0199%" height="15" fill="rgb(235,49,36)" fg:x="3721" fg:w="1"/><text x="74.4326%" y="335.50"></text></g><g><title>ntdll`RtlAllocateHeap (4 samples, 0.08%)</title><rect x="74.1826%" y="357" width="0.0797%" height="15" fill="rgb(225,32,20)" fg:x="3721" fg:w="4"/><text x="74.4326%" y="367.50"></text></g><g><title>ntdll`RtlAllocateHeap (4 samples, 0.08%)</title><rect x="74.1826%" y="341" width="0.0797%" height="15" fill="rgb(215,141,46)" fg:x="3721" fg:w="4"/><text x="74.4326%" y="351.50"></text></g><g><title>ntdll`RtlUnhandledExceptionFilter (3 samples, 0.06%)</title><rect x="74.2026%" y="325" width="0.0598%" height="15" fill="rgb(250,160,47)" fg:x="3722" fg:w="3"/><text x="74.4526%" y="335.50"></text></g><g><title>ntdll`RtlCopyMemory (1 samples, 0.02%)</title><rect x="74.2624%" y="341" width="0.0199%" height="15" fill="rgb(216,222,40)" fg:x="3725" fg:w="1"/><text x="74.5124%" y="351.50"></text></g><g><title>ntdll`RtlFreeHeap (2 samples, 0.04%)</title><rect x="74.2624%" y="357" width="0.0399%" height="15" fill="rgb(234,217,39)" fg:x="3725" fg:w="2"/><text x="74.5124%" y="367.50"></text></g><g><title>ntdll`RtlGetCurrentServiceSessionId (1 samples, 0.02%)</title><rect x="74.2823%" y="341" width="0.0199%" height="15" fill="rgb(207,178,40)" fg:x="3726" fg:w="1"/><text x="74.5323%" y="351.50"></text></g><g><title>ntdll`RtlAllocateHeap (3 samples, 0.06%)</title><rect x="74.3022%" y="341" width="0.0598%" height="15" fill="rgb(221,136,13)" fg:x="3727" fg:w="3"/><text x="74.5522%" y="351.50"></text></g><g><title>ntdll`RtlAllocateHeap (1 samples, 0.02%)</title><rect x="74.3421%" y="325" width="0.0199%" height="15" fill="rgb(249,199,10)" fg:x="3729" fg:w="1"/><text x="74.5921%" y="335.50"></text></g><g><title>toy`alloc::vec::in_place_collect::impl$1::from_iter&lt;aeg::critical_cycles::CriticalCycle,core::iter::adapters::map::Map&lt;alloc::vec::into_iter::IntoIter&lt;alloc::vec::Vec&lt;petgraph::graph_impl::EdgeIndex (10 samples, 0.20%)</title><rect x="74.1826%" y="373" width="0.1994%" height="15" fill="rgb(249,222,13)" fg:x="3721" fg:w="10"/><text x="74.4326%" y="383.50"></text></g><g><title>toy`core::iter::adapters::map::impl$2::fold&lt;aeg::critical_cycles::CriticalCycle,alloc::vec::into_iter::IntoIter&lt;alloc::vec::Vec&lt;petgraph::graph_impl::EdgeIndex&lt;u32&gt;,alloc::alloc::Global&gt;,alloc::alloc::Global&gt;,aeg::critical_cycles::impl$3::complete::closure_env$0,tuple$&lt;&gt;,core::iter::traits::iterator::Iterator::for_each::call::closure_env$0&lt;aeg::critical_cycles::CriticalCycle,alloc::vec::impl$19::extend_trusted::closure_env$0&lt;aeg::critical_cycles::CriticalCycle,alloc::alloc::Global,core::iter::adapters::map::Map&lt;alloc::vec::into_iter::IntoIter&lt;alloc::vec::Vec&lt;petgraph::graph_impl::EdgeIndex (4 samples, 0.08%)</title><rect x="74.3022%" y="357" width="0.0797%" height="15" fill="rgb(244,185,38)" fg:x="3727" fg:w="4"/><text x="74.5522%" y="367.50"></text></g><g><title>toy`std::alloc::__default_lib_allocator::__rdl_alloc (1 samples, 0.02%)</title><rect x="74.3620%" y="341" width="0.0199%" height="15" fill="rgb(236,202,9)" fg:x="3730" fg:w="1"/><text x="74.6120%" y="351.50"></text></g><g><title>toy`alloc::vec::spec_extend::impl$1::spec_extend&lt;petgraph::graph_impl::EdgeIndex&lt;u32&gt;,core::iter::adapters::map::Map&lt;core::slice::iter::Windows&lt;petgraph::graph_impl::NodeIndex (2 samples, 0.04%)</title><rect x="74.3820%" y="373" width="0.0399%" height="15" fill="rgb(250,229,37)" fg:x="3731" fg:w="2"/><text x="74.6320%" y="383.50"></text></g><g><title>toy`alloc::raw_vec::impl$2::reserve::do_reserve_and_handle&lt;petgraph::graph_impl::EdgeIndex (2 samples, 0.04%)</title><rect x="74.3820%" y="357" width="0.0399%" height="15" fill="rgb(206,174,23)" fg:x="3731" fg:w="2"/><text x="74.6320%" y="367.50"></text></g><g><title>toy`alloc::raw_vec::finish_grow (2 samples, 0.04%)</title><rect x="74.3820%" y="341" width="0.0399%" height="15" fill="rgb(211,33,43)" fg:x="3731" fg:w="2"/><text x="74.6320%" y="351.50"></text></g><g><title>ntdll`RtlAllocateHeap (2 samples, 0.04%)</title><rect x="74.3820%" y="325" width="0.0399%" height="15" fill="rgb(245,58,50)" fg:x="3731" fg:w="2"/><text x="74.6320%" y="335.50"></text></g><g><title>ntdll`RtlAllocateHeap (2 samples, 0.04%)</title><rect x="74.3820%" y="309" width="0.0399%" height="15" fill="rgb(244,68,36)" fg:x="3731" fg:w="2"/><text x="74.6320%" y="319.50"></text></g><g><title>ntdll`RtlAllocateHeap (1 samples, 0.02%)</title><rect x="74.4019%" y="293" width="0.0199%" height="15" fill="rgb(232,229,15)" fg:x="3732" fg:w="1"/><text x="74.6519%" y="303.50"></text></g><g><title>toy`hashbrown::raw::inner::RawTable&lt;tuple$&lt;alloc::vec::Vec&lt;petgraph::graph_impl::NodeIndex&lt;u32&gt;,alloc::alloc::Global&gt;,tuple$&lt;&gt; &gt;,allocator_api2::stable::alloc::global::Global&gt;::reserve_rehash&lt;tuple$&lt;alloc::vec::Vec&lt;petgraph::graph_impl::NodeIndex&lt;u32&gt;,alloc::alloc::Global&gt;,tuple$&lt;&gt; &gt;,allocator_api2::stable::alloc::global::Global,hashbrown::map::make_hasher::closure_env$0&lt;alloc::vec::Vec&lt;petgraph::graph_impl::NodeIndex&lt;u32&gt;,alloc::alloc::Global&gt;,tuple$&lt;&gt;,core::hash::BuildHasherDefault (11 samples, 0.22%)</title><rect x="74.4219%" y="373" width="0.2193%" height="15" fill="rgb(254,30,23)" fg:x="3733" fg:w="11"/><text x="74.6719%" y="383.50"></text></g><g><title>ntdll`RtlAllocateHeap (109 samples, 2.17%)</title><rect x="79.6451%" y="309" width="2.1730%" height="15" fill="rgb(235,160,14)" fg:x="3995" fg:w="109"/><text x="79.8951%" y="319.50">n..</text></g><g><title>ntdll`RtlAllocateHeap (356 samples, 7.10%)</title><rect x="75.9171%" y="341" width="7.0973%" height="15" fill="rgb(212,155,44)" fg:x="3808" fg:w="356"/><text x="76.1671%" y="351.50">ntdll`RtlA..</text></g><g><title>ntdll`RtlAllocateHeap (297 samples, 5.92%)</title><rect x="77.0933%" y="325" width="5.9211%" height="15" fill="rgb(226,2,50)" fg:x="3867" fg:w="297"/><text x="77.3433%" y="335.50">ntdll`Rt..</text></g><g><title>ntdll`RtlUnhandledExceptionFilter (60 samples, 1.20%)</title><rect x="81.8182%" y="309" width="1.1962%" height="15" fill="rgb(234,177,6)" fg:x="4104" fg:w="60"/><text x="82.0682%" y="319.50"></text></g><g><title>toy`_rust_alloc (1 samples, 0.02%)</title><rect x="83.0144%" y="341" width="0.0199%" height="15" fill="rgb(217,24,9)" fg:x="4164" fg:w="1"/><text x="83.2644%" y="351.50"></text></g><g><title>toy`std::alloc::__default_lib_allocator::__rdl_alloc (3 samples, 0.06%)</title><rect x="83.0343%" y="341" width="0.0598%" height="15" fill="rgb(220,13,46)" fg:x="4165" fg:w="3"/><text x="83.2843%" y="351.50"></text></g><g><title>toy`hashbrown::raw::inner::RawTable&lt;tuple$&lt;usize,smallvec::SmallVec&lt;array$&lt;usize,2&gt; &gt; &gt;,allocator_api2::stable::alloc::global::Global&gt;::reserve_rehash&lt;tuple$&lt;usize,smallvec::SmallVec&lt;array$&lt;usize,2&gt; &gt; &gt;,allocator_api2::stable::alloc::global::Global,hashbrown::map::make_hasher::closure_env$0&lt;usize,smallvec::SmallVec&lt;array$&lt;usize,2&gt; &gt;,core::hash::BuildHasherDefault (437 samples, 8.71%)</title><rect x="74.6411%" y="373" width="8.7121%" height="15" fill="rgb(239,221,27)" fg:x="3744" fg:w="437"/><text x="74.8911%" y="383.50">toy`hashbrow..</text></g><g><title>toy`hashbrown::raw::inner::RawTableInner::fallible_with_capacity (406 samples, 8.09%)</title><rect x="75.2592%" y="357" width="8.0941%" height="15" fill="rgb(222,198,25)" fg:x="3775" fg:w="406"/><text x="75.5092%" y="367.50">toy`hashbro..</text></g><g><title>vcruntime140`memset (13 samples, 0.26%)</title><rect x="83.0941%" y="341" width="0.2592%" height="15" fill="rgb(211,99,13)" fg:x="4168" fg:w="13"/><text x="83.3441%" y="351.50"></text></g><g><title>ntdll`RtlCopyMemory (10 samples, 0.20%)</title><rect x="86.1643%" y="341" width="0.1994%" height="15" fill="rgb(232,111,31)" fg:x="4322" fg:w="10"/><text x="86.4143%" y="351.50"></text></g><g><title>ntdll`RtlFreeHeap (20 samples, 0.40%)</title><rect x="86.0447%" y="357" width="0.3987%" height="15" fill="rgb(245,82,37)" fg:x="4316" fg:w="20"/><text x="86.2947%" y="367.50"></text></g><g><title>ntdll`RtlGetCurrentServiceSessionId (4 samples, 0.08%)</title><rect x="86.3636%" y="341" width="0.0797%" height="15" fill="rgb(227,149,46)" fg:x="4332" fg:w="4"/><text x="86.6136%" y="351.50"></text></g><g><title>ntdll`RtlAllocateHeap (139 samples, 2.77%)</title><rect x="91.5470%" y="309" width="2.7711%" height="15" fill="rgb(218,36,50)" fg:x="4592" fg:w="139"/><text x="91.7970%" y="319.50">nt..</text></g><g><title>ntdll`RtlAllocateHeap (1 samples, 0.02%)</title><rect x="94.2982%" y="293" width="0.0199%" height="15" fill="rgb(226,80,48)" fg:x="4730" fg:w="1"/><text x="94.5482%" y="303.50"></text></g><g><title>ntdll`RtlTryEnterCriticalSection (1 samples, 0.02%)</title><rect x="94.3182%" y="309" width="0.0199%" height="15" fill="rgb(238,224,15)" fg:x="4731" fg:w="1"/><text x="94.5682%" y="319.50"></text></g><g><title>ntdll`RtlTryEnterCriticalSection (1 samples, 0.02%)</title><rect x="94.3182%" y="293" width="0.0199%" height="15" fill="rgb(241,136,10)" fg:x="4731" fg:w="1"/><text x="94.5682%" y="303.50"></text></g><g><title>ntdll`RtlAllocateHeap (444 samples, 8.85%)</title><rect x="87.2010%" y="341" width="8.8517%" height="15" fill="rgb(208,32,45)" fg:x="4374" fg:w="444"/><text x="87.4510%" y="351.50">ntdll`RtlAllo..</text></g><g><title>ntdll`RtlAllocateHeap (385 samples, 7.68%)</title><rect x="88.3772%" y="325" width="7.6754%" height="15" fill="rgb(207,135,9)" fg:x="4433" fg:w="385"/><text x="88.6272%" y="335.50">ntdll`RtlAl..</text></g><g><title>ntdll`RtlUnhandledExceptionFilter (86 samples, 1.71%)</title><rect x="94.3381%" y="309" width="1.7145%" height="15" fill="rgb(206,86,44)" fg:x="4732" fg:w="86"/><text x="94.5881%" y="319.50"></text></g><g><title>toy`_rust_alloc (1 samples, 0.02%)</title><rect x="96.0526%" y="341" width="0.0199%" height="15" fill="rgb(245,177,15)" fg:x="4818" fg:w="1"/><text x="96.3026%" y="351.50"></text></g><g><title>toy`std::alloc::__default_lib_allocator::__rdl_alloc (9 samples, 0.18%)</title><rect x="96.0726%" y="341" width="0.1794%" height="15" fill="rgb(206,64,50)" fg:x="4819" fg:w="9"/><text x="96.3226%" y="351.50"></text></g><g><title>toy`hashbrown::raw::inner::RawTable&lt;tuple$&lt;usize,smallvec::SmallVec&lt;array$&lt;usize,3&gt; &gt; &gt;,allocator_api2::stable::alloc::global::Global&gt;::reserve_rehash&lt;tuple$&lt;usize,smallvec::SmallVec&lt;array$&lt;usize,3&gt; &gt; &gt;,allocator_api2::stable::alloc::global::Global,hashbrown::map::make_hasher::closure_env$0&lt;usize,smallvec::SmallVec&lt;array$&lt;usize,3&gt; &gt;,core::hash::BuildHasherDefault (661 samples, 13.18%)</title><rect x="83.3533%" y="373" width="13.1778%" height="15" fill="rgb(234,36,40)" fg:x="4181" fg:w="661"/><text x="83.6033%" y="383.50">toy`hashbrown::raw::..</text></g><g><title>toy`hashbrown::raw::inner::RawTableInner::fallible_with_capacity (506 samples, 10.09%)</title><rect x="86.4434%" y="357" width="10.0877%" height="15" fill="rgb(213,64,8)" fg:x="4336" fg:w="506"/><text x="86.6934%" y="367.50">toy`hashbrown::..</text></g><g><title>vcruntime140`memset (14 samples, 0.28%)</title><rect x="96.2520%" y="341" width="0.2791%" height="15" fill="rgb(210,75,36)" fg:x="4828" fg:w="14"/><text x="96.5020%" y="351.50"></text></g><g><title>toy`memcpy (3 samples, 0.06%)</title><rect x="96.5311%" y="373" width="0.0598%" height="15" fill="rgb(229,88,21)" fg:x="4842" fg:w="3"/><text x="96.7811%" y="383.50"></text></g><g><title>ntdll`RtlAllocateHeap (1 samples, 0.02%)</title><rect x="97.0096%" y="357" width="0.0199%" height="15" fill="rgb(252,204,47)" fg:x="4866" fg:w="1"/><text x="97.2596%" y="367.50"></text></g><g><title>ntdll`RtlAllocateHeap (1 samples, 0.02%)</title><rect x="97.0096%" y="341" width="0.0199%" height="15" fill="rgb(208,77,27)" fg:x="4866" fg:w="1"/><text x="97.2596%" y="351.50"></text></g><g><title>ntdll`RtlFreeHeap (2 samples, 0.04%)</title><rect x="97.0295%" y="357" width="0.0399%" height="15" fill="rgb(221,76,26)" fg:x="4867" fg:w="2"/><text x="97.2795%" y="367.50"></text></g><g><title>ntdll`RtlCopyMemory (2 samples, 0.04%)</title><rect x="97.0295%" y="341" width="0.0399%" height="15" fill="rgb(225,139,18)" fg:x="4867" fg:w="2"/><text x="97.2795%" y="351.50"></text></g><g><title>toy`alloc::collections::binary_heap::BinaryHeap&lt;petgraph::scored::MinScored&lt;i32,petgraph::graph_impl::NodeIndex&lt;u32&gt; &gt;,alloc::alloc::Global&gt;::pop&lt;petgraph::scored::MinScored&lt;i32,petgraph::graph_impl::NodeIndex (4 samples, 0.08%)</title><rect x="97.0694%" y="357" width="0.0797%" height="15" fill="rgb(230,137,11)" fg:x="4869" fg:w="4"/><text x="97.3194%" y="367.50"></text></g><g><title>ntdll`RtlAllocateHeap (3 samples, 0.06%)</title><rect x="97.1491%" y="277" width="0.0598%" height="15" fill="rgb(212,28,1)" fg:x="4873" fg:w="3"/><text x="97.3991%" y="287.50"></text></g><g><title>ntdll`RtlAllocateHeap (2 samples, 0.04%)</title><rect x="97.1691%" y="261" width="0.0399%" height="15" fill="rgb(248,164,17)" fg:x="4874" fg:w="2"/><text x="97.4191%" y="271.50"></text></g><g><title>ntdll`RtlCopyMemory (1 samples, 0.02%)</title><rect x="97.2089%" y="261" width="0.0199%" height="15" fill="rgb(222,171,42)" fg:x="4876" fg:w="1"/><text x="97.4589%" y="271.50"></text></g><g><title>toy`alloc::raw_vec::RawVec&lt;petgraph::graph_impl::NodeIndex&lt;u32&gt;,alloc::alloc::Global&gt;::reserve_for_push&lt;petgraph::graph_impl::NodeIndex (5 samples, 0.10%)</title><rect x="97.1491%" y="357" width="0.0997%" height="15" fill="rgb(243,84,45)" fg:x="4873" fg:w="5"/><text x="97.3991%" y="367.50"></text></g><g><title>toy`alloc::raw_vec::finish_grow (5 samples, 0.10%)</title><rect x="97.1491%" y="341" width="0.0997%" height="15" fill="rgb(252,49,23)" fg:x="4873" fg:w="5"/><text x="97.3991%" y="351.50"></text></g><g><title>ntdll`RtlReAllocateHeap (5 samples, 0.10%)</title><rect x="97.1491%" y="325" width="0.0997%" height="15" fill="rgb(215,19,7)" fg:x="4873" fg:w="5"/><text x="97.3991%" y="335.50"></text></g><g><title>ntdll`RtlReAllocateHeap (5 samples, 0.10%)</title><rect x="97.1491%" y="309" width="0.0997%" height="15" fill="rgb(238,81,41)" fg:x="4873" fg:w="5"/><text x="97.3991%" y="319.50"></text></g><g><title>ntdll`RtlReAllocateHeap (5 samples, 0.10%)</title><rect x="97.1491%" y="293" width="0.0997%" height="15" fill="rgb(210,199,37)" fg:x="4873" fg:w="5"/><text x="97.3991%" y="303.50"></text></g><g><title>ntdll`RtlFreeHeap (2 samples, 0.04%)</title><rect x="97.2089%" y="277" width="0.0399%" height="15" fill="rgb(244,192,49)" fg:x="4876" fg:w="2"/><text x="97.4589%" y="287.50"></text></g><g><title>ntdll`RtlGetCurrentServiceSessionId (1 samples, 0.02%)</title><rect x="97.2289%" y="261" width="0.0199%" height="15" fill="rgb(226,211,11)" fg:x="4877" fg:w="1"/><text x="97.4789%" y="271.50"></text></g><g><title>toy`alloc::raw_vec::RawVec&lt;petgraph::scored::MinScored&lt;i32,petgraph::graph_impl::NodeIndex&lt;u32&gt; &gt;,alloc::alloc::Global&gt;::reserve_for_push&lt;petgraph::scored::MinScored&lt;i32,petgraph::graph_impl::NodeIndex (3 samples, 0.06%)</title><rect x="97.2488%" y="357" width="0.0598%" height="15" fill="rgb(236,162,54)" fg:x="4878" fg:w="3"/><text x="97.4988%" y="367.50"></text></g><g><title>toy`alloc::raw_vec::finish_grow (3 samples, 0.06%)</title><rect x="97.2488%" y="341" width="0.0598%" height="15" fill="rgb(220,229,9)" fg:x="4878" fg:w="3"/><text x="97.4988%" y="351.50"></text></g><g><title>ntdll`RtlAllocateHeap (2 samples, 0.04%)</title><rect x="97.2687%" y="325" width="0.0399%" height="15" fill="rgb(250,87,22)" fg:x="4879" fg:w="2"/><text x="97.5187%" y="335.50"></text></g><g><title>ntdll`RtlAllocateHeap (2 samples, 0.04%)</title><rect x="97.2687%" y="309" width="0.0399%" height="15" fill="rgb(239,43,17)" fg:x="4879" fg:w="2"/><text x="97.5187%" y="319.50"></text></g><g><title>toy`core::hash::BuildHasher::hash_one&lt;std::hash::random::RandomState,ref$&lt;petgraph::graph_impl::NodeIndex (2 samples, 0.04%)</title><rect x="97.3086%" y="357" width="0.0399%" height="15" fill="rgb(231,177,25)" fg:x="4881" fg:w="2"/><text x="97.5586%" y="367.50"></text></g><g><title>toy`core::hash::BuildHasher::hash_one&lt;std::hash::random::RandomState,ref$&lt;petgraph::graph_impl::NodeIndex (6 samples, 0.12%)</title><rect x="97.3884%" y="341" width="0.1196%" height="15" fill="rgb(219,179,1)" fg:x="4885" fg:w="6"/><text x="97.6384%" y="351.50"></text></g><g><title>toy`core::hash::sip::impl$5::write (1 samples, 0.02%)</title><rect x="97.4880%" y="325" width="0.0199%" height="15" fill="rgb(238,219,53)" fg:x="4890" fg:w="1"/><text x="97.7380%" y="335.50"></text></g><g><title>ntdll`RtlAllocateHeap (3 samples, 0.06%)</title><rect x="97.5478%" y="325" width="0.0598%" height="15" fill="rgb(232,167,36)" fg:x="4893" fg:w="3"/><text x="97.7978%" y="335.50"></text></g><g><title>ntdll`RtlAllocateHeap (3 samples, 0.06%)</title><rect x="97.5478%" y="309" width="0.0598%" height="15" fill="rgb(244,19,51)" fg:x="4893" fg:w="3"/><text x="97.7978%" y="319.50"></text></g><g><title>ntdll`RtlFreeHeap (1 samples, 0.02%)</title><rect x="97.6077%" y="325" width="0.0199%" height="15" fill="rgb(224,6,22)" fg:x="4896" fg:w="1"/><text x="97.8577%" y="335.50"></text></g><g><title>ntdll`RtlCopyMemory (1 samples, 0.02%)</title><rect x="97.6077%" y="309" width="0.0199%" height="15" fill="rgb(224,145,5)" fg:x="4896" fg:w="1"/><text x="97.8577%" y="319.50"></text></g><g><title>toy`core::hash::BuildHasher::hash_one&lt;std::hash::random::RandomState,ref$&lt;petgraph::graph_impl::NodeIndex (7 samples, 0.14%)</title><rect x="97.6276%" y="325" width="0.1396%" height="15" fill="rgb(234,130,49)" fg:x="4897" fg:w="7"/><text x="97.8776%" y="335.50"></text></g><g><title>toy`hashbrown::map::HashMap&lt;petgraph::graph_impl::NodeIndex&lt;u32&gt;,i32,std::hash::random::RandomState,alloc::alloc::Global&gt;::insert&lt;petgraph::graph_impl::NodeIndex (22 samples, 0.44%)</title><rect x="97.3485%" y="357" width="0.4386%" height="15" fill="rgb(254,6,2)" fg:x="4883" fg:w="22"/><text x="97.5985%" y="367.50"></text></g><g><title>toy`hashbrown::raw::RawTable&lt;tuple$&lt;petgraph::graph_impl::NodeIndex&lt;u32&gt;,i32&gt;,alloc::alloc::Global&gt;::reserve_rehash&lt;tuple$&lt;petgraph::graph_impl::NodeIndex&lt;u32&gt;,i32&gt;,alloc::alloc::Global,hashbrown::map::make_hasher::closure_env$0&lt;petgraph::graph_impl::NodeIndex (14 samples, 0.28%)</title><rect x="97.5080%" y="341" width="0.2791%" height="15" fill="rgb(208,96,46)" fg:x="4891" fg:w="14"/><text x="97.7580%" y="351.50"></text></g><g><title>toy`std::alloc::__default_lib_allocator::__rdl_alloc (1 samples, 0.02%)</title><rect x="97.7671%" y="325" width="0.0199%" height="15" fill="rgb(239,3,39)" fg:x="4904" fg:w="1"/><text x="98.0171%" y="335.50"></text></g><g><title>ntdll`RtlAllocateHeap (4 samples, 0.08%)</title><rect x="98.0263%" y="309" width="0.0797%" height="15" fill="rgb(233,210,1)" fg:x="4917" fg:w="4"/><text x="98.2763%" y="319.50"></text></g><g><title>ntdll`RtlAllocateHeap (2 samples, 0.04%)</title><rect x="98.0662%" y="293" width="0.0399%" height="15" fill="rgb(244,137,37)" fg:x="4919" fg:w="2"/><text x="98.3162%" y="303.50"></text></g><g><title>ntdll`RtlTryEnterCriticalSection (1 samples, 0.02%)</title><rect x="98.1061%" y="309" width="0.0199%" height="15" fill="rgb(240,136,2)" fg:x="4921" fg:w="1"/><text x="98.3561%" y="319.50"></text></g><g><title>ntdll`RtlTryEnterCriticalSection (1 samples, 0.02%)</title><rect x="98.1061%" y="293" width="0.0199%" height="15" fill="rgb(239,18,37)" fg:x="4921" fg:w="1"/><text x="98.3561%" y="303.50"></text></g><g><title>ntdll`RtlAllocateHeap (12 samples, 0.24%)</title><rect x="97.9864%" y="341" width="0.2392%" height="15" fill="rgb(218,185,22)" fg:x="4915" fg:w="12"/><text x="98.2364%" y="351.50"></text></g><g><title>ntdll`RtlAllocateHeap (12 samples, 0.24%)</title><rect x="97.9864%" y="325" width="0.2392%" height="15" fill="rgb(225,218,4)" fg:x="4915" fg:w="12"/><text x="98.2364%" y="335.50"></text></g><g><title>ntdll`RtlUnhandledExceptionFilter (5 samples, 0.10%)</title><rect x="98.1260%" y="309" width="0.0997%" height="15" fill="rgb(230,182,32)" fg:x="4922" fg:w="5"/><text x="98.3760%" y="319.50"></text></g><g><title>ntdll`RtlFreeHeap (1 samples, 0.02%)</title><rect x="98.2257%" y="341" width="0.0199%" height="15" fill="rgb(242,56,43)" fg:x="4927" fg:w="1"/><text x="98.4757%" y="351.50"></text></g><g><title>ntdll`RtlGetCurrentServiceSessionId (1 samples, 0.02%)</title><rect x="98.2257%" y="325" width="0.0199%" height="15" fill="rgb(233,99,24)" fg:x="4927" fg:w="1"/><text x="98.4757%" y="335.50"></text></g><g><title>toy`petgraph::algo::astar::astar&lt;ref$&lt;petgraph::graph_impl::Graph&lt;enum2$&lt;aeg::aeg::Node&gt;,aeg::aeg::AegEdge,enum2$ (90 samples, 1.79%)</title><rect x="96.5909%" y="373" width="1.7943%" height="15" fill="rgb(234,209,42)" fg:x="4845" fg:w="90"/><text x="96.8409%" y="383.50">t..</text></g><g><title>toy`hashbrown::raw::RawTable&lt;tuple$&lt;petgraph::graph_impl::NodeIndex&lt;u32&gt;,i32&gt;,alloc::alloc::Global&gt;::reserve_rehash&lt;tuple$&lt;petgraph::graph_impl::NodeIndex&lt;u32&gt;,i32&gt;,alloc::alloc::Global,hashbrown::map::make_hasher::closure_env$0&lt;petgraph::graph_impl::NodeIndex (30 samples, 0.60%)</title><rect x="97.7871%" y="357" width="0.5981%" height="15" fill="rgb(227,7,12)" fg:x="4905" fg:w="30"/><text x="98.0371%" y="367.50"></text></g><g><title>toy`core::hash::BuildHasher::hash_one&lt;std::hash::random::RandomState,ref$&lt;petgraph::graph_impl::NodeIndex (7 samples, 0.14%)</title><rect x="98.2456%" y="341" width="0.1396%" height="15" fill="rgb(245,203,43)" fg:x="4928" fg:w="7"/><text x="98.4956%" y="351.50"></text></g><g><title>toy`core::hash::sip::impl$5::write (1 samples, 0.02%)</title><rect x="98.3652%" y="325" width="0.0199%" height="15" fill="rgb(238,205,33)" fg:x="4934" fg:w="1"/><text x="98.6152%" y="335.50"></text></g><g><title>toy`std::alloc::__default_lib_allocator::__rdl_alloc (9 samples, 0.18%)</title><rect x="98.3852%" y="373" width="0.1794%" height="15" fill="rgb(231,56,7)" fg:x="4935" fg:w="9"/><text x="98.6352%" y="383.50"></text></g><g><title>toy`std::alloc::__default_lib_allocator::__rdl_dealloc (10 samples, 0.20%)</title><rect x="98.5646%" y="373" width="0.1994%" height="15" fill="rgb(244,186,29)" fg:x="4944" fg:w="10"/><text x="98.8146%" y="383.50"></text></g><g><title>vcruntime140`memcmp (3 samples, 0.06%)</title><rect x="98.7640%" y="373" width="0.0598%" height="15" fill="rgb(234,111,31)" fg:x="4954" fg:w="3"/><text x="99.0140%" y="383.50"></text></g><g><title>toy`aeg::aeg::AbstractEventGraph::find_critical_cycles (4,938 samples, 98.44%)</title><rect x="0.7376%" y="405" width="98.4450%" height="15" fill="rgb(241,149,10)" fg:x="37" fg:w="4938"/><text x="0.9876%" y="415.50">toy`aeg::aeg::AbstractEventGraph::find_critical_cycles</text></g><g><title>toy`aeg::critical_cycles::critical_cycles (4,938 samples, 98.44%)</title><rect x="0.7376%" y="389" width="98.4450%" height="15" fill="rgb(249,206,44)" fg:x="37" fg:w="4938"/><text x="0.9876%" y="399.50">toy`aeg::critical_cycles::critical_cycles</text></g><g><title>vcruntime140`memmove (18 samples, 0.36%)</title><rect x="98.8238%" y="373" width="0.3589%" height="15" fill="rgb(251,153,30)" fg:x="4957" fg:w="18"/><text x="99.0738%" y="383.50"></text></g><g><title>ntdll`LdrGetDllHandleByMapping (1 samples, 0.02%)</title><rect x="99.1826%" y="197" width="0.0199%" height="15" fill="rgb(239,152,38)" fg:x="4975" fg:w="1"/><text x="99.4326%" y="207.50"></text></g><g><title>ntdll`LdrAddRefDll (1 samples, 0.02%)</title><rect x="99.1826%" y="181" width="0.0199%" height="15" fill="rgb(249,139,47)" fg:x="4975" fg:w="1"/><text x="99.4326%" y="191.50"></text></g><g><title>ntdll`LdrControlFlowGuardEnforced (1 samples, 0.02%)</title><rect x="99.1826%" y="165" width="0.0199%" height="15" fill="rgb(244,64,35)" fg:x="4975" fg:w="1"/><text x="99.4326%" y="175.50"></text></g><g><title>ntdll`RtlAddressInSectionTable (1 samples, 0.02%)</title><rect x="99.1826%" y="149" width="0.0199%" height="15" fill="rgb(216,46,15)" fg:x="4975" fg:w="1"/><text x="99.4326%" y="159.50"></text></g><g><title>ntdll`RtlAddressInSectionTable (1 samples, 0.02%)</title><rect x="99.1826%" y="133" width="0.0199%" height="15" fill="rgb(250,74,19)" fg:x="4975" fg:w="1"/><text x="99.4326%" y="143.50"></text></g><g><title>toy`aeg::aeg::AbstractEventGraph::with_config (2 samples, 0.04%)</title><rect x="99.1826%" y="405" width="0.0399%" height="15" fill="rgb(249,42,33)" fg:x="4975" fg:w="2"/><text x="99.4326%" y="415.50"></text></g><g><title>toy`aeg::aeg::create_aeg (2 samples, 0.04%)</title><rect x="99.1826%" y="389" width="0.0399%" height="15" fill="rgb(242,149,17)" fg:x="4975" fg:w="2"/><text x="99.4326%" y="399.50"></text></g><g><title>toy`std::sys::common::thread_local::fast_local::Key&lt;core::cell::Cell&lt;tuple$&lt;u64,u64&gt; &gt; &gt;::try_initialize&lt;core::cell::Cell&lt;tuple$ (2 samples, 0.04%)</title><rect x="99.1826%" y="373" width="0.0399%" height="15" fill="rgb(244,29,21)" fg:x="4975" fg:w="2"/><text x="99.4326%" y="383.50"></text></g><g><title>toy`std::sys::windows::rand::hashmap_random_keys (2 samples, 0.04%)</title><rect x="99.1826%" y="357" width="0.0399%" height="15" fill="rgb(220,130,37)" fg:x="4975" fg:w="2"/><text x="99.4326%" y="367.50"></text></g><g><title>bcrypt`BCryptGenRandom (2 samples, 0.04%)</title><rect x="99.1826%" y="341" width="0.0399%" height="15" fill="rgb(211,67,2)" fg:x="4975" fg:w="2"/><text x="99.4326%" y="351.50"></text></g><g><title>bcrypt`BCryptGenRandom (2 samples, 0.04%)</title><rect x="99.1826%" y="325" width="0.0399%" height="15" fill="rgb(235,68,52)" fg:x="4975" fg:w="2"/><text x="99.4326%" y="335.50"></text></g><g><title>bcrypt`BCryptOpenAlgorithmProvider (2 samples, 0.04%)</title><rect x="99.1826%" y="309" width="0.0399%" height="15" fill="rgb(246,142,3)" fg:x="4975" fg:w="2"/><text x="99.4326%" y="319.50"></text></g><g><title>bcrypt`BCryptDecrypt (2 samples, 0.04%)</title><rect x="99.1826%" y="293" width="0.0399%" height="15" fill="rgb(241,25,7)" fg:x="4975" fg:w="2"/><text x="99.4326%" y="303.50"></text></g><g><title>bcrypt`BCryptDecrypt (2 samples, 0.04%)</title><rect x="99.1826%" y="277" width="0.0399%" height="15" fill="rgb(242,119,39)" fg:x="4975" fg:w="2"/><text x="99.4326%" y="287.50"></text></g><g><title>KernelBase`LoadLibraryExW (2 samples, 0.04%)</title><rect x="99.1826%" y="261" width="0.0399%" height="15" fill="rgb(241,98,45)" fg:x="4975" fg:w="2"/><text x="99.4326%" y="271.50"></text></g><g><title>ntdll`LdrLoadDll (2 samples, 0.04%)</title><rect x="99.1826%" y="245" width="0.0399%" height="15" fill="rgb(254,28,30)" fg:x="4975" fg:w="2"/><text x="99.4326%" y="255.50"></text></g><g><title>ntdll`RtlUnicodeToCustomCPN (2 samples, 0.04%)</title><rect x="99.1826%" y="229" width="0.0399%" height="15" fill="rgb(241,142,54)" fg:x="4975" fg:w="2"/><text x="99.4326%" y="239.50"></text></g><g><title>ntdll`RtlImageRvaToSection (2 samples, 0.04%)</title><rect x="99.1826%" y="213" width="0.0399%" height="15" fill="rgb(222,85,15)" fg:x="4975" fg:w="2"/><text x="99.4326%" y="223.50"></text></g><g><title>ntdll`RtlCopyUnicodeString (1 samples, 0.02%)</title><rect x="99.2026%" y="197" width="0.0199%" height="15" fill="rgb(210,85,47)" fg:x="4976" fg:w="1"/><text x="99.4526%" y="207.50"></text></g><g><title>ntdll`RtlEnumerateEntryHashTable (1 samples, 0.02%)</title><rect x="99.2026%" y="181" width="0.0199%" height="15" fill="rgb(224,206,25)" fg:x="4976" fg:w="1"/><text x="99.4526%" y="191.50"></text></g><g><title>ntdll`RtlEnumerateEntryHashTable (1 samples, 0.02%)</title><rect x="99.2026%" y="165" width="0.0199%" height="15" fill="rgb(243,201,19)" fg:x="4976" fg:w="1"/><text x="99.4526%" y="175.50"></text></g><g><title>ntdll`RtlActivateActivationContextUnsafeFast (1 samples, 0.02%)</title><rect x="99.2026%" y="149" width="0.0199%" height="15" fill="rgb(236,59,4)" fg:x="4976" fg:w="1"/><text x="99.4526%" y="159.50"></text></g><g><title>bcryptprimitives`ProcessPrngGuid (1 samples, 0.02%)</title><rect x="99.2026%" y="133" width="0.0199%" height="15" fill="rgb(254,179,45)" fg:x="4976" fg:w="1"/><text x="99.4526%" y="143.50"></text></g><g><title>bcryptprimitives`ProcessPrngGuid (1 samples, 0.02%)</title><rect x="99.2026%" y="117" width="0.0199%" height="15" fill="rgb(226,14,10)" fg:x="4976" fg:w="1"/><text x="99.4526%" y="127.50"></text></g><g><title>bcryptprimitives`MSCryptConvertRsaPrivateBlobToFullRsaBlob (1 samples, 0.02%)</title><rect x="99.2026%" y="101" width="0.0199%" height="15" fill="rgb(244,27,41)" fg:x="4976" fg:w="1"/><text x="99.4526%" y="111.50"></text></g><g><title>KernelBase`RegOpenKeyExW (1 samples, 0.02%)</title><rect x="99.2026%" y="85" width="0.0199%" height="15" fill="rgb(235,35,32)" fg:x="4976" fg:w="1"/><text x="99.4526%" y="95.50"></text></g><g><title>KernelBase`RegOpenKeyExInternalW (1 samples, 0.02%)</title><rect x="99.2026%" y="69" width="0.0199%" height="15" fill="rgb(218,68,31)" fg:x="4976" fg:w="1"/><text x="99.4526%" y="79.50"></text></g><g><title>KernelBase`MapPredefinedHandleInternal (1 samples, 0.02%)</title><rect x="99.2026%" y="53" width="0.0199%" height="15" fill="rgb(207,120,37)" fg:x="4976" fg:w="1"/><text x="99.4526%" y="63.50"></text></g><g><title>ntdll`NtOpenKeyEx (1 samples, 0.02%)</title><rect x="99.2026%" y="37" width="0.0199%" height="15" fill="rgb(227,98,0)" fg:x="4976" fg:w="1"/><text x="99.4526%" y="47.50"></text></g><g><title>toy`clap_builder::builder::command::Command::get_matches_from (1 samples, 0.02%)</title><rect x="99.2225%" y="405" width="0.0199%" height="15" fill="rgb(207,7,3)" fg:x="4977" fg:w="1"/><text x="99.4725%" y="415.50"></text></g><g><title>toy`clap_builder::builder::command::Command::_do_parse (1 samples, 0.02%)</title><rect x="99.2225%" y="389" width="0.0199%" height="15" fill="rgb(206,98,19)" fg:x="4977" fg:w="1"/><text x="99.4725%" y="399.50"></text></g><g><title>toy`clap_builder::parser::parser::Parser::get_matches_with (1 samples, 0.02%)</title><rect x="99.2225%" y="373" width="0.0199%" height="15" fill="rgb(217,5,26)" fg:x="4977" fg:w="1"/><text x="99.4725%" y="383.50"></text></g><g><title>toy`clap_builder::parser::parser::Parser::get_matches_with (1 samples, 0.02%)</title><rect x="99.2225%" y="357" width="0.0199%" height="15" fill="rgb(235,190,38)" fg:x="4977" fg:w="1"/><text x="99.4725%" y="367.50"></text></g><g><title>toy`clap_builder::parser::parser::Parser::resolve_pending (1 samples, 0.02%)</title><rect x="99.2225%" y="341" width="0.0199%" height="15" fill="rgb(247,86,24)" fg:x="4977" fg:w="1"/><text x="99.4725%" y="351.50"></text></g><g><title>toy`parser::parse_statement (1 samples, 0.02%)</title><rect x="99.2424%" y="389" width="0.0199%" height="15" fill="rgb(205,101,16)" fg:x="4978" fg:w="1"/><text x="99.4924%" y="399.50"></text></g><g><title>toy`parser::parse_statement (1 samples, 0.02%)</title><rect x="99.2424%" y="373" width="0.0199%" height="15" fill="rgb(246,168,33)" fg:x="4978" fg:w="1"/><text x="99.4924%" y="383.50"></text></g><g><title>toy`parser::parse_statement (1 samples, 0.02%)</title><rect x="99.2424%" y="357" width="0.0199%" height="15" fill="rgb(231,114,1)" fg:x="4978" fg:w="1"/><text x="99.4924%" y="367.50"></text></g><g><title>toy`alloc::raw_vec::RawVec&lt;clap_builder::parser::matches::matched_arg::MatchedArg,alloc::alloc::Global&gt;::reserve_for_push (1 samples, 0.02%)</title><rect x="99.2424%" y="341" width="0.0199%" height="15" fill="rgb(207,184,53)" fg:x="4978" fg:w="1"/><text x="99.4924%" y="351.50"></text></g><g><title>toy`alloc::raw_vec::finish_grow (1 samples, 0.02%)</title><rect x="99.2424%" y="325" width="0.0199%" height="15" fill="rgb(224,95,51)" fg:x="4978" fg:w="1"/><text x="99.4924%" y="335.50"></text></g><g><title>ntdll`RtlAllocateHeap (1 samples, 0.02%)</title><rect x="99.2424%" y="309" width="0.0199%" height="15" fill="rgb(212,188,45)" fg:x="4978" fg:w="1"/><text x="99.4924%" y="319.50"></text></g><g><title>ntdll`RtlAllocateHeap (1 samples, 0.02%)</title><rect x="99.2424%" y="293" width="0.0199%" height="15" fill="rgb(223,154,38)" fg:x="4978" fg:w="1"/><text x="99.4924%" y="303.50"></text></g><g><title>toy`parser::parse (2 samples, 0.04%)</title><rect x="99.2424%" y="405" width="0.0399%" height="15" fill="rgb(251,22,52)" fg:x="4978" fg:w="2"/><text x="99.4924%" y="415.50"></text></g><g><title>toy`pest::parser_state::state (1 samples, 0.02%)</title><rect x="99.2624%" y="389" width="0.0199%" height="15" fill="rgb(229,209,22)" fg:x="4979" fg:w="1"/><text x="99.5124%" y="399.50"></text></g><g><title>toy`pest::parser_state::ParserState&lt;parser::Rule&gt;::rule (1 samples, 0.02%)</title><rect x="99.2624%" y="373" width="0.0199%" height="15" fill="rgb(234,138,34)" fg:x="4979" fg:w="1"/><text x="99.5124%" y="383.50"></text></g><g><title>toy`parser::impl$1::parse::rules::visible::thread::closure$0::closure$0::closure$5::closure$0::closure$0::closure$0::closure$0 (1 samples, 0.02%)</title><rect x="99.2624%" y="357" width="0.0199%" height="15" fill="rgb(212,95,11)" fg:x="4979" fg:w="1"/><text x="99.5124%" y="367.50"></text></g><g><title>toy`pest::parser_state::ParserState&lt;parser::Rule&gt;::rule (1 samples, 0.02%)</title><rect x="99.2624%" y="341" width="0.0199%" height="15" fill="rgb(240,179,47)" fg:x="4979" fg:w="1"/><text x="99.5124%" y="351.50"></text></g><g><title>toy`pest::parser_state::ParserState&lt;parser::Rule&gt;::rule (1 samples, 0.02%)</title><rect x="99.2624%" y="325" width="0.0199%" height="15" fill="rgb(240,163,11)" fg:x="4979" fg:w="1"/><text x="99.5124%" y="335.50"></text></g><g><title>toy`pest::parser_state::ParserState&lt;parser::Rule&gt;::repeat (1 samples, 0.02%)</title><rect x="99.2624%" y="309" width="0.0199%" height="15" fill="rgb(236,37,12)" fg:x="4979" fg:w="1"/><text x="99.5124%" y="319.50"></text></g><g><title>toy`pest::parser_state::ParserState&lt;parser::Rule&gt;::rule (1 samples, 0.02%)</title><rect x="99.2624%" y="293" width="0.0199%" height="15" fill="rgb(232,164,16)" fg:x="4979" fg:w="1"/><text x="99.5124%" y="303.50"></text></g><g><title>toy`pest::parser_state::ParserState&lt;parser::Rule&gt;::rule (1 samples, 0.02%)</title><rect x="99.2624%" y="277" width="0.0199%" height="15" fill="rgb(244,205,15)" fg:x="4979" fg:w="1"/><text x="99.5124%" y="287.50"></text></g><g><title>toy`pest::parser_state::ParserState&lt;parser::Rule&gt;::rule (1 samples, 0.02%)</title><rect x="99.2624%" y="261" width="0.0199%" height="15" fill="rgb(223,117,47)" fg:x="4979" fg:w="1"/><text x="99.5124%" y="271.50"></text></g><g><title>toy`pest::parser_state::ParserState&lt;parser::Rule&gt;::rule (1 samples, 0.02%)</title><rect x="99.2624%" y="245" width="0.0199%" height="15" fill="rgb(244,107,35)" fg:x="4979" fg:w="1"/><text x="99.5124%" y="255.50"></text></g><g><title>toy`pest::parser_state::ParserState&lt;parser::Rule&gt;::rule (1 samples, 0.02%)</title><rect x="99.2624%" y="229" width="0.0199%" height="15" fill="rgb(205,140,8)" fg:x="4979" fg:w="1"/><text x="99.5124%" y="239.50"></text></g><g><title>toy`parser::impl$1::parse::rules::hidden::skip (1 samples, 0.02%)</title><rect x="99.2624%" y="213" width="0.0199%" height="15" fill="rgb(228,84,46)" fg:x="4979" fg:w="1"/><text x="99.5124%" y="223.50"></text></g><g><title>toy`parser::impl$1::parse::rules::hidden::skip::closure$0::closure$1::closure$0 (1 samples, 0.02%)</title><rect x="99.2624%" y="197" width="0.0199%" height="15" fill="rgb(254,188,9)" fg:x="4979" fg:w="1"/><text x="99.5124%" y="207.50"></text></g><g><title>toy`petgraph::graph_impl::serialization::_::impl$0::serialize&lt;enum2$&lt;aeg::aeg::Node&gt;,aeg::aeg::AegEdge,u32,ref_mut$&lt;serde_json::ser::Serializer&lt;ref_mut$&lt;alloc::vec::Vec (1 samples, 0.02%)</title><rect x="99.2823%" y="405" width="0.0199%" height="15" fill="rgb(206,112,54)" fg:x="4980" fg:w="1"/><text x="99.5323%" y="415.50"></text></g><g><title>toy`petgraph::serde_utils::CollectSeqWithLength::collect_seq_exact&lt;ref_mut$&lt;serde_json::ser::Serializer&lt;ref_mut$&lt;alloc::vec::Vec&lt;u8,alloc::alloc::Global&gt; &gt;,serde_json::ser::CompactFormatter&gt; &gt;,core::iter::adapters::map::Map&lt;core::slice::iter::Iter&lt;petgraph::graph_impl::Edge&lt;aeg::aeg::AegEdge,u32&gt; &gt;,petgraph::graph_impl::serialization::ser_graph_edges::closure_env$0&lt;ref_mut$&lt;serde_json::ser::Serializer&lt;ref_mut$&lt;alloc::vec::Vec (1 samples, 0.02%)</title><rect x="99.2823%" y="389" width="0.0199%" height="15" fill="rgb(216,84,49)" fg:x="4980" fg:w="1"/><text x="99.5323%" y="399.50"></text></g><g><title>toy`serde_json::ser::format_escaped_str&lt;ref_mut$&lt;alloc::vec::Vec (1 samples, 0.02%)</title><rect x="99.2823%" y="373" width="0.0199%" height="15" fill="rgb(214,194,35)" fg:x="4980" fg:w="1"/><text x="99.5323%" y="383.50"></text></g><g><title>toy`alloc::raw_vec::impl$2::reserve::do_reserve_and_handle (1 samples, 0.02%)</title><rect x="99.2823%" y="357" width="0.0199%" height="15" fill="rgb(249,28,3)" fg:x="4980" fg:w="1"/><text x="99.5323%" y="367.50"></text></g><g><title>toy`alloc::raw_vec::finish_grow (1 samples, 0.02%)</title><rect x="99.2823%" y="341" width="0.0199%" height="15" fill="rgb(222,56,52)" fg:x="4980" fg:w="1"/><text x="99.5323%" y="351.50"></text></g><g><title>ntdll`RtlReAllocateHeap (1 samples, 0.02%)</title><rect x="99.2823%" y="325" width="0.0199%" height="15" fill="rgb(245,217,50)" fg:x="4980" fg:w="1"/><text x="99.5323%" y="335.50"></text></g><g><title>ntdll`RtlReAllocateHeap (1 samples, 0.02%)</title><rect x="99.2823%" y="309" width="0.0199%" height="15" fill="rgb(213,201,24)" fg:x="4980" fg:w="1"/><text x="99.5323%" y="319.50"></text></g><g><title>ntdll`RtlReAllocateHeap (1 samples, 0.02%)</title><rect x="99.2823%" y="293" width="0.0199%" height="15" fill="rgb(248,116,28)" fg:x="4980" fg:w="1"/><text x="99.5323%" y="303.50"></text></g><g><title>ntdll`RtlAllocateHeap (1 samples, 0.02%)</title><rect x="99.2823%" y="277" width="0.0199%" height="15" fill="rgb(219,72,43)" fg:x="4980" fg:w="1"/><text x="99.5323%" y="287.50"></text></g><g><title>ntdll`RtlAllocateHeap (1 samples, 0.02%)</title><rect x="99.2823%" y="261" width="0.0199%" height="15" fill="rgb(209,138,14)" fg:x="4980" fg:w="1"/><text x="99.5323%" y="271.50"></text></g><g><title>ntdll`RtlTryEnterCriticalSection (1 samples, 0.02%)</title><rect x="99.2823%" y="245" width="0.0199%" height="15" fill="rgb(222,18,33)" fg:x="4980" fg:w="1"/><text x="99.5323%" y="255.50"></text></g><g><title>ntdll`NtAllocateVirtualMemory (1 samples, 0.02%)</title><rect x="99.2823%" y="229" width="0.0199%" height="15" fill="rgb(213,199,7)" fg:x="4980" fg:w="1"/><text x="99.5323%" y="239.50"></text></g><g><title>toy`petgraph::graph_impl::serialization::impl$2::serialize&lt;u32,ref_mut$&lt;serde_json::ser::Serializer&lt;ref_mut$&lt;alloc::vec::Vec (8 samples, 0.16%)</title><rect x="99.3421%" y="357" width="0.1595%" height="15" fill="rgb(250,110,10)" fg:x="4983" fg:w="8"/><text x="99.5921%" y="367.50"></text></g><g><title>toy`serde::ser::Serializer::collect_seq&lt;ref_mut$&lt;serde_json::ser::Serializer&lt;ref_mut$&lt;alloc::vec::Vec&lt;u8,alloc::alloc::Global&gt; &gt;,serde_json::ser::CompactFormatter&gt; &gt;,ref$&lt;alloc::vec::Vec (13 samples, 0.26%)</title><rect x="99.3022%" y="405" width="0.2592%" height="15" fill="rgb(248,123,6)" fg:x="4981" fg:w="13"/><text x="99.5522%" y="415.50"></text></g><g><title>toy`aeg::critical_cycles::_::impl$0::serialize&lt;ref_mut$&lt;serde_json::ser::Serializer&lt;ref_mut$&lt;alloc::vec::Vec (13 samples, 0.26%)</title><rect x="99.3022%" y="389" width="0.2592%" height="15" fill="rgb(206,91,31)" fg:x="4981" fg:w="13"/><text x="99.5522%" y="399.50"></text></g><g><title>toy`serde::ser::SerializeMap::serialize_entry&lt;enum2$&lt;serde_json::ser::Compound&lt;ref_mut$&lt;alloc::vec::Vec&lt;u8,alloc::alloc::Global&gt; &gt;,serde_json::ser::CompactFormatter&gt; &gt;,str$,alloc::vec::Vec&lt;petgraph::graph_impl::NodeIndex (13 samples, 0.26%)</title><rect x="99.3022%" y="373" width="0.2592%" height="15" fill="rgb(211,154,13)" fg:x="4981" fg:w="13"/><text x="99.5522%" y="383.50"></text></g><g><title>toy`serde_json::ser::format_escaped_str&lt;ref_mut$&lt;alloc::vec::Vec (3 samples, 0.06%)</title><rect x="99.5016%" y="357" width="0.0598%" height="15" fill="rgb(225,148,7)" fg:x="4991" fg:w="3"/><text x="99.7516%" y="367.50"></text></g><g><title>toy`alloc::raw_vec::impl$2::reserve::do_reserve_and_handle (1 samples, 0.02%)</title><rect x="99.5415%" y="341" width="0.0199%" height="15" fill="rgb(220,160,43)" fg:x="4993" fg:w="1"/><text x="99.7915%" y="351.50"></text></g><g><title>toy`alloc::raw_vec::finish_grow (1 samples, 0.02%)</title><rect x="99.5415%" y="325" width="0.0199%" height="15" fill="rgb(213,52,39)" fg:x="4993" fg:w="1"/><text x="99.7915%" y="335.50"></text></g><g><title>ntdll`RtlReAllocateHeap (1 samples, 0.02%)</title><rect x="99.5415%" y="309" width="0.0199%" height="15" fill="rgb(243,137,7)" fg:x="4993" fg:w="1"/><text x="99.7915%" y="319.50"></text></g><g><title>ntdll`RtlReAllocateHeap (1 samples, 0.02%)</title><rect x="99.5415%" y="293" width="0.0199%" height="15" fill="rgb(230,79,13)" fg:x="4993" fg:w="1"/><text x="99.7915%" y="303.50"></text></g><g><title>ntdll`RtlReAllocateHeap (1 samples, 0.02%)</title><rect x="99.5415%" y="277" width="0.0199%" height="15" fill="rgb(247,105,23)" fg:x="4993" fg:w="1"/><text x="99.7915%" y="287.50"></text></g><g><title>ntdll`RtlCopyMemory (1 samples, 0.02%)</title><rect x="99.5415%" y="261" width="0.0199%" height="15" fill="rgb(223,179,41)" fg:x="4993" fg:w="1"/><text x="99.7915%" y="271.50"></text></g><g><title>toy`std::fs::read_to_string::inner (1 samples, 0.02%)</title><rect x="99.5614%" y="405" width="0.0199%" height="15" fill="rgb(218,9,34)" fg:x="4994" fg:w="1"/><text x="99.8114%" y="415.50"></text></g><g><title>toy`std::io::default_read_to_end (1 samples, 0.02%)</title><rect x="99.5614%" y="389" width="0.0199%" height="15" fill="rgb(222,106,8)" fg:x="4994" fg:w="1"/><text x="99.8114%" y="399.50"></text></g><g><title>toy`std::sys::windows::handle::Handle::read_buf (1 samples, 0.02%)</title><rect x="99.5614%" y="373" width="0.0199%" height="15" fill="rgb(211,220,0)" fg:x="4994" fg:w="1"/><text x="99.8114%" y="383.50"></text></g><g><title>toy`std::sys::windows::handle::Handle::synchronous_read (1 samples, 0.02%)</title><rect x="99.5614%" y="357" width="0.0199%" height="15" fill="rgb(229,52,16)" fg:x="4994" fg:w="1"/><text x="99.8114%" y="367.50"></text></g><g><title>ntdll`ZwReadFile (1 samples, 0.02%)</title><rect x="99.5614%" y="341" width="0.0199%" height="15" fill="rgb(212,155,18)" fg:x="4994" fg:w="1"/><text x="99.8114%" y="351.50"></text></g><g><title>KernelBase`GetConsoleMode (7 samples, 0.14%)</title><rect x="99.5813%" y="277" width="0.1396%" height="15" fill="rgb(242,21,14)" fg:x="4995" fg:w="7"/><text x="99.8313%" y="287.50"></text></g><g><title>KernelBase`GetConsoleScreenBufferInfoEx (7 samples, 0.14%)</title><rect x="99.5813%" y="261" width="0.1396%" height="15" fill="rgb(222,19,48)" fg:x="4995" fg:w="7"/><text x="99.8313%" y="271.50"></text></g><g><title>KernelBase`GetConsoleScreenBufferInfoEx (7 samples, 0.14%)</title><rect x="99.5813%" y="245" width="0.1396%" height="15" fill="rgb(232,45,27)" fg:x="4995" fg:w="7"/><text x="99.8313%" y="255.50"></text></g><g><title>ntdll`NtDeviceIoControlFile (7 samples, 0.14%)</title><rect x="99.5813%" y="229" width="0.1396%" height="15" fill="rgb(249,103,42)" fg:x="4995" fg:w="7"/><text x="99.8313%" y="239.50"></text></g><g><title>KernelBase`MultiByteToWideChar (1 samples, 0.02%)</title><rect x="99.7209%" y="261" width="0.0199%" height="15" fill="rgb(246,81,33)" fg:x="5002" fg:w="1"/><text x="99.9709%" y="271.50"></text></g><g><title>ntdll`RtlUTF8ToUnicodeN (1 samples, 0.02%)</title><rect x="99.7209%" y="245" width="0.0199%" height="15" fill="rgb(252,33,42)" fg:x="5002" fg:w="1"/><text x="99.9709%" y="255.50"></text></g><g><title>toy`main (4,984 samples, 99.36%)</title><rect x="0.5582%" y="485" width="99.3620%" height="15" fill="rgb(209,212,41)" fg:x="28" fg:w="4984"/><text x="0.8082%" y="495.50">toy`main</text></g><g><title>toy`std::rt::lang_start_internal (4,984 samples, 99.36%)</title><rect x="0.5582%" y="469" width="99.3620%" height="15" fill="rgb(207,154,6)" fg:x="28" fg:w="4984"/><text x="0.8082%" y="479.50">toy`std::rt::lang_start_internal</text></g><g><title>toy`core::ops::function::FnOnce::call_once&lt;std::rt::lang_start::closure_env$0&lt;tuple$&lt;&gt; &gt;,tuple$ (4,983 samples, 99.34%)</title><rect x="0.5781%" y="453" width="99.3421%" height="15" fill="rgb(223,64,47)" fg:x="29" fg:w="4983"/><text x="0.8281%" y="463.50">toy`core::ops::function::FnOnce::call_once&lt;std::rt::lang_start::closure_env$0&lt;tuple$&lt;&gt; &gt;,tuple$</text></g><g><title>toy`std::sys_common::backtrace::__rust_begin_short_backtrace&lt;void (*)(),tuple$ (4,983 samples, 99.34%)</title><rect x="0.5781%" y="437" width="99.3421%" height="15" fill="rgb(211,161,38)" fg:x="29" fg:w="4983"/><text x="0.8281%" y="447.50">toy`std::sys_common::backtrace::__rust_begin_short_backtrace&lt;void (*)(),tuple$</text></g><g><title>toy`toy::main (4,983 samples, 99.34%)</title><rect x="0.5781%" y="421" width="99.3421%" height="15" fill="rgb(219,138,40)" fg:x="29" fg:w="4983"/><text x="0.8281%" y="431.50">toy`toy::main</text></g><g><title>toy`std::io::stdio::_print (17 samples, 0.34%)</title><rect x="99.5813%" y="405" width="0.3389%" height="15" fill="rgb(241,228,46)" fg:x="4995" fg:w="17"/><text x="99.8313%" y="415.50"></text></g><g><title>toy`std::io::stdio::impl$12::write_fmt (17 samples, 0.34%)</title><rect x="99.5813%" y="389" width="0.3389%" height="15" fill="rgb(223,209,38)" fg:x="4995" fg:w="17"/><text x="99.8313%" y="399.50"></text></g><g><title>toy`core::fmt::write (17 samples, 0.34%)</title><rect x="99.5813%" y="373" width="0.3389%" height="15" fill="rgb(236,164,45)" fg:x="4995" fg:w="17"/><text x="99.8313%" y="383.50"></text></g><g><title>toy`std::io::Write::write_fmt::impl$0::write_str (17 samples, 0.34%)</title><rect x="99.5813%" y="357" width="0.3389%" height="15" fill="rgb(231,15,5)" fg:x="4995" fg:w="17"/><text x="99.8313%" y="367.50"></text></g><g><title>toy`std::io::stdio::impl$13::write_all (17 samples, 0.34%)</title><rect x="99.5813%" y="341" width="0.3389%" height="15" fill="rgb(252,35,15)" fg:x="4995" fg:w="17"/><text x="99.8313%" y="351.50"></text></g><g><title>toy`std::io::buffered::bufwriter::BufWriter::write_all_cold (17 samples, 0.34%)</title><rect x="99.5813%" y="325" width="0.3389%" height="15" fill="rgb(248,181,18)" fg:x="4995" fg:w="17"/><text x="99.8313%" y="335.50"></text></g><g><title>toy`std::io::Write::write_all (17 samples, 0.34%)</title><rect x="99.5813%" y="309" width="0.3389%" height="15" fill="rgb(233,39,42)" fg:x="4995" fg:w="17"/><text x="99.8313%" y="319.50"></text></g><g><title>toy`std::sys::windows::stdio::write (17 samples, 0.34%)</title><rect x="99.5813%" y="293" width="0.3389%" height="15" fill="rgb(238,110,33)" fg:x="4995" fg:w="17"/><text x="99.8313%" y="303.50"></text></g><g><title>toy`std::sys::windows::stdio::write_valid_utf8_to_console (10 samples, 0.20%)</title><rect x="99.7209%" y="277" width="0.1994%" height="15" fill="rgb(233,195,10)" fg:x="5002" fg:w="10"/><text x="99.9709%" y="287.50"></text></g><g><title>KernelBase`WriteConsoleW (9 samples, 0.18%)</title><rect x="99.7408%" y="261" width="0.1794%" height="15" fill="rgb(254,105,3)" fg:x="5003" fg:w="9"/><text x="99.9908%" y="271.50"></text></g><g><title>KernelBase`WriteConsoleW (9 samples, 0.18%)</title><rect x="99.7408%" y="245" width="0.1794%" height="15" fill="rgb(221,225,9)" fg:x="5003" fg:w="9"/><text x="99.9908%" y="255.50"></text></g><g><title>KernelBase`GetConsoleScreenBufferInfoEx (9 samples, 0.18%)</title><rect x="99.7408%" y="229" width="0.1794%" height="15" fill="rgb(224,227,45)" fg:x="5003" fg:w="9"/><text x="99.9908%" y="239.50"></text></g><g><title>ntdll`NtDeviceIoControlFile (9 samples, 0.18%)</title><rect x="99.7408%" y="213" width="0.1794%" height="15" fill="rgb(229,198,43)" fg:x="5003" fg:w="9"/><text x="99.9908%" y="223.50"></text></g><g><title>kernel32`ExitProcess (1 samples, 0.02%)</title><rect x="99.9203%" y="453" width="0.0199%" height="15" fill="rgb(206,209,35)" fg:x="5012" fg:w="1"/><text x="100.1703%" y="463.50"></text></g><g><title>ntdll`RtlExitUserProcess (1 samples, 0.02%)</title><rect x="99.9203%" y="437" width="0.0199%" height="15" fill="rgb(245,195,53)" fg:x="5012" fg:w="1"/><text x="100.1703%" y="447.50"></text></g><g><title>ntdll`LdrShutdownProcess (1 samples, 0.02%)</title><rect x="99.9203%" y="421" width="0.0199%" height="15" fill="rgb(240,92,26)" fg:x="5012" fg:w="1"/><text x="100.1703%" y="431.50"></text></g><g><title>ntdll`RtlProcessFlsData (1 samples, 0.02%)</title><rect x="99.9203%" y="405" width="0.0199%" height="15" fill="rgb(207,40,23)" fg:x="5012" fg:w="1"/><text x="100.1703%" y="415.50"></text></g><g><title>ntdll`RtlAcquireSRWLockShared (1 samples, 0.02%)</title><rect x="99.9203%" y="389" width="0.0199%" height="15" fill="rgb(223,111,35)" fg:x="5012" fg:w="1"/><text x="100.1703%" y="399.50"></text></g><g><title>ntdll`LdrLoadDll (1 samples, 0.02%)</title><rect x="99.9402%" y="325" width="0.0199%" height="15" fill="rgb(229,147,28)" fg:x="5013" fg:w="1"/><text x="100.1902%" y="335.50"></text></g><g><title>ntdll`RtlAddressInSectionTable (1 samples, 0.02%)</title><rect x="99.9402%" y="309" width="0.0199%" height="15" fill="rgb(211,29,28)" fg:x="5013" fg:w="1"/><text x="100.1902%" y="319.50"></text></g><g><title>ntdll`ZwQueryAttributesFile (1 samples, 0.02%)</title><rect x="99.9402%" y="293" width="0.0199%" height="15" fill="rgb(228,72,33)" fg:x="5013" fg:w="1"/><text x="100.1902%" y="303.50"></text></g><g><title>ntdll`LdrControlFlowGuardEnforced (1 samples, 0.02%)</title><rect x="99.9601%" y="293" width="0.0199%" height="15" fill="rgb(205,214,31)" fg:x="5014" fg:w="1"/><text x="100.2101%" y="303.50"></text></g><g><title>ntdll`LdrControlFlowGuardEnforced (1 samples, 0.02%)</title><rect x="99.9601%" y="277" width="0.0199%" height="15" fill="rgb(224,111,15)" fg:x="5014" fg:w="1"/><text x="100.2101%" y="287.50"></text></g><g><title>ntdll`NtMapViewOfSection (1 samples, 0.02%)</title><rect x="99.9601%" y="261" width="0.0199%" height="15" fill="rgb(253,21,26)" fg:x="5014" fg:w="1"/><text x="100.2101%" y="271.50"></text></g><g><title>all (5,016 samples, 100%)</title><rect x="0.0000%" y="549" width="100.0000%" height="15" fill="rgb(245,139,43)" fg:x="0" fg:w="5016"/><text x="0.2500%" y="559.50"></text></g><g><title>ntdll`RtlUserThreadStart (4,995 samples, 99.58%)</title><rect x="0.4187%" y="533" width="99.5813%" height="15" fill="rgb(252,170,7)" fg:x="21" fg:w="4995"/><text x="0.6687%" y="543.50">ntdll`RtlUserThreadStart</text></g><g><title>kernel32`BaseThreadInitThunk (4,994 samples, 99.56%)</title><rect x="0.4386%" y="517" width="99.5614%" height="15" fill="rgb(231,118,14)" fg:x="22" fg:w="4994"/><text x="0.6886%" y="527.50">kernel32`BaseThreadInitThunk</text></g><g><title>toy`__scrt_common_main_seh (4,988 samples, 99.44%)</title><rect x="0.5582%" y="501" width="99.4418%" height="15" fill="rgb(238,83,0)" fg:x="28" fg:w="4988"/><text x="0.8082%" y="511.50">toy`__scrt_common_main_seh</text></g><g><title>ucrtbase`exit (4 samples, 0.08%)</title><rect x="99.9203%" y="485" width="0.0797%" height="15" fill="rgb(221,39,39)" fg:x="5012" fg:w="4"/><text x="100.1703%" y="495.50"></text></g><g><title>ucrtbase`exit (4 samples, 0.08%)</title><rect x="99.9203%" y="469" width="0.0797%" height="15" fill="rgb(222,119,46)" fg:x="5012" fg:w="4"/><text x="100.1703%" y="479.50"></text></g><g><title>ucrtbase`mbsicmp_l (3 samples, 0.06%)</title><rect x="99.9402%" y="453" width="0.0598%" height="15" fill="rgb(222,165,49)" fg:x="5013" fg:w="3"/><text x="100.1902%" y="463.50"></text></g><g><title>ucrtbase`o_iswascii (3 samples, 0.06%)</title><rect x="99.9402%" y="437" width="0.0598%" height="15" fill="rgb(219,113,52)" fg:x="5013" fg:w="3"/><text x="100.1902%" y="447.50"></text></g><g><title>KernelBase`LoadLibraryExW (3 samples, 0.06%)</title><rect x="99.9402%" y="421" width="0.0598%" height="15" fill="rgb(214,7,15)" fg:x="5013" fg:w="3"/><text x="100.1902%" y="431.50"></text></g><g><title>ntdll`LdrLoadDll (3 samples, 0.06%)</title><rect x="99.9402%" y="405" width="0.0598%" height="15" fill="rgb(235,32,4)" fg:x="5013" fg:w="3"/><text x="100.1902%" y="415.50"></text></g><g><title>ntdll`RtlUnicodeToCustomCPN (3 samples, 0.06%)</title><rect x="99.9402%" y="389" width="0.0598%" height="15" fill="rgb(238,90,54)" fg:x="5013" fg:w="3"/><text x="100.1902%" y="399.50"></text></g><g><title>ntdll`RtlImageRvaToSection (3 samples, 0.06%)</title><rect x="99.9402%" y="373" width="0.0598%" height="15" fill="rgb(213,208,19)" fg:x="5013" fg:w="3"/><text x="100.1902%" y="383.50"></text></g><g><title>ntdll`RtlQueryPerformanceCounter (3 samples, 0.06%)</title><rect x="99.9402%" y="357" width="0.0598%" height="15" fill="rgb(233,156,4)" fg:x="5013" fg:w="3"/><text x="100.1902%" y="367.50"></text></g><g><title>ntdll`RtlQueryPerformanceCounter (3 samples, 0.06%)</title><rect x="99.9402%" y="341" width="0.0598%" height="15" fill="rgb(207,194,5)" fg:x="5013" fg:w="3"/><text x="100.1902%" y="351.50"></text></g><g><title>ntdll`RtlQueryPerformanceCounter (2 samples, 0.04%)</title><rect x="99.9601%" y="325" width="0.0399%" height="15" fill="rgb(206,111,30)" fg:x="5014" fg:w="2"/><text x="100.2101%" y="335.50"></text></g><g><title>ntdll`LdrControlFlowGuardEnforced (2 samples, 0.04%)</title><rect x="99.9601%" y="309" width="0.0399%" height="15" fill="rgb(243,70,54)" fg:x="5014" fg:w="2"/><text x="100.2101%" y="319.50"></text></g><g><title>ntdll`RtlImageNtHeaderEx (1 samples, 0.02%)</title><rect x="99.9801%" y="293" width="0.0199%" height="15" fill="rgb(242,28,8)" fg:x="5015" fg:w="1"/><text x="100.2301%" y="303.50"></text></g><g><title>ntdll`LdrpResGetMappingSize (1 samples, 0.02%)</title><rect x="99.9801%" y="277" width="0.0199%" height="15" fill="rgb(219,106,18)" fg:x="5015" fg:w="1"/><text x="100.2301%" y="287.50"></text></g></svg></svg>